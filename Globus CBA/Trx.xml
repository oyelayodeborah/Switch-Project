<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Trx</name>
    </assembly>
    <members>
        <member name="T:Trx.Messaging.IMessagesIdentifier">
            <summary>
            Esta interfaz define qué debe implementar una clase para calcular
            el identificador de los mensajes.
            </summary>
        </member>
        <member name="M:Trx.Messaging.IMessagesIdentifier.ComputeIdentifier(Trx.Messaging.Message)">
            <summary>
            Calcula el identificador del mensaje dado.
            </summary>
            <param name="message">
            Es el mensaje del que se quiere saber su identificador.
            </param>
            <returns>
            El identificador del mensaje.
            </returns>
        </member>
        <member name="T:Trx.Messaging.FormatterContext">
            <summary>
            Implementa el contexto utilizado para formatear mensajes.
            </summary>
        </member>
        <member name="F:Trx.Messaging.FormatterContext.DefaultBufferSize">
            <summary>
            En caso de que el buffer necesite ser ampliado, será ampliado la cantidad de
            bytes que esta constante indica.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FormatterContext.#ctor(System.Int32)">
            <summary>
            Construye un nuevo contexto para el formateo de mensajes.
            </summary>
            <param name="bufferSize">
            Es el tamaño inicial del buffer donde residirán los datos formateados.
            </param>
            <exception cref="T:System.ArgumentException">
            En caso de que <paramref name="bufferSize"/> sea menor a 1.
            </exception>
        </member>
        <member name="M:Trx.Messaging.FormatterContext.GetBuffer">
            <summary>
            Retorna el buffer donde residen los datos formateados.
            </summary>
            <returns>
            Retorna el buffer donde residen los datos formateados.
            </returns>
        </member>
        <member name="M:Trx.Messaging.FormatterContext.ResizeBuffer(System.Int32)">
            <summary>
            Aumenta el tamaño del buffer en al menos la cantidad de bytes
            indicada.
            </summary>
            <param name="count">
            Es la cantidad mínima de bytes en que al menos se agranda el
            buffer.
            </param>
            <remarks>
            Este método amplía el buffer en bloques cuyo tamaño está definido
            por <see cref="F:Trx.Messaging.FormatterContext.DefaultBufferSize"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            En caso de que <paramref name="count"/> sea menor a 1.
            </exception>
        </member>
        <member name="M:Trx.Messaging.FormatterContext.Clear">
            <summary>
            Elimina los datos formateados contenidos en el buffer.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FormatterContext.Clear(System.Int32)">
            <summary>
            Elimina los datos formateados contenidos en el buffer,
            reservando al principio la cantidad de bytes indicada.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FormatterContext.Write(System.String)">
            <summary>
            Escribe en el buffer de datos formateados, los datos indicados.
            </summary>
            <param name="data">
            Son los datos a escribir en el buffer.
            </param>
        </member>
        <member name="M:Trx.Messaging.FormatterContext.Write(System.String,System.Int32,System.Int32)">
            <summary>
            Escribe en el buffer de datos formateados, los datos indicados.
            </summary>
            <param name="data">
            Son los datos a escribir en el buffer.
            </param>
            <param name="offset">
            Indica a partir desde donde se comienza a copiar la información
            contenida en <paramref name="data"/>.
            </param>
            <param name="count">
            Indica la cantidad de caracteres a copiar.
            </param>
        </member>
        <member name="M:Trx.Messaging.FormatterContext.Write(System.Byte[])">
            <summary>
            Escribe en el buffer de datos formateados, los datos indicados.
            </summary>
            <param name="data">
            Son los datos a escribir en el buffer.
            </param>
        </member>
        <member name="M:Trx.Messaging.FormatterContext.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Escribe en el buffer de datos formateados, los datos indicados.
            </summary>
            <param name="data">
            Son los datos a escribir en el buffer.
            </param>
            <param name="offset">
            Indica a partir desde donde se comienza a copiar la información
            contenida en <paramref name="data"/>.
            </param>
            <param name="count">
            Indica la cantidad de bytes a copiar.
            </param>
        </member>
        <member name="M:Trx.Messaging.FormatterContext.GetData">
            <summary>
            Devuelve un array de bytes conteniendo una copia de los datos
            almacenados en el buffer.
            </summary>
            <returns>
            Una copia de los datos almacenados en el buffer.
            </returns>
            <remarks>
            Si el buffer no contiene datos, esta función retorna
            <see langref="null"/>.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.FormatterContext.GetDataAsString">
            <summary>
            Devuelve una cadena de caracteres conteniendo una copia de
            los datos almacenados en el buffer.
            </summary>
            <returns>
            Una copia de los datos almacenados en el buffer.
            </returns>
            <remarks>
            Si el buffer no contiene datos, esta función retorna
            <see langref="null"/>.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.FormatterContext.Initialize">
            <summary>
            Initializes the context.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FormatterContext.CurrentMessage">
            <summary>
            It returns or sets the current message.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FormatterContext.UpperDataBound">
            <summary>
            Retorna o asigna el puntero dentro del buffer que indica hasta donde
            se han almacenado los datos formateados del mensaje.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FormatterContext.FreeBufferSpace">
            <summary>
            Retorna el espacio disponible en el buffer donde residirán los datos
            formateados.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FormatterContext.BufferSize">
            <summary>
            Retorna el tamaño del buffer.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FormatterContext.DataLength">
            <summary>
            Retorna la cantidad de bytes disponibles en el buffer de datos
            formateados.
            </summary>
        </member>
        <member name="T:Trx.Messaging.FlowControl.ClientPeer">
            <summary>
            This class encapsulates the client peer services.
            </summary>
            <remarks>
            The client peers are those which initiates the connection
            with the remote system.
            </remarks>
        </member>
        <member name="T:Trx.Messaging.FlowControl.Peer">
            <summary>
            Esta clase encapsula los servicios de un canal.
            </summary>
        </member>
        <member name="T:Trx.Messaging.FlowControl.IMessageSource">
            <summary>
            Esta interfaz especifica qué debe implementar una clase
            para exponerse como punto de origen de los mensajes.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.IMessageSource.Send(Trx.Messaging.Message)">
            <summary>
            Le envía el mensaje indicado al sistema remoto.
            </summary>
            <param name="message">
            Es el mensaje que se desea enviar.
            </param>
        </member>
        <member name="P:Trx.Messaging.FlowControl.IMessageSource.IsConnected">
            <summary>
            Informa si el punto de origen está conectado.
            </summary>
        </member>
        <member name="T:Trx.Messaging.FlowControl.IMessageProcessor">
            <summary>
            This interface defines which a class must implement to receive
            messages from other components.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.IMessageProcessor.Process(Trx.Messaging.FlowControl.IMessageSource,Trx.Messaging.Message)">
            <summary>
            It's called to process the indicated message.
            </summary>
            <param name="source">
            It's the source of the message.
            </param>
            <param name="message">
            It's the message to be processed.
            </param>
            <returns>
            A logical value the same to true, if the messages processor
            processeced it, otherwise it returns false.
            </returns>
            <remarks>
            If the messages processor doesn't process it, the system
            delivers it to the next processor in the list, and so on until
            one process it, or there aren't other processors.
            </remarks>
        </member>
        <member name="P:Trx.Messaging.FlowControl.IMessageProcessor.NextMessageProcessor">
            <summary>
            It returns or sets the next messages processor.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.Peer.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Trx.Messaging.FlowControl.Peer"/>.
            </summary>
            <param name="name">
            Es el nombre del punto de conexión.
            </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.Peer.#ctor(System.String,Trx.Messaging.IMessagesIdentifier)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Trx.Messaging.FlowControl.Peer"/>,
            configurándola para procesar requerimientos.
            </summary>
            <param name="name">
            Es el nombre del punto de conexión.
            </param>
            <param name="messagesIdentifier">
            Es el identificador de mensajes.
            </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.Peer.OnError(Trx.Utilities.ErrorEventArgs)">
            <summary>
            Dispara el evento Error.
            </summary>
            <param name="e">
            Son los parámetros del error que se recibieron
            desde el canal.
            </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.Peer.OnRequestDone(Trx.Messaging.FlowControl.PeerRequest)">
            <summary>
            Dispara el evento RequestDone.
            </summary>
            <param name="request">
            Es el requerimiento que se ha completado.
            </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.Peer.OnRequestCancelled(Trx.Messaging.FlowControl.PeerRequest)">
            <summary>
            Dispara el evento RequestCancelled.
            </summary>
            <param name="request">
            Es el requerimiento que se ha cancelado.
            </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.Peer.OnReceive(Trx.Messaging.Message)">
            <summary>
            Dispara el evento <see cref="E:Trx.Messaging.FlowControl.Peer.Receive"/>, luego, si el mensaje
            recibido es la respuesta a un requerimiento dispara el evento
            <see cref="E:Trx.Messaging.FlowControl.Peer.RequestDone"/> y finaliza la ejecución del método,
            en caso contrario invoca a cada procesador de mensajes hasta
            que alguno lo procese o no hayan mas procesadores de mensajes en
            la lista.
            </summary>
            <param name="message">
            Es el mensaje que se ha recibido.
            </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.Peer.OnConnected">
            <summary>
            Dispara el evento Connected.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.Peer.OnDisconnected">
            <summary>
            Dispara el evento Disconnected.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.Peer.Process(Trx.Messaging.FlowControl.IMessageSource,Trx.Messaging.Message)">
            <summary>
            Esta función es invocada por el canal para que se procese el
            mensaje indicado.
            </summary>
            <param name="source">
            Es el origen del mensaje.
            </param>
            <param name="message">
            Es el mensaje que debe ser 
            </param>
            <returns>
            Un valor lógico igual a verdadero, indicando que
            procesó el mensaje.
            </returns>
        </member>
        <member name="M:Trx.Messaging.FlowControl.Peer.Connect">
             <summary>
             Inicia la conexión con el sistema remoto.
            
             It initiates the connection with the remote system.
             </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.Peer.Close">
             <summary>
             Cierra la conexión, si existe, que se tiene con el sistema remoto.
            
             Closes the connection, if exists, stablished with the remote system.
             </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.Peer.Send(Trx.Messaging.Message)">
             <summary>
             Le envía el mensaje indicado al sistema remoto.
            
             It sends the indicated message to the remote system.
             </summary>
             <param name="message">
             Es el mensaje que se desea enviar.
            
             It's the message to be sent.
             </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.Peer.Send(Trx.Messaging.FlowControl.PeerRequest)">
            <summary>
            Envía un mensaje del que se espera respuesta.
            </summary>
            <param name="request">
            Es el requerimiento que encapsula el mensaje
            enviado y el mensaje recibido.
            </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.Peer.Cancel(Trx.Messaging.FlowControl.PeerRequest)">
            <summary>
            Cancela un requerimiento en progreso.
            </summary>
            <param name="request">
            Es el requerimiento a cancelar.
            </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.Peer.OnChannelError(System.Object,Trx.Utilities.ErrorEventArgs)">
             <summary>
             Maneja el evento <see cref="E:Trx.Messaging.Channels.IChannel.Error"/>.
            
             It handles the <see cref="E:Trx.Messaging.Channels.IChannel.Error"/> event.
             </summary>
             <param name="sender">
             Es el canal que envía el evento.
            
             It's the channel which sends the event.
             </param>
             <param name="e">
             Son los parámetros del evento.
            
             They are the parameters of the event.
             </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.Peer.OnChannelConnected(System.Object,System.EventArgs)">
             <summary>
             Maneja el evento <see cref="E:Trx.Messaging.Channels.IChannel.Connected"/>.
            
             It handles the <see cref="E:Trx.Messaging.Channels.IChannel.Connected"/> event.
             </summary>
             <param name="sender">
             Es el canal que envía el evento.
            
             It's the channel which sends the event.
             </param>
             <param name="e">
             Son los parámetros del evento.
            
             They are the parameters of the event.
             </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.Peer.OnChannelDisconnected(System.Object,System.EventArgs)">
             <summary>
             Maneja el evento <see cref="E:Trx.Messaging.Channels.IChannel.Disconnected"/>.
            
             It handles the <see cref="E:Trx.Messaging.Channels.IChannel.Connected"/> event.
             </summary>
             <param name="sender">
             Es el canal que envía el evento.
            
             It's the channel which sends the event.
             </param>
             <param name="e">
             Son los parámetros del evento.
            
             They are the parameters of the event.
             </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.Peer.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.Peer.IsConnected">
             <summary>
             Informa si el punto de conexión está conectado.
            
             It informs whether the peer is connected.
             </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.Peer.ProtectedChannel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.Peer.Channel">
             <summary>
             Es el canal que emplea el punto de conexión para comunicarse
             con el sistema remoto.
            
             It's the channel used by the peer to communicate with the
             remote system.
             </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.Peer.HostConnect">
            <summary>
            
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.Peer.Name">
            <summary>
            Retorna el nombre del punto de conexión.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.Peer.MessageProcessor">
            <summary>
            Retorna o asigna el procesador de mensajes recibidos.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.Peer.MessagesIdentifier">
            <summary>
            Retorna el identificador de mensajes.
            </summary>
            <remarks>
            El identificador de mensajes se utiliza para corresponder
            el mensaje que se envía con el que se recibe en un
            requerimiento.
            </remarks>
        </member>
        <member name="P:Trx.Messaging.FlowControl.Peer.NextMessageProcessor">
            <summary>
            Retorna o asigna el siguiente procesador de mensajes.
            </summary>
        </member>
        <member name="E:Trx.Messaging.FlowControl.Peer.Connected">
            <summary>
            Se dispara cuando el canal se ha conectado.
            </summary>
        </member>
        <member name="E:Trx.Messaging.FlowControl.Peer.Disconnected">
            <summary>
            Se dispara cuando el canal se ha desconectado.
            </summary>
        </member>
        <member name="E:Trx.Messaging.FlowControl.Peer.Receive">
            <summary>
            Se dispara cuando se ha recibido un mensaje.
            </summary>
        </member>
        <member name="E:Trx.Messaging.FlowControl.Peer.RequestDone">
            <summary>
            Se dispara cuando se ha completado un requerimiento.
            </summary>
        </member>
        <member name="E:Trx.Messaging.FlowControl.Peer.RequestCancelled">
            <summary>
            Se dispara cuando se ha cancelado un requerimiento.
            </summary>
        </member>
        <member name="E:Trx.Messaging.FlowControl.Peer.Error">
            <summary>
            Se dispara cuando se ha producido un error en procesamiento
            interno del Peer.
            </summary>
            <remarks>
            Este evento se recibe desde el Peer, cuando se produce un error
            que provoca que el Peer quede deshabilitado, debiendo ser
            necesario invocar nuevamente a <see cref="M:Trx.Messaging.FlowControl.Peer.Connect"/> para
            utilizarlo.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ClientPeer.#ctor(System.String,Trx.Messaging.Channels.IChannel)">
            <summary>
            Initilizes a new instance of <see cref="T:Trx.Messaging.FlowControl.ClientPeer"/> class.
            </summary>
            <param name="name">
            It's the name of the peer.
            </param>
            <param name="channel">
            It's the channel which the peer gets connection with the remote system.
            </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ClientPeer.#ctor(System.String,Trx.Messaging.Channels.IChannel,Trx.Messaging.IMessagesIdentifier)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Trx.Messaging.FlowControl.ClientPeer"/>,
            configurating it to process requests.
            </summary>
            <param name="name">
            It's the name of the peer.
            </param>
            <param name="channel">
            It's the channel which the peer gets connection with the remote system.
            </param>
            <param name="messagesIdentifier">
            It's the messages identifier.
            </param>
        </member>
        <member name="T:Trx.Utilities.FrameworkEncoding">
            <summary>
            Provides the way to configure the encoding to be used in the framework.
            </summary>
        </member>
        <member name="M:Trx.Utilities.FrameworkEncoding.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Trx.Utilities.FrameworkEncoding"/>.
            </summary>
        </member>
        <member name="M:Trx.Utilities.FrameworkEncoding.GetInstance">
            <summary>
            It returns an instance of <see cref="T:Trx.Utilities.FrameworkEncoding"/> class.
            </summary>
            <returns>
            An <see cref="T:Trx.Utilities.FrameworkEncoding"/> instance.
            </returns>
        </member>
        <member name="P:Trx.Utilities.FrameworkEncoding.Encoding">
            <summary>
            It sets or returns the Encoding used by the framework.
            </summary>
        </member>
        <member name="T:Trx.Messaging.StringField">
            <summary>
            Representa un componente de mensajería que es un campo de mensaje de
            tipo cadena de caracteres.
            </summary>
        </member>
        <member name="T:Trx.Messaging.Field">
            <summary>
            Representa un componente de mensajería que es un campo de mensaje.
            </summary>
        </member>
        <member name="T:Trx.Messaging.MessagingComponent">
            <summary>
            Representa un componente de mensajería.
            </summary>
        </member>
        <member name="M:Trx.Messaging.MessagingComponent.#ctor">
            <summary>
            Crea un nuevo componente de mensajería.
            </summary>
        </member>
        <member name="M:Trx.Messaging.MessagingComponent.GetBytes">
            <summary>
            Convierte a un array de bytes el valor del componente de mensajería.
            </summary>
            <returns>
            Un array de bytes.
            </returns>
        </member>
        <member name="M:Trx.Messaging.MessagingComponent.ToString">
            <summary>
            Convierte en una cadena de caracteres el valor del componente de mensajería.
            </summary>
            <returns>
            Una cadena de caracteres que representan el valor del componente de mensajería.
            </returns>
        </member>
        <member name="M:Trx.Messaging.MessagingComponent.Clone">
            <summary>
            Construye una copia exacta del componente de mensajería.
            </summary>
            <returns>
            Una copia exacta del componente de mensajería.
            </returns>
        </member>
        <member name="M:Trx.Messaging.MessagingComponent.Dispose">
            <summary>
            Destruye la instancia del componente de mensajería.
            </summary>
        </member>
        <member name="M:Trx.Messaging.MessagingComponent.XmlRendering(log4net.ObjectRenderer.RendererMap)">
            <summary>
            Retorna una clase que puede representar en formato XML el componente de
            mensajería.
            </summary>
            <param name="renderingMap">
            Es un mapa con todas las clases que representan/ objetos.
            </param>
            <returns>
            Una clase que puede representar en formato XML el componente de mensajería.
            </returns>
        </member>
        <member name="M:Trx.Messaging.MessagingComponent.NewComponent">
            <summary>
            Crea un nuevo componente de mensajería del tipo conocido por la subclase.
            </summary>
            <returns>
            Un nuevo componente de mensajería.
            </returns>
        </member>
        <member name="M:Trx.Messaging.Field.#ctor(System.Int32)">
            <summary>
            Contruye un nuevo campo de mensaje.
            </summary>
            <param name="fieldNumber">
            Es el número del campo en el mensaje.
            </param>
        </member>
        <member name="M:Trx.Messaging.Field.XmlRendering(log4net.ObjectRenderer.RendererMap)">
            <summary>
            Retorna una clase que puede representar en formato XML el campo.
            </summary>
            <param name="renderingMap">
            Es un mapa con todas las clases que representan objetos.
            </param>
            <returns>
            Una clase que puede representar en formato XML el campo.
            </returns>
        </member>
        <member name="M:Trx.Messaging.Field.SetFieldNumber(System.Int32)">
            <summary>
            Reasigna el número de campo.
            </summary>
            <param name="fieldNumber">Es el nuevo número de campo.</param>
        </member>
        <member name="P:Trx.Messaging.Field.FieldNumber">
            <summary>
            Retorna el número del campo en el mensaje.
            </summary>
        </member>
        <member name="P:Trx.Messaging.Field.Value">
            <summary>
            Retorna o asigna el valor del campo.
            </summary>
        </member>
        <member name="M:Trx.Messaging.StringField.#ctor(System.Int32)">
            <summary>
            Contruye un nuevo campo de mensaje.
            </summary>
            <param name="fieldNumber">
            Es el número del campo en el mensaje.
            </param>
        </member>
        <member name="M:Trx.Messaging.StringField.#ctor(System.Int32,System.String)">
            <summary>
            Contruye un nuevo campo de mensaje.
            </summary>
            <param name="fieldNumber">
            Es el número del campo en el mensaje.
            </param>
            <param name="value">
            Es el valor del nuevo campo.
            </param>
        </member>
        <member name="M:Trx.Messaging.StringField.ToString">
            <summary>
            Convierte en una cadena de caracteres el valor del campo.
            </summary>
            <returns>
            Una cadena de caracteres que representan el valor del campo.
            </returns>
        </member>
        <member name="M:Trx.Messaging.StringField.GetBytes">
            <summary>
            Convierte a un array de bytes el valor del campo.
            </summary>
            <returns>
            Un array de bytes.
            </returns>
        </member>
        <member name="M:Trx.Messaging.StringField.Clone">
            <summary>
            Construye una copia exacta del campo.
            </summary>
            <returns>
            Una copia exacta del campo.
            </returns>
        </member>
        <member name="M:Trx.Messaging.StringField.NewComponent">
            <summary>
            Crea un nuevo campo de tipo string.
            </summary>
            <returns>
            Un nuevo campo de tipo string.
            </returns>
        </member>
        <member name="P:Trx.Messaging.StringField.FieldValue">
            <summary>
            Retorna o asigna el valor del campo de tipo cadena de carateres.
            </summary>
        </member>
        <member name="P:Trx.Messaging.StringField.Value">
            <summary>
            Retorna o asigna el valor del campo.
            </summary>
        </member>
        <member name="T:Trx.Messaging.FlowControl.ListenerCollection">
            <summary>
            It implements a collection of elements which implements
            the interface <see cref="T:Trx.Messaging.FlowControl.IListener"/>.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ListenerCollection.#ctor">
            <summary>
            It initializes a new instance of the class
            <see cref="T:Trx.Messaging.FlowControl.ListenerCollection"/>.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ListenerCollection.#ctor(System.Int32)">
            <summary>
            It initializes a new instance of the class
            <see cref="T:Trx.Messaging.FlowControl.ListenerCollection"/> setting the number
            of elements which the collection is initially capable of
            storing.
            </summary>
            <param name="capacity">
            It's the number of the elements which the collection is
            initially capable of storing.
            </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ListenerCollection.Add(Trx.Messaging.FlowControl.IListener)">
            <summary>
            It adds an element to the collection.
            </summary>
            <param name="listener">
            It's the element to be added to the collection.
            </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ListenerCollection.Remove(Trx.Messaging.FlowControl.IListener)">
            <summary>
            Removes an element from the collection.
            </summary>
            <param name="listener">
            It's the element to be removed from the collection.
            </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ListenerCollection.GetEnumerator">
            <summary>
            It creates and returns an enumerator over the collection.
            </summary>
            <returns>
            It's the collection enumerator.
            </returns>
        </member>
        <member name="P:Trx.Messaging.FlowControl.ListenerCollection.Count">
            <summary>
            It returns the number of elements stored in the collection.
            </summary>
        </member>
        <member name="T:Trx.Messaging.FlowControl.ListenerCollection.ListenerEnumerator">
            <summary>
            It implements a collection enumerator.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ListenerCollection.ListenerEnumerator.#ctor(System.Collections.ArrayList)">
            <summary>
            It creates a new instance of the class <see cref="T:Trx.Messaging.FlowControl.ListenerCollection.ListenerEnumerator"/>.
            </summary>
            <param name="listeners">
            It's the table which contains the listeners.
            </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ListenerCollection.ListenerEnumerator.Reset">
            <summary>
            It restarts the enumeration.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ListenerCollection.ListenerEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Trx.Messaging.FlowControl.ListenerCollection.ListenerEnumerator.Current">
            <summary>
            Gets the current element in the enumeration.
            </summary>
        </member>
        <member name="T:Trx.Messaging.ConditionalFormatting.MidEqualsStringOperator">
            <summary>
            This class implements the equals operator of two expressions.
            </summary>
        </member>
        <member name="T:Trx.Messaging.ConditionalFormatting.EqualityEqualsOperator">
            <summary>
            This class implements the equals operator of two expressions.
            </summary>
        </member>
        <member name="T:Trx.Messaging.ConditionalFormatting.IBooleanExpression">
            <summary>
            It's the representation for operands, operators or expressions that
            can be evaluated to result in boolean values.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.IBooleanExpression.EvaluateParse(Trx.Messaging.ParserContext@)">
            <summary>
            Evaluates the expression when parsing a message.
            </summary>
            <param name="parserContext">
            It's the parser context.
            </param>
            <returns>
            A boolean value.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.IBooleanExpression.EvaluateFormat(Trx.Messaging.Field,Trx.Messaging.FormatterContext@)">
            <summary>
            Evaluates the expression when formatting a message.
            </summary>
            <param name="field">
            It's the field to format.
            </param>
            <param name="formatterContext">
            It's the context of formatting to be used by the method.
            </param>
            <returns>
            A boolean value.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.EqualityEqualsOperator.#ctor">
            <summary>
            It initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.EqualityEqualsOperator.#ctor(Trx.Messaging.ConditionalFormatting.IMessageExpression,Trx.Messaging.ConditionalFormatting.IValueExpression)">
            <summary>
            It initializes a new instance of the class.
            </summary>
            <param name="messageExpression">
            The message expression, source of the field value of the equality
            operator (left part of the operator).
            </param>
            <param name="valueExpression">
            The value expression of the equality operator (right part of the operator).
            </param>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.EqualityEqualsOperator.EvaluateParse(Trx.Messaging.ParserContext@)">
            <summary>
            Evaluates the expression when parsing a message.
            </summary>
            <param name="parserContext">
            It's the parser context.
            </param>
            <returns>
            A boolean value.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.EqualityEqualsOperator.EvaluateFormat(Trx.Messaging.Field,Trx.Messaging.FormatterContext@)">
            <summary>
            Evaluates the expression when formatting a message.
            </summary>
            <param name="field">
            It's the field to format.
            </param>
            <param name="formatterContext">
            It's the context of formatting to be used by the method.
            </param>
            <returns>
            A boolean value.
            </returns>
        </member>
        <member name="P:Trx.Messaging.ConditionalFormatting.EqualityEqualsOperator.MessageExpression">
            <param name="messageExpression">
            It returns or sets the message expression, source of the field value of
            the equality operator (left part of the operator).
            </param>
        </member>
        <member name="P:Trx.Messaging.ConditionalFormatting.EqualityEqualsOperator.ValueExpression">
            <summary>
            It returns or sets the value expression of the equality operator (right
            part of the operator).
            </summary>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.MidEqualsStringOperator.#ctor">
            <summary>
            It initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.MidEqualsStringOperator.#ctor(Trx.Messaging.ConditionalFormatting.IMessageExpression,Trx.Messaging.ConditionalFormatting.StringConstantExpression,System.Int32,System.Int32)">
            <summary>
            It initializes a new instance of the class.
            </summary>
            <param name="messageExpression">
            The message expression, source of the field value of the equality
            operator (left part of the operator).
            </param>
            <param name="valueExpression">
            The value expression of the equality operator (right part of the operator).
            </param>
            <param name="startIndex">
            The index of the start of the substring.
            </param>
            <param name="length">
            The length of the substring.
            </param>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.MidEqualsStringOperator.GetSubstring(System.String)">
            <summary>
            It builds the substring from the field value.
            </summary>
            <param name="fieldValue">
            The field value.
            </param>
            <returns>
            A string which is the substring from the field value..
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.MidEqualsStringOperator.EvaluateParse(Trx.Messaging.ParserContext@)">
            <summary>
            Evaluates the expression when parsing a message.
            </summary>
            <param name="parserContext">
            It's the parser context.
            </param>
            <returns>
            A boolean value.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.MidEqualsStringOperator.EvaluateFormat(Trx.Messaging.Field,Trx.Messaging.FormatterContext@)">
            <summary>
            Evaluates the expression when formatting a message.
            </summary>
            <param name="field">
            It's the field to format.
            </param>
            <param name="formatterContext">
            It's the context of formatting to be used by the method.
            </param>
            <returns>
            A boolean value.
            </returns>
        </member>
        <member name="P:Trx.Messaging.ConditionalFormatting.MidEqualsStringOperator.ValueExpression">
            <summary>
            It returns or sets the value expression of the equality operator (right
            part of the operator).
            </summary>
        </member>
        <member name="P:Trx.Messaging.ConditionalFormatting.MidEqualsStringOperator.StartIndex">
            <summary>
            It returns or sets the index of the start of the substring.
            </summary>
        </member>
        <member name="P:Trx.Messaging.ConditionalFormatting.MidEqualsStringOperator.Length">
            <summary>
            It returns or sets the length of the substring.
            </summary>
        </member>
        <member name="T:Trx.Messaging.ConditionalFormatting.IConditionalFieldEvaluator">
            <summary>
            It defines the interface needed by <see cref="T:Trx.Messaging.ConditionalFormatting.ConditionalFieldFormatter"/>,
            to evaluate which field formatter to use.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.IConditionalFieldEvaluator.EvaluateFormat(Trx.Messaging.Field,Trx.Messaging.FormatterContext@)">
            <summary>
            Evaluates the field to format to decide the field formatter to be used.
            </summary>
            <param name="field">
            It's the field to format.
            </param>
            <param name="formatterContext">
            It's the context of formatting to be used by the method.
            </param>
            <returns>
            A logical value indicating the field formatter to be used.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.IConditionalFieldEvaluator.EvaluateParse(Trx.Messaging.ParserContext@)">
            <summary>
            Evaluates the parser context to decide the field formatter to be used.
            </summary>
            <param name="parserContext">
            It's the parser context.
            </param>
            <returns>
            A logical value indicating the field formatter to be used.
            </returns>
        </member>
        <member name="T:Trx.Utilities.SpacePaddingLeft">
            <summary>
            This class implements a filler of values of type string.
            It performs the work adding or removing spaces at the
            beginning of the given value.
            </summary>
            <remarks>
            In addition, this filler verifies that the length of the data
            to fill up, does not exceed the expected length.
            </remarks>
        </member>
        <member name="T:Trx.Utilities.StringPaddingLeft">
            <summary>
            This class implements a filler of values of type string.
            It performs the work adding or removing a character at the
            beginning of the given value.
            </summary>
            <remarks>
            In addition, this filler verifies that the length of the data
            to fill up, does not exceed the expected length.
            </remarks>
        </member>
        <member name="T:Trx.Utilities.IStringPadding">
            <summary>
            It defines what must implement a class to pad a value of type string.
            </summary>
        </member>
        <member name="M:Trx.Utilities.IStringPadding.Pad(System.String,System.Int32)">
            <summary>
            It performs the pad of a value of type string.
            </summary>
            <param name="data">
            It is the value that should be padded.
            </param>
            <param name="totalWidth">
            Is the maximum length of the resultant string.
            </param>
            <returns>
            A string with the padded value.
            </returns>
        </member>
        <member name="M:Trx.Utilities.IStringPadding.RemovePad(System.String)">
            <summary>
            It eliminates the padding in the given value.
            </summary>
            <param name="data">
            The padded data.
            </param>
            <returns>
            The value without the padding.
            </returns>
        </member>
        <member name="M:Trx.Utilities.StringPaddingLeft.#ctor(System.Boolean,System.Char,System.Boolean)">
            <summary>
            It constructs a new instance of the filler.
            </summary>
            <param name="truncate">
            <see langref="true"/> to discard data over the supported length,
            otherwise <see langref="false"/> to receive an exception if
            data doesn't fit in field.
            </param>
            <param name="pad">
            It is the character to use in the filling.
            </param>
            <param name="canRemovePad">
            It indicates in true if the filling is removed, in false it does not do it.
            </param>
        </member>
        <member name="M:Trx.Utilities.StringPaddingLeft.#ctor(System.Boolean,System.Char)">
            <summary>
            It constructs a new instance of the filler.
            </summary>
            <param name="truncate">
            <see langref="true"/> to discard data over the supported length,
            otherwise <see langref="false"/> to receive an exception if
            data doesn't fit in field.
            </param>
            <param name="pad">
            It is the character to use in the filling.
            </param>
        </member>
        <member name="M:Trx.Utilities.StringPaddingLeft.Pad(System.String,System.Int32)">
            <summary>
            It carries out the filling of a value of type string.
            </summary>
            <param name="data">
            It is the value that must be filled up.
            </param>
            <param name="totalWidth">
            It is the maximum length of the resulting value.
            </param>
            <returns>
            A string with the filled up value.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="totalWidth"/> less than 1.
            </exception>
            <exception cref="T:System.ArgumentException">
            Data length &gt; totalWidth (the instance can't
            truncate value).
            </exception>
        </member>
        <member name="M:Trx.Utilities.StringPaddingLeft.RemovePad(System.String)">
            <summary>
            It eliminates the filling used in the given value.
            </summary>
            <param name="data">
            It is the filled up value.
            </param>
            <returns>
            The value without its filling.
            </returns>
        </member>
        <member name="P:Trx.Utilities.StringPaddingLeft.Truncate">
            <summary>
            It informs if the class has been formed to truncate the
            data of the fields whose length is superior to the supported one.
            </summary>
        </member>
        <member name="P:Trx.Utilities.StringPaddingLeft.CanRemovePad">
            <summary>
            It informs if the filler is formed to remove the filling character.
            </summary>
        </member>
        <member name="P:Trx.Utilities.StringPaddingLeft.PadCharacter">
            <summary>
            It returns the pad character.
            </summary>
        </member>
        <member name="M:Trx.Utilities.SpacePaddingLeft.#ctor(System.Boolean)">
            <summary>
            It constructs a new instance of the filler. It's private,
            in order to force the user to use <see cref="M:Trx.Utilities.SpacePaddingLeft.GetInstance(System.Boolean)"/>.
            </summary>
            <param name="truncate">
            <see langref="true"/> to discard data over the supported length,
            otherwise <see langref="false"/> to receive an exception if
            data doesn't fit in field.
            </param>
        </member>
        <member name="M:Trx.Utilities.SpacePaddingLeft.GetInstance(System.Boolean)">
            <summary>
            It returns an instance of class <see cref="T:Trx.Utilities.SpacePaddingLeft"/>.
            </summary>
            <param name="truncate">
            <see langref="true"/> to discard data over the supported length,
            otherwise <see langref="false"/> to receive an exception if
            data doesn't fit in field.
            </param>
            <returns>
            An instance of class <see cref="T:Trx.Utilities.SpacePaddingLeft"/>.
            </returns>
        </member>
        <member name="T:Trx.Messaging.StringEncoder">
            <summary>
            Implementa una clase capaz de formatear y analizar componentes de
            mensajería, utilizando como formato de datos el set de caracteres
            ASCII.
            </summary>
            <remarks>
            This class implements the Singleton pattern, you must use
            <see cref="M:Trx.Messaging.StringEncoder.GetInstance"/> to acquire the instance.
            </remarks>
        </member>
        <member name="T:Trx.Messaging.IStringEncoder">
            <summary>
            Esta interfaz define qué debe implementar una clase para formatear y
            analizar componentes de mensajería hacia y desde su forma cruda cuando
            son recibido y/o enviados hacia otro sistema.
            Formatea, analiza y produce datos del tipo <see langref="string"/>.
            </summary>
        </member>
        <member name="M:Trx.Messaging.IStringEncoder.GetEncodedLength(System.Int32)">
            <summary>
            Calcula el largo de los datos formateados del componente de mensajería.
            </summary>
            <param name="dataLength">Es el largo de los datos del componente de
            mensajería.</param>
            <returns>Retorna el largo de los datos formateados.</returns>
        </member>
        <member name="M:Trx.Messaging.IStringEncoder.Encode(System.String,Trx.Messaging.FormatterContext@)">
            <summary>
            Formatea los datos del componente de mensajería.
            </summary>
            <param name="data">
            Son los datos del componente de mensajería.
            </param>
            <param name="formatterContext">
            Es el contexto de formateo donde se almacenará la
            información formateada.
            </param>
        </member>
        <member name="M:Trx.Messaging.IStringEncoder.Decode(Trx.Messaging.ParserContext@,System.Int32)">
            <summary>
            Convierte los datos formateados en datos válidos del componente
            de mensajería.
            </summary>
            <param name="parserContext">
            Es el contexto de análisis y construcción de mensajes donde
            reside la información a decodificar.
            </param>
            <param name="length">
            Es la cantidad de información que se desea obtener.
            </param>
            <returns>
            Una cadena de caracteres con los datos del componente de mensajería.
            </returns>
        </member>
        <member name="M:Trx.Messaging.StringEncoder.#ctor">
            <summary>
            Construye una nueva instancia del codificador. Le damos el nivel
            del visibilidad 'private' para forzar al usuario a emplear
            <see cref="M:Trx.Messaging.StringEncoder.GetInstance"/>.
            </summary>
        </member>
        <member name="M:Trx.Messaging.StringEncoder.GetInstance">
            <summary>
            Retorna una instancia de la clase <see cref="T:Trx.Messaging.StringEncoder"/>.
            </summary>
            <returns>
            Una instancia de la clase <see cref="T:Trx.Messaging.StringEncoder"/>.
            </returns>
        </member>
        <member name="M:Trx.Messaging.StringEncoder.GetEncodedLength(System.Int32)">
            <summary>
            Calcula el largo de los datos formateados del componente de mensajería.
            </summary>
            <param name="dataLength">
            Es el largo de los datos del componente de mensajería.
            </param>
            <returns>
            Retorna el largo de los datos formateados.
            </returns>
        </member>
        <member name="M:Trx.Messaging.StringEncoder.Encode(System.String,Trx.Messaging.FormatterContext@)">
            <summary>
            Formatea los datos del componente de mensajería.
            </summary>
            <param name="data">
            Son los datos del componente de mensajería.
            </param>
            <param name="formatterContext">
            Es el contexto de formateo donde se almacenará la
            información formateada.
            </param>
        </member>
        <member name="M:Trx.Messaging.StringEncoder.Decode(Trx.Messaging.ParserContext@,System.Int32)">
            <summary>
            Convierte los datos formateados en datos válidos del componente
            de mensajería.
            </summary>
            <param name="parserContext">
            Es el contexto de análisis y construcción de mensajes donde
            reside la información a decodificar.
            </param>
            <param name="length">
            Es la cantidad de información que se desea obtener.
            </param>
            <returns>
            Una cadena de caracteres con los datos del componente de mensajería.
            </returns>
        </member>
        <member name="T:Trx.Messaging.Iso8583.Iso8583Ascii1987BinaryBitmapMessageFormatter">
            <summary>
            It defines an ISO 8583 messages formatter to produce and parse
            strings without control characters. The definition is for the
            ISO 8583-87.
            </summary>
        </member>
        <member name="T:Trx.Messaging.Iso8583.Iso8583MessageFormatter">
            <summary>
            It implements an ISO 8583 messages formatter.
            </summary>
        </member>
        <member name="T:Trx.Messaging.BasicMessageFormatter">
            <summary>
            It implements a simple messages formatter, that can be utilized as base
            for other more sophisticated.
            </summary>
            <remarks>
            This formatter can handle messages with all the types of fields that are
            implemented in the framework, string fields, raw byte fields and bitmaps.
            There's a special handling, updating its values depending of the presence
            or not of their associated fields.
            </remarks>
        </member>
        <member name="T:Trx.Messaging.IMessageFormatter">
            <summary>
            It defines a messages formatter.
            </summary>
        </member>
        <member name="M:Trx.Messaging.IMessageFormatter.FieldCanBeLogged(System.Int32)">
            <summary>
            It indicates if the specified field number can be logged.
            </summary>
            <param name="fieldNumber">
            The field number to known if can logged.
            </param>
            <returns>
            true if the field can be logged, otherwise false.
            </returns>
        </member>
        <member name="M:Trx.Messaging.IMessageFormatter.ObfuscateFieldData(Trx.Messaging.Field)">
            <summary>
            It returns the obfuscated field value.
            </summary>
            <param name="field">
            The field to be logged.
            </param>
            <returns>
            The data to be logged representing the obfuscated field value.
            </returns>
        </member>
        <member name="M:Trx.Messaging.IMessageFormatter.Format(Trx.Messaging.Message,Trx.Messaging.FormatterContext@)">
            <summary>
            It formats a message.
            </summary>
            <param name="message">
            It's the message to be formatted.
            </param>
            <param name="formatterContext">
            It's the formatter context to be used in the format.
            </param>
        </member>
        <member name="M:Trx.Messaging.IMessageFormatter.Parse(Trx.Messaging.ParserContext@)">
            <summary>
            It parses the data contained in the parser context.
            </summary>
            <param name="parserContext">
            It's the context holding the information to produce a new message instance.
            </param>
            <returns>
            The parsed message, or a null reference if the data contained in the context
            is insufficient to produce a new message.
            </returns>
        </member>
        <member name="P:Trx.Messaging.IMessageFormatter.FieldFormatters">
            <summary>
            It returns the collection of field formatters known by this instance of messages formatter.
            </summary>
        </member>
        <member name="M:Trx.Messaging.BasicMessageFormatter.#ctor">
            <summary>
            It builds a new messages formatter.
            </summary>
        </member>
        <member name="M:Trx.Messaging.BasicMessageFormatter.InitializeBitmapTable(System.Int32[])">
            <summary>
            It initializes an array of bitmaps.
            </summary>
            <param name="bitmaps">
            It's the array to initialize.
            </param>
        </member>
        <member name="M:Trx.Messaging.BasicMessageFormatter.OnFieldsFormatterAdded(System.Object,Trx.Messaging.FieldFormatterEventArgs)">
            <summary>
            It handles the event fired when a field formatter is added to
            the collection of field formatters.
            </summary>
            <param name="sender">
            The object sending the event.
            </param>
            <param name="e">
            The event parameters.
            </param>
        </member>
        <member name="M:Trx.Messaging.BasicMessageFormatter.OnFieldsFormattersCleared(System.Object,System.EventArgs)">
            <summary>
            It handles the event fired by the field formatters collection when
            all the elements are removed.
            </summary>
            <param name="sender">
            The object sending the event.
            </param>
            <param name="e">
            The event parameters.
            </param>
        </member>
        <member name="M:Trx.Messaging.BasicMessageFormatter.OnFieldsFormatterRemoved(System.Object,Trx.Messaging.FieldFormatterEventArgs)">
            <summary>
            It handles the event fired when a field formatter is removed from
            the collection of field formatters.
            </summary>
            <param name="sender">
            The object sending the event.
            </param>
            <param name="e">
            The event parameters.
            </param>
        </member>
        <member name="M:Trx.Messaging.BasicMessageFormatter.GetBitMapFieldNumbers">
            <summary>
            It returns an array of integers containing the numbers of the bimatps formatters
            known by the message formatter instance. 
            </summary>
            <returns>
            An array of integers containing the numbers of the bitmaps formatters
            known by the message formatter instance. The numbers are orderer in
            descendent mode.
            If no bitmap formatters are found, a null value is returned.
            </returns>
        </member>
        <member name="M:Trx.Messaging.BasicMessageFormatter.FieldCanBeLogged(System.Int32)">
            <summary>
            Indica si el número de campo indicado puede ser enviado a la
            bitácora.
            </summary>
            <param name="fieldNumber">
            Es el número del campo del que se desea saber si puede ser
            registrado en la bitácora.
            </param>
            <returns>
            Un valor lógico igual a verdadero en caso de que puedas ser
            enviado a la bitácora, en caso contrario un valor lógico igual
            a falso.
            </returns>
        </member>
        <member name="M:Trx.Messaging.BasicMessageFormatter.ObfuscateFieldData(Trx.Messaging.Field)">
            <summary>
            It returns the obfuscated field value.
            </summary>
            <param name="field">
            The field to be logged.
            </param>
            <returns>
            The data to be logged representing the obfuscated field value.
            </returns>
        </member>
        <member name="M:Trx.Messaging.BasicMessageFormatter.BeforeFieldsFormatting(Trx.Messaging.Message,Trx.Messaging.FormatterContext@)">
            <summary>
            Invocado por <see cref="M:Trx.Messaging.BasicMessageFormatter.Format(Trx.Messaging.Message,Trx.Messaging.FormatterContext@)"/> para permitir a las clases que
            extienden <see cref="T:Trx.Messaging.BasicMessageFormatter"/>, operar entre el
            formateo del cabezal del mensaje que está siendo formateado, y
            sus campos.
            </summary>
            <param name="message">
            Es el mensaje que se está formateando.
            </param>
            <param name="formatterContext">
            Es el contexto de formateo que debe está siendo empleado.
            </param>
            <remarks>
            Sobreescriba este método si necesita por ejemplo, agregar
            información en el contexto de formateo entre la información
            del cabezal y los campos.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.BasicMessageFormatter.Format(Trx.Messaging.Message,Trx.Messaging.FormatterContext@)">
            <summary>
            It formats a message.
            </summary>
            <param name="message">
            It's the message to be formatted.
            </param>
            <param name="formatterContext">
            It's the formatter context to be used in the format.
            </param>
        </member>
        <member name="M:Trx.Messaging.BasicMessageFormatter.BeforeFieldsParsing(Trx.Messaging.Message,Trx.Messaging.ParserContext@)">
            <summary>
            Invocado por <see cref="M:Trx.Messaging.BasicMessageFormatter.Parse(Trx.Messaging.ParserContext@)"/> para permitir a las clases que
            extienden <see cref="T:Trx.Messaging.BasicMessageFormatter"/>, operar entre el
            análisis del cabezal del mensaje que está siendo analizado, y
            sus campos.
            </summary>
            <param name="message">
            Es el mensaje que se está analizando.
            </param>
            <param name="parserContext">
            Es el contexto de analisis y construcción de mensajes.
            </param>
            <returns>
            Si retorna un valor lógico igual a verdadero, <see cref="M:Trx.Messaging.BasicMessageFormatter.Parse(Trx.Messaging.ParserContext@)"/>
            asume que se pudo efectuar satisfactoriamente el trabajo, si
            retorna un valor lógico igual a false <see cref="M:Trx.Messaging.BasicMessageFormatter.Parse(Trx.Messaging.ParserContext@)"/>
            entiende que el análisis ha fallado.
            </returns>
            <remarks>
            Sobreescriba este método si necesita por ejemplo, extraer
            información del contexto de analisis y construcción de mensajes,
            que se encuentre entre la información del cabezal y la de los
            campos.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.BasicMessageFormatter.Parse(Trx.Messaging.ParserContext@)">
            <summary>
            It parses the data contained in the parser context.
            </summary>
            <param name="parserContext">
            It's the context holding the information to produce a new message instance.
            </param>
            <returns>
            The parsed message, or a null reference if the data contained in the context
            is insufficient to produce a new message.
            </returns>
        </member>
        <member name="M:Trx.Messaging.BasicMessageFormatter.NewMessage">
            <summary>
            Crea un nuevo mensaje del tipo conocido por el formateador de
            mensajes.
            </summary>
            <returns>
            Un nuevo mensaje.
            </returns>
        </member>
        <member name="M:Trx.Messaging.BasicMessageFormatter.CopyTo(Trx.Messaging.BasicMessageFormatter)">
            <summary>
            Copia el formateador sobre el que se invoca este método
            en otro dado.
            </summary>
            <param name="messageFormatter">
            Es el formateador al que se copia la información del
            formateador sobre el que se invoca este método.
            </param>
            <remarks>
            El formateador del cabezal de los mensajes y los formateadores
            de campo no son copiados, al formateador de mensajes dado
            se le asignan solo referencias, es decir, el formateador que se
            copia en el formateador dado comparten estos objetos.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.BasicMessageFormatter.Clone">
            <summary>
            Construye una copia del formateador de mensajes.
            </summary>
            <remarks>
            El formateador del cabezal de los mensajes y los formateadores
            de campo no son copiados, al nuevo formateador de mensajes
            se le asignan solo referencias, es decir, el formateador que se
            clona y el formateador clonado comparten estos objetos.
            </remarks>
            <returns>
            Una copia exacta del formateador de mensajes.
            </returns>
        </member>
        <member name="M:Trx.Messaging.BasicMessageFormatter.GetFieldAttribute(System.Reflection.PropertyInfo)">
            <summary>
            Retorna una instancia del atributo <see cref="T:Trx.Messaging.FieldAttribute"/>
            aplicado al objeto que el método recibe como parámetro.
            </summary>
            <param name="propertyInfo">
            Es el objeto del cual se extrae el atributo.
            </param>
            <returns>
            Una instancia válida del atributo <see cref="T:Trx.Messaging.FieldAttribute"/>,
            o <see langref="null"/> en caso de que el objeto pasado como
            parámetro no tenga el atributo mencionado.
            </returns>
        </member>
        <member name="M:Trx.Messaging.BasicMessageFormatter.AssignFields(Trx.Messaging.Message,System.Object)">
            <summary>
            Asigna los campos del mensaje en base a las propiedades del
            objeto dado.
            </summary>
            <param name="message">
            Es el mensaje al que se asignan sus campos.
            </param>
            <param name="fieldsContainer">
            Es el objeto del que se obtienen los valores para los campos.
            </param>
            <remarks>
            Este método recorre todas las propiedades visibles de
            fieldsContainer, buscando aquellas a las que se le aplico el
            atributo <see cref="T:Trx.Messaging.FieldAttribute"/>. El valor de las
            propiedades que encuentra, es asignado al valor del campo
            cuyo número corresponde con el indicado en el atributo
            mencionado.
            El valor es formateado empleando el formateador de valor
            indicado en el formateador de campo que corresponde al número
            del campo. Si el formateador de campo no tiene un formateador
            de valor, se emplea el método ToString sobre el valor de la
            propiedad.
            Para invocar este método, es necesario que el mensaje conozca
            su fomateador, pues de éste se obtienen los formateadores de los
            valores de los campos.
            </remarks>
            <exception cref="T:System.NullReferenceException">
            El parámetro indicado es nulo.
            </exception>
        </member>
        <member name="M:Trx.Messaging.BasicMessageFormatter.ApplyDefaultConvertion(System.Object,System.Reflection.PropertyInfo,Trx.Messaging.FieldAttribute,System.Object)">
            <summary>
            Trata de convertir el valor del campo a el tipo de la propiedad
            indicada.
            </summary>
            <param name="fieldsContainer">
            Es el objeto que expone la propiedad en la que se desea almacenar
            el valor convertido del campo.
            </param>
            <param name="propertyInfo">
            Es la propiedad a emplear.
            </param>
            <param name="fieldAttribute">
            Es el atributo asociado a la propiedad.
            </param>
            <param name="valueToConvert">
            Es el valor a convertir.
            </param>
            <exception cref="T:Trx.Messaging.MessagingException">
            No se ha podido convertir el valor del campo, para asignarlo
            a la propiedad indicada.
            </exception>
        </member>
        <member name="M:Trx.Messaging.BasicMessageFormatter.RetrieveFields(Trx.Messaging.Message,System.Object)">
            <summary>
            Asigna a las propiedades del objeto dado, valores tomados de los
            valores de los campos del mensaje.
            </summary>
            <param name="message">
            Es el mensaje al que se asignan sus campos.
            </param>
            <param name="fieldsContainer">
            Es el objeto al que se asignan sus propiedades con los valores
            de los campos del mensaje.
            </param>
            <remarks>
            Este método recorre todas las propiedades visibles de
            fieldsContainer, buscando aquellas a las que se le aplico el
            atributo <see cref="T:Trx.Messaging.FieldAttribute"/>. El valor de las
            propiedades que encuentra, es asignado con el valor del campo
            cuyo número corresponde con el indicado en el atributo
            mencionado.
            El valor es convertido empleando el formateador de valor
            indicado en el formateador de campo que corresponde al número
            del campo.
            Para invocar este método, es necesario que el mensaje conozca
            su fomateador, pues de éste se obtienen los formateadores de los
            valores de los campos.
            </remarks>
            <exception cref="T:System.NullReferenceException">
            El mensaje no tiene asignado un formateador de mensajes.
            </exception>
            <exception cref="T:Trx.Messaging.MessagingException">
            No se ha podido convertir el valor del campo, para asignarlo
            a la propiedad indicada.
            </exception>
        </member>
        <member name="P:Trx.Messaging.BasicMessageFormatter.FieldFormatters">
            <summary>
            It returns the collection of field formatters known by this instance of messages formatter.
            </summary>
        </member>
        <member name="P:Trx.Messaging.BasicMessageFormatter.Description">
            <summary>
            It returns or assigns the description of the messages formatter.
            </summary>
        </member>
        <member name="P:Trx.Messaging.BasicMessageFormatter.Logger">
            <summary>
            It returns or assigns the logger employed by the instance.
            </summary>
        </member>
        <member name="P:Trx.Messaging.BasicMessageFormatter.LoggerName">
            <summary>
            It returns or assigns the name of the logger that is utilized.
            </summary>
        </member>
        <member name="P:Trx.Messaging.BasicMessageFormatter.Item(System.Int32)">
            <summary>
            Returns the field formatter for the specified field number.  
            </summary>
            <remarks>
            If the field formatter does not exist, a null value is returned.
            </remarks>
        </member>
        <member name="P:Trx.Messaging.BasicMessageFormatter.MessageHeaderFormatter">
            <summary>
            It returns or assigns the message header formatter. 
            </summary>
        </member>
        <member name="P:Trx.Messaging.BasicMessageFormatter.Name">
            <summary>
            It returns or assigns the name of messages formatter instance. 
            </summary>
        </member>
        <member name="P:Trx.Messaging.BasicMessageFormatter.PacketHeader">
            <summary>
            Get or set packet header.
            </summary>
        </member>
        <member name="P:Trx.Messaging.BasicMessageFormatter.HexadecimalPacketHeader">
            <summary>
            Set packet header, but can be specified in hex (i.e. 840 = 383430).
            </summary>
        </member>
        <member name="F:Trx.Messaging.Iso8583.Iso8583MessageFormatter._restrictedLogFields">
            <summary>
            We can't log values for these fields.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583MessageFormatter.#ctor">
            <summary>
            It initializes a new ISO 8583 formatter.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583MessageFormatter.NewMessage">
            <summary>
            It builds a new ISO 8583 message.
            </summary>
            <returns>
            A new ISO 8583 message.
            </returns>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583MessageFormatter.FieldCanBeLogged(System.Int32)">
            <summary>
            It indicates if the specified field number can be logged.
            </summary>
            <param name="fieldNumber">
            The field number to known if can logged.
            </param>
            <returns>
            true if the field can be logged, otherwise false.
            </returns>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583MessageFormatter.ObfuscateCardData(System.String)">
            <summary>
            It obfuscates card data (ISO 8583 fields 2, 14, 35 and 45)
            </summary>
            <param name="data">
            The card data.
            </param>
            <returns>
            The obfuscated data.
            </returns>
            <remarks>
            ObfuscateCardData( 4000000000000002 ) = ************0002
            ObfuscateCardData( 0805 ) = ****
            ObfuscateCardData( 4000000000000002=0805123456 ) = ************0002=**********
            ObfuscateCardData( B4000000000000002^JOHN DOE^0805123456 ) = B************0002^JOHN DOE^**********
            </remarks>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583MessageFormatter.ObfuscateFieldData(Trx.Messaging.Field)">
            <summary>
            It returns the obfuscated field value.
            </summary>
            <param name="field">
            The field to be logged.
            </param>
            <returns>
            The data to be logged representing the obfuscated field value.
            </returns>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583MessageFormatter.BeforeFieldsFormatting(Trx.Messaging.Message,Trx.Messaging.FormatterContext@)">
            <summary>
            It formats the MTI.
            </summary>
            <param name="message">
            The message to be formatted.
            </param>
            <param name="formatterContext">
            The formatter context.
            </param>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583MessageFormatter.Format(Trx.Messaging.Message,Trx.Messaging.FormatterContext@)">
            <summary>
            It formats a ISO 8583 message.
            </summary>
            <param name="message">
            It's the message to be formatted.
            </param>
            <param name="formatterContext">
            It's the formatter context to be used in the format.
            </param>
            <exception cref="T:Trx.Messaging.MessagingException">
            If the MTI formatter it's unknown.
            </exception>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583MessageFormatter.BeforeFieldsParsing(Trx.Messaging.Message,Trx.Messaging.ParserContext@)">
            <summary>
            It parses the MTI.
            </summary>
            <param name="message">
            The message to be parsed.
            </param>
            <param name="parserContext">
            It's the parser context.
            </param>
            <returns>
            true if the MTI was parsed, otherwise false.
            </returns>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583MessageFormatter.Parse(Trx.Messaging.ParserContext@)">
            <summary>
            Parses the data in the parser context and builds a new ISO 8583 message.
            </summary>
            <param name="parserContext">
            It's the parser context.
            </param>
            <returns>
            A new ISO 8583 message if the data was parsed correctly, otherwise null.
            </returns>
            <exception cref="T:Trx.Messaging.MessagingException">
            If the MTI formatter it's unknown.
            </exception>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583MessageFormatter.CopyTo(Trx.Messaging.BasicMessageFormatter)">
            <summary>
            It copies the message formatter instance data into the provided message formatter.
            </summary>
            <param name="messageFormatter">
            It's the message formatter where the message formatter instance data is copied.
            </param>
            <remarks>
            The header, the mti formatter and the fields formatters, aren't cloned,
            the new instance and the original shares those object instances.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583MessageFormatter.Clone">
            <summary>
            It clones the formatter instance.
            </summary>
            <remarks>
            The header, the mti formatter and the fields formatters, aren't cloned,
            the new instance and the original shares those object instances.
            </remarks>
            <returns>
            A new instance of the formatter.
            </returns>
        </member>
        <member name="P:Trx.Messaging.Iso8583.Iso8583MessageFormatter.MessageTypeIdentifierFormatter">
            <summary>
            It returns or sets the message type identifier formatter.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583Ascii1987BinaryBitmapMessageFormatter.#ctor">
            <summary>
            It initializes a new ISO 8583 formatter.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583Ascii1987BinaryBitmapMessageFormatter.SetupFields">
            <summary>
            It initializes the fields formatters for this message formatter.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583Ascii1987BinaryBitmapMessageFormatter.Clone">
            <summary>
            It clones the formatter instance.
            </summary>
            <remarks>
            The header, the mti formatter and the fields formatters, aren't cloned,
            the new instance and the original shares those object instances.
            </remarks>
            <returns>
            A new instance of the formatter.
            </returns>
        </member>
        <member name="T:Trx.Messaging.InnerMessageFieldFormatter">
            <summary>
            Implements a inner messages fields formatter.
            </summary>
        </member>
        <member name="T:Trx.Messaging.FieldFormatter">
            <summary>
            This class implements a field formatter.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FieldFormatter.#ctor(System.Int32)">
            <summary>
            It builds a new field formatter.
            </summary>
            <param name="fieldNumber">
            It's the number of the field this formatter formats/parse.
            </param>
        </member>
        <member name="M:Trx.Messaging.FieldFormatter.#ctor(System.Int32,System.String)">
            <summary>
            It builds a new field formatter.
            </summary>
            <param name="fieldNumber">
            It's the number of the field this formatter formats/parse.
            </param>
            <param name="description">
            It's the description of the field formatter.
            </param>
        </member>
        <member name="M:Trx.Messaging.FieldFormatter.Format(Trx.Messaging.Field,Trx.Messaging.FormatterContext@)">
            <summary>
            Formats the specified field.
            </summary>
            <param name="field">
            It's the field to format.
            </param>
            <param name="formatterContext">
            It's the context of formatting to be used by the method.
            </param>
        </member>
        <member name="M:Trx.Messaging.FieldFormatter.Parse(Trx.Messaging.ParserContext@)">
            <summary>
            It parses the information in the parser context and builds the field.
            </summary>
            <param name="parserContext">
            It's the parser context.
            </param>
            <returns>
            The new field built with the information found in the parser context.
            </returns>
        </member>
        <member name="P:Trx.Messaging.FieldFormatter.FieldNumber">
            <summary>
            It returns the number of the field this formatter formats/parse.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FieldFormatter.Description">
            <summary>
            It returns the description of the field formatter.
            </summary>
        </member>
        <member name="M:Trx.Messaging.InnerMessageFieldFormatter.#ctor(System.Int32,Trx.Messaging.LengthManager,Trx.Messaging.IBinaryEncoder,Trx.Messaging.IMessageFormatter)">
            <summary>
            It initializes a new binary field formatter instance.
            </summary>
            <param name="fieldNumber">
            It's the number of the field this formatter formats/parse.
            </param>
            <param name="lengthManager">
            It's the field length manager.
            </param>
            <param name="encoder">
            It's the field value encoder.
            </param>
            <param name="messageFormatter">
            It's the message formatter which produces messages for the values
            of the <see cref="T:Trx.Messaging.InnerMessageField"/> fields.
            </param>
        </member>
        <member name="M:Trx.Messaging.InnerMessageFieldFormatter.#ctor(System.Int32,Trx.Messaging.LengthManager,Trx.Messaging.IBinaryEncoder,Trx.Messaging.IMessageFormatter,System.String)">
            <summary>
            It initializes a new binary field formatter instance.
            </summary>
            <param name="fieldNumber">
            It's the number of the field this formatter formats/parse.
            </param>
            <param name="lengthManager">
            It's the field length manager.
            </param>
            <param name="encoder">
            It's the field value encoder.
            </param>
            <param name="messageFormatter">
            It's the message formatter which produces messages for the values
            of the <see cref="T:Trx.Messaging.InnerMessageField"/> fields.
            </param>
            <param name="description">
            It's the description of the field formatter.
            </param>
        </member>
        <member name="M:Trx.Messaging.InnerMessageFieldFormatter.Format(Trx.Messaging.Field,Trx.Messaging.FormatterContext@)">
            <summary>
            Formats the specified field.
            </summary>
            <param name="field">
            It's the field to format.
            </param>
            <param name="formatterContext">
            It's the context of formatting to be used by the method.
            </param>
        </member>
        <member name="M:Trx.Messaging.InnerMessageFieldFormatter.Parse(Trx.Messaging.ParserContext@)">
            <summary>
            It parses the information in the parser context and builds the field.
            </summary>
            <param name="parserContext">
            It's the parser context.
            </param>
            <returns>
            The new field built with the information found in the parser context.
            </returns>
        </member>
        <member name="P:Trx.Messaging.InnerMessageFieldFormatter.LengthManager">
            <summary>
            It returns the field length manager.
            </summary>
        </member>
        <member name="P:Trx.Messaging.InnerMessageFieldFormatter.Encoder">
            <summary>
            It returns the field value encoder.
            </summary>
        </member>
        <member name="P:Trx.Messaging.InnerMessageFieldFormatter.MessageFormatter">
            <summary>
            It returns the the message formatter.
            </summary>
        </member>
        <member name="T:Trx.Messaging.FlowControl.BasicChannelPool">
            <summary>
            This class implements a basic pool of channels.
            </summary>
        </member>
        <member name="T:Trx.Messaging.FlowControl.IChannelPool">
            <summary>
            This interface defines which a class must implement to turn
            into a pool of channels.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.IChannelPool.Add(Trx.Messaging.Channels.IChannel)">
            <summary>
            Adds a channel to the pool.
            </summary>
            <param name="channel">
            It's the channel to be added to the pool.
            </param>
            <returns>
            A logical value equals to true if the channel was added to the pool,
            otherwise false.
            </returns>
        </member>
        <member name="M:Trx.Messaging.FlowControl.IChannelPool.Remove">
            <summary>
            Removes a channel from the pool.
            </summary>
            <returns>
            The removed channel, or an invalid reference if the pool was empty.
            </returns>
        </member>
        <member name="P:Trx.Messaging.FlowControl.IChannelPool.Length">
            <summary>
            It returns the length of the pool.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.IChannelPool.Name">
            <summary>
            It returns the name of the pool.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.BasicChannelPool.#ctor(System.String,System.Int32,Trx.Messaging.IMessageFormatter,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the class <see cref="T:Trx.Messaging.FlowControl.BasicChannelPool"/>,
            adding as many channels of the type as it's indicated.
            </summary>
            <param name="channelTypeName">
            It's the channel type name used to create the channels to fill up the
            pool.
            </param>
            <param name="capacity">
            It's the maximum quantity of channels that the pool of channels can store.
            </param>
            <param name="formatter">
            It's the messages formatter to be associated with the channels stored in
            the pool of channels.
            </param>
            <param name="loggerName">
            It's the logger name to associate to the channel.
            </param>
            <param name="channelName">
            It's the channel name.
            </param>
            <param name="name">
            It's the pool name.
            </param>
            <remarks>
            When a channel created by the pool is disconnected from its peer,
            it's automatically returned to the pool.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.FlowControl.BasicChannelPool.#ctor(System.String,System.Int32,Trx.Messaging.IMessageFormatter,System.String,System.String)">
            <summary>
            Initializes a new instance of the class <see cref="T:Trx.Messaging.FlowControl.BasicChannelPool"/>,
            adding as many channels of the type as it's indicated.
            </summary>
            <param name="channelTypeName">
            It's the channel type name used to create the channels to fill up the
            pool.
            </param>
            <param name="capacity">
            It's the maximum quantity of channels that the pool of channels can store.
            </param>
            <param name="formatter">
            It's the messages formatter to be associated with the channels stored in
            the pool of channels.
            </param>
            <param name="loggerName">
            It's the logger name to associate to the channel.
            </param>
            <param name="channelName">
            It's the channel name.
            </param>
            <remarks>
            When a channel created by the pool is disconnected from its peer,
            it's automatically returned to the pool.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.FlowControl.BasicChannelPool.#ctor(System.String,System.Int32,Trx.Messaging.IMessageFormatter,System.String)">
            <summary>
            Initializes a new instance of the class <see cref="T:Trx.Messaging.FlowControl.BasicChannelPool"/>,
            adding as many channels of the type as it's indicated.
            </summary>
            <param name="channelTypeName">
            It's the channel type name used to create the channels to fill up the
            pool.
            </param>
            <param name="capacity">
            It's the maximum quantity of channels that the pool of channels can store.
            </param>
            <param name="formatter">
            It's the messages formatter to be associated with the channels stored in
            the pool of channels.
            </param>
            <param name="name">
            It's the pool name.
            </param>
            <remarks>
            When a channel created by the pool is disconnected from its peer,
            it's automatically returned to the pool.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.FlowControl.BasicChannelPool.#ctor(System.String,System.Int32,Trx.Messaging.IMessageFormatter)">
            <summary>
            Initializes a new instance of the class <see cref="T:Trx.Messaging.FlowControl.BasicChannelPool"/>,
            adding as many channels of the type as it's indicated.
            </summary>
            <param name="channelTypeName">
            It's the channel type name used to create the channels to fill up the
            pool.
            </param>
            <param name="capacity">
            It's the maximum quantity of channels that the pool of channels can store.
            </param>
            <param name="formatter">
            It's the messages formatter to be associated with the channels stored in
            the pool of channels.
            </param>
            <remarks>
            When a channel created by the pool is disconnected from its peer,
            it's automatically returned to the pool.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.FlowControl.BasicChannelPool.#ctor(Trx.Messaging.Channels.IChannel,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the class <see cref="T:Trx.Messaging.FlowControl.BasicChannelPool"/>,
            adding as many clone channels as it's indicated.
            </summary>
            <param name="channel">
            It's the channel to clone and fill up the pool.
            The one received as parameter it's added to the pool too.
            </param>
            <param name="capacity">
            It's the maximum quantity of channels that the pool of channels can store.
            </param>
            <param name="name">
            It's the pool name.
            </param>
            <remarks>
            When a channel created by the pool is disconnected from its peer,
            it's automatically returned to the pool.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.FlowControl.BasicChannelPool.#ctor(Trx.Messaging.Channels.IChannel,System.Int32)">
            <summary>
            Initializes a new instance of the class <see cref="T:Trx.Messaging.FlowControl.BasicChannelPool"/>,
            adding as many clone channels as it's indicated.
            </summary>
            <param name="channel">
            It's the channel to clone and fill up the pool.
            The one received as parameter it's added to the pool too.
            </param>
            <param name="capacity">
            It's the maximum quantity of channels that the pool of channels can store.
            </param>
            <remarks>
            When a channel created by the pool is disconnected from its peer,
            it's automatically returned to the pool.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.FlowControl.BasicChannelPool.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class <see cref="T:Trx.Messaging.FlowControl.BasicChannelPool"/>
            without channels.
            </summary>
            <param name="name">
            It's the pool name.
            </param>
            <remarks>
            In order to make this pool of channels useful, it must be necessary
            to add channels using the <see cref="M:Trx.Messaging.FlowControl.BasicChannelPool.Add(Trx.Messaging.Channels.IChannel)"/> function.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.FlowControl.BasicChannelPool.#ctor">
            <summary>
            Initializes a new instance of the class <see cref="T:Trx.Messaging.FlowControl.BasicChannelPool"/>
            without channels.
            </summary>
            <remarks>
            In order to make this pool of channels useful, it must be necessary
            to add channels using the <see cref="M:Trx.Messaging.FlowControl.BasicChannelPool.Add(Trx.Messaging.Channels.IChannel)"/> function.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.FlowControl.BasicChannelPool.Add(Trx.Messaging.Channels.IChannel)">
            <summary>
            It adds a channel to the pool.
            </summary>
            <param name="channel">
            It's the channel to be added to the pool.
            </param>
            <returns>
            A logical value equals to true if the channel was added to the
            pool, otherwise false.
            </returns>
            <remarks>
            A channel added with this function, it's not automatically returned 
            to the pool when it's disconnected from its peer.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.FlowControl.BasicChannelPool.OnChannelDisconnected(System.Object,System.EventArgs)">
            <summary>
            Handles the <see cref="E:Trx.Messaging.Channels.IChannel.Disconnected"/> event.
            </summary>
            <param name="sender">
            It's the channel sending the event.
            </param>
            <param name="e">
            The parameters for the event.
            </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.BasicChannelPool.Remove">
            <summary>
            It removes a channel from the pool.
            </summary>
            <returns>
            The channel which was in the pool, or a null reference whether
            there weren't channels in the pool.
            </returns>
        </member>
        <member name="P:Trx.Messaging.FlowControl.BasicChannelPool.Capacity">
            <summary>
            It returns the pool capacity.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.BasicChannelPool.Name">
            <summary>
            It returns the pool name.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.BasicChannelPool.Logger">
            <summary>
            It returns the logger used by the class.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.BasicChannelPool.LoggerName">
            <summary>
            It returns the logger name used by the class.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.BasicChannelPool.Length">
            <summary>
            It returns the length of the pool.
            </summary>
        </member>
        <member name="T:Trx.Messaging.ConditionalFormatting.StringConstantExpression">
            <summary>
            It represents a string constant.
            </summary>
        </member>
        <member name="T:Trx.Messaging.ConditionalFormatting.IValueExpression">
            <summary>
            It defines a value expression.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.StringConstantExpression.#ctor">
            <summary>
            It initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.StringConstantExpression.#ctor(System.String)">
            <summary>
            It initializes a new instance of the class.
            </summary>
            <param name="constant">
            It's the constant to store.
            </param>
        </member>
        <member name="P:Trx.Messaging.ConditionalFormatting.StringConstantExpression.Constant">
            <summary>
            It returns or sets the string constant.
            </summary>
        </member>
        <member name="T:Trx.Messaging.Channels.MessageFilterDecision">
            <summary>
            The return result from <see cref="M:Trx.Messaging.Channels.IMessageFilter.Decide(Trx.Messaging.Channels.IChannel,Trx.Messaging.Message)"/>
            </summary>
            <remarks>
            The return result from <see cref="M:Trx.Messaging.Channels.IMessageFilter.Decide(Trx.Messaging.Channels.IChannel,Trx.Messaging.Message)"/>
            </remarks>
        </member>
        <member name="F:Trx.Messaging.Channels.MessageFilterDecision.Deny">
            <summary>
            The message must be dropped immediately without 
            consulting with the remaining filters, if any, in the chain.
            </summary>
        </member>
        <member name="F:Trx.Messaging.Channels.MessageFilterDecision.Neutral">
            <summary>
            This filter is neutral with respect to the message. 
            The remaining filters, if any, should be consulted for a final decision.
            </summary>
        </member>
        <member name="F:Trx.Messaging.Channels.MessageFilterDecision.Accept">
            <summary>
            The message must processed immediately without 
            consulting with the remaining filters, if any, in the chain.
            </summary>
        </member>
        <member name="T:Trx.Messaging.BasicMessagesIdentifier">
            <summary>
            Implementa un identificador de mensaje básico que para
            realizar su función concatena los campos indicados en el
            momento de instanciación.
            </summary>
        </member>
        <member name="M:Trx.Messaging.BasicMessagesIdentifier.#ctor(System.Int32[])">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:Trx.Messaging.BasicMessagesIdentifier"/>.
            </summary>
            <param name="fields">
            Son los campos a concatenar para obtener el identificador
            del mensaje.
            </param>
        </member>
        <member name="M:Trx.Messaging.BasicMessagesIdentifier.#ctor(System.Int32,System.Int32)">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:Trx.Messaging.BasicMessagesIdentifier"/>.
            </summary>
            <param name="firstFieldNumber">
            Es el primer campo a concatenar para obtener el identificador
            del mensaje.
            </param>
            <param name="secondFieldNumber">
            Es el segundo campo a concatenar para obtener el identificador
            del mensaje.
            </param>
        </member>
        <member name="M:Trx.Messaging.BasicMessagesIdentifier.#ctor(System.Int32)">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:Trx.Messaging.BasicMessagesIdentifier"/>.
            </summary>
            <param name="fieldNumber">
            Es el campo que contiene el identificador del mensaje.
            </param>
        </member>
        <member name="M:Trx.Messaging.BasicMessagesIdentifier.ComputeIdentifier(Trx.Messaging.Message)">
            <summary>
            Calcula el identificador del mensaje dado.
            </summary>
            <param name="message">
            Es el mensaje del que se quiere saber su identificador.
            </param>
            <returns>
            El identificador del mensaje.
            </returns>
        </member>
        <member name="T:Trx.Messaging.FlowControl.ServerPeerCollection">
            <summary>
            Implementa una colección de elementos de tipo <see cref="T:Trx.Messaging.FlowControl.ServerPeer"/>.
            </summary>
            <remarks>
            El nombre del punto de conexión es empleado como clave dentro de
            la colección.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ServerPeerCollection.#ctor">
            <summary>
            Crea una nueva instancia de la colección de puntos de conexión.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ServerPeerCollection.Add(Trx.Messaging.FlowControl.ServerPeer)">
            <summary>
            Agrega un punto de conexión a la colección.
            </summary>
            <param name="peer">
            Es el punto de conexión a agregar a la colección.
            </param>
            <remarks>
            Si existe es reemplazado.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ServerPeerCollection.Remove(System.String)">
            <summary>
            Elimina el punto de conexión cuyo nombre coincida con el
            especificado.
            </summary>
            <param name="name">
            Es el nombre del punto de conexión que se desea eliminar
            de la colección.
            </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ServerPeerCollection.Clear">
            <summary>
            Elimina todos los puntos de conexión de la colección.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ServerPeerCollection.Contains(System.String)">
            <summary>
            Indica si la colección contiene un punto de conexión con el nombre
            indicado.
            </summary>
            <param name="name">
            Es el nombre del punto de conexión que se desea conocer si existe en
            la colección.
            </param>
            <returns>
            <see langref="true"/> si el punto de conexión está contenido en la
            colección, <see langref="false"/> en caso contrario.
            </returns>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ServerPeerCollection.GetEnumerator">
            <summary>
            Devuelve un enumerador de la colección.
            </summary>
            <returns>
            El enumerador sobre la colección.
            </returns>
        </member>
        <member name="P:Trx.Messaging.FlowControl.ServerPeerCollection.Item(System.String)">
             <summary>
             Retorna o asigna un punto de conexión de la colección de puntos
             de conexión.
             </summary>
             <remarks>
             Si el punto de conexión no existe en la colección, un valor nulo
             es retornado.
            
             Si existe se está agregando y ya existe es reemplazado.
             </remarks>
        </member>
        <member name="P:Trx.Messaging.FlowControl.ServerPeerCollection.Count">
            <summary>
            Retorna la cantidad de puntos de conexión incluidos en la colección.
            </summary>
        </member>
        <member name="T:Trx.Messaging.FlowControl.ServerPeerCollection.PeersEnumerator">
            <summary>
            Implementa el enumerador de la colección.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ServerPeerCollection.PeersEnumerator.#ctor(System.Collections.Hashtable)">
            <summary>
            Crea una nueva instancia de la clase <see cref="T:Trx.Messaging.FlowControl.ServerPeerCollection.PeersEnumerator"/>.
            </summary>
            <param name="peers">
            Es la tabla de hash que contiene los campos.
            </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ServerPeerCollection.PeersEnumerator.Reset">
            <summary>
            Reinicia la enumeración.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ServerPeerCollection.PeersEnumerator.MoveNext">
            <summary>
            Se mueve al siguiente elemento en la enumeración.
            </summary>
            <returns>
            Un valor verdadero si logró posicionarse en el siguiente elemento de
            la enumeración, un valor igual a falso cuando no existen mas elementos
            a enumerar.
            </returns>
        </member>
        <member name="P:Trx.Messaging.FlowControl.ServerPeerCollection.PeersEnumerator.Current">
            <summary>
            Retorna el elemento actual de la enumeración.
            </summary>
        </member>
        <member name="T:Trx.Messaging.ConditionalFormatting.MtiEqualsExpression">
            <summary>
            This class implements equality comparison between a
            given MTI and the message MTI of the formatting/parsing operation.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.MtiEqualsExpression.#ctor">
            <summary>
            It initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.MtiEqualsExpression.#ctor(System.Int32,Trx.Messaging.ConditionalFormatting.IMessageExpression)">
            <summary>
            It initializes a new instance of the class.
            </summary>
            <param name="mti">
            MTI to compare with the message MTI.
            </param>
            <param name="messageExpression">
            The expression which supply the message to compare the MTI.
            </param>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.MtiEqualsExpression.GetMessage(Trx.Messaging.Message)">
            <summary>
            It returns the field value as string.
            </summary>
            <returns>
            The field value.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.MtiEqualsExpression.EvaluateParse(Trx.Messaging.ParserContext@)">
            <summary>
            Evaluates the expression when parsing a message.
            </summary>
            <param name="parserContext">
            It's the parser context.
            </param>
            <returns>
            A boolean value.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.MtiEqualsExpression.EvaluateFormat(Trx.Messaging.Field,Trx.Messaging.FormatterContext@)">
            <summary>
            Evaluates the expression when formatting a message.
            </summary>
            <param name="field">
            It's the field to format.
            </param>
            <param name="formatterContext">
            It's the context of formatting to be used by the method.
            </param>
            <returns>
            A boolean value.
            </returns>
        </member>
        <member name="P:Trx.Messaging.ConditionalFormatting.MtiEqualsExpression.Mti">
            <summary>
            It returns or sets the MTI to compare with the message MTI.
            </summary>
        </member>
        <member name="P:Trx.Messaging.ConditionalFormatting.MtiEqualsExpression.MessageExpression">
            <summary>
            It returns or sets the message expression.
            </summary>
        </member>
        <member name="T:Trx.Messaging.ConditionalFormatting.MidEqualsBinaryOperator">
            <summary>
            This class implements the equals operator of two expressions, the first it's a
            set of bytes of a field value, the second it's a binary constant.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.MidEqualsBinaryOperator.#ctor">
            <summary>
            It initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.MidEqualsBinaryOperator.#ctor(Trx.Messaging.ConditionalFormatting.IMessageExpression,Trx.Messaging.ConditionalFormatting.BinaryConstantExpression,System.Int32,System.Int32)">
            <summary>
            It initializes a new instance of the class.
            </summary>
            <param name="messageExpression">
            The message expression, source of the field value of the equality
            operator (left part of the operator).
            </param>
            <param name="valueExpression">
            The value expression of the equality operator (right part of the operator).
            </param>
            <param name="startIndex">
            The index of the start of the set of bytes.
            </param>
            <param name="length">
            The length of the set of bytes.
            </param>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.MidEqualsBinaryOperator.GetSet(System.Byte[])">
            <summary>
            It builds the set of bytes from the field value.
            </summary>
            <param name="fieldValue">
            The field value.
            </param>
            <returns>
            A byte array which is the set of bytes from the field value..
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.MidEqualsBinaryOperator.EvaluateParse(Trx.Messaging.ParserContext@)">
            <summary>
            Evaluates the expression when parsing a message.
            </summary>
            <param name="parserContext">
            It's the parser context.
            </param>
            <returns>
            A boolean value.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.MidEqualsBinaryOperator.EvaluateFormat(Trx.Messaging.Field,Trx.Messaging.FormatterContext@)">
            <summary>
            Evaluates the expression when formatting a message.
            </summary>
            <param name="field">
            It's the field to format.
            </param>
            <param name="formatterContext">
            It's the context of formatting to be used by the method.
            </param>
            <returns>
            A boolean value.
            </returns>
        </member>
        <member name="P:Trx.Messaging.ConditionalFormatting.MidEqualsBinaryOperator.ValueExpression">
            <summary>
            It returns or sets the value expression of the equality operator (right
            part of the operator).
            </summary>
        </member>
        <member name="P:Trx.Messaging.ConditionalFormatting.MidEqualsBinaryOperator.StartIndex">
            <summary>
            It returns or sets the index of the start of the set of bytes.
            </summary>
        </member>
        <member name="P:Trx.Messaging.ConditionalFormatting.MidEqualsBinaryOperator.Length">
            <summary>
            It returns or sets the length of the set of bytes.
            </summary>
        </member>
        <member name="T:Trx.Messaging.BitMapFieldXmlRendering">
            <summary>
            Representa un objeto capaz de representar en formato XML un mapa de bits.
            </summary>
            <remarks>Solo los mapas de bits cuyos números de campo sean mayores o
            iguales a cero serán desplegados como campos de mensajes, en caso contrario
            serán desplegados como componentes directos del mensaje.</remarks>
        </member>
        <member name="T:Trx.Messaging.MessagingComponentXmlRendering">
            <summary>
            Representa un objeto capaz de representar en formato XML un componente de
            mensajería.
            </summary>
        </member>
        <member name="F:Trx.Messaging.MessagingComponentXmlRendering.XmlMessageTag">
            <summary>
            Define el tag a emplear para representar un componente de mensajería
            de tipo mensaje.
            </summary>
        </member>
        <member name="F:Trx.Messaging.MessagingComponentXmlRendering.XmlFieldTag">
            <summary>
            Define el tag a emplear para representar un componente de mensajería
            de tipo campo.
            </summary>
        </member>
        <member name="F:Trx.Messaging.MessagingComponentXmlRendering.XmlHeaderTag">
            <summary>
            Define el tag a emplear para representar un componente de mensajería
            de tipo cabezal.
            </summary>
        </member>
        <member name="F:Trx.Messaging.MessagingComponentXmlRendering.XmlBitMapTag">
            <summary>
            Define el tag a emplear para representar un componente de mensajería
            de tipo bitmap.
            </summary>
        </member>
        <member name="F:Trx.Messaging.MessagingComponentXmlRendering.XmlNumberAttr">
            <summary>
            Es el nombre del atributo a emplear para representar el número de un
            campo de mensaje.
            </summary>
        </member>
        <member name="F:Trx.Messaging.MessagingComponentXmlRendering.XmlValueAttr">
            <summary>
            Es el nombre del atributo a emplear para representar el valor de un
            campo de mensaje.
            </summary>
        </member>
        <member name="F:Trx.Messaging.MessagingComponentXmlRendering.XmlTypeAttr">
            <summary>
            Es el nombre del atributo a emplear para representar el tipo de datos de un
            campo de mensaje.
            </summary>
        </member>
        <member name="F:Trx.Messaging.MessagingComponentXmlRendering.XmlStringVal">
            <summary>
            Es el valor a emplear para indicar que un campo de mensaje es una cadena
            de caracteres.
            </summary>
        </member>
        <member name="F:Trx.Messaging.MessagingComponentXmlRendering.XmlBinaryVal">
            <summary>
            Es el valor a emplear para indicar que un campo de mensaje es un array
            de bytes.
            </summary>
        </member>
        <member name="F:Trx.Messaging.MessagingComponentXmlRendering.XmlComponentVal">
            <summary>
            Es el valor a emplear para indicar que un campo de mensaje es un
            componente de mensajería diferente a los anteriores (puede ser un
            bitmap, un mensaje, etc.).
            </summary>
        </member>
        <member name="M:Trx.Messaging.MessagingComponentXmlRendering.#ctor">
            <summary>
            Construye un nuevo objeto capaz de representar en formato XML un
            componente de mensajería.
            </summary>
        </member>
        <member name="M:Trx.Messaging.MessagingComponentXmlRendering.DoRender(log4net.ObjectRenderer.RendererMap,Trx.Messaging.MessagingComponent,System.String)">
            <summary>
            Retorna la representación XML en una cadena de caracteres de un componente
            de mensajería.
            </summary>
            <param name="renderingMap">Es el mapa de todos los objetos que representan
            objetos. Vea log4net.</param>
            <param name="component">Es el campo a ser representado en XML.</param>
            <param name="indent">Es la indentación a emplear en la representación
            XML.</param>
            <returns>Retorna una cadena de caracteres con la representación en XML
            del componente de mensajería.</returns>
        </member>
        <member name="M:Trx.Messaging.MessagingComponentXmlRendering.RenderObject(log4net.ObjectRenderer.RendererMap,System.Object,System.IO.TextWriter)">
            <summary>
            Implementa el método requerido por log4net para personalizar la
            representación de un tipo de objetos en particular.
            </summary>
            <param name="renderingMap">
            Es el mapa de todos los objetos que representan objetos. Vea log4net.
            </param>
            <param name="obj">
            Es el objeto a representar.
            </param>
            <param name="writer">
            Es donde se representa el objeto.
            </param>
        </member>
        <member name="M:Trx.Messaging.BitMapFieldXmlRendering.#ctor">
            <summary>
            Construye un nuevo objeto capaz de representar en formato XML un
            mapa de bits.
            </summary>
        </member>
        <member name="M:Trx.Messaging.BitMapFieldXmlRendering.DoRender(log4net.ObjectRenderer.RendererMap,Trx.Messaging.MessagingComponent,System.String)">
            <summary>
            Retorna la representación XML en una cadena de caracteres de un
            mapa de bits.
            </summary>
            <param name="renderingMap">Es el mapa de todos los objetos que representan
            objetos. Vea log4net.</param>
            <param name="component">Es el BitMap a ser representado en XML.</param>
            <param name="indent">Es la indentación a emplear en la representación
            XML.</param>
            <returns>Retorna una cadena de caracteres con la representación en XML
            del mapa de bits.</returns>
        </member>
        <member name="T:Trx.Messaging.BinaryEncoder">
            <summary>
            Implementa una clase capaz de formatear y analizar componentes de
            mensajería, utilizando los bytes en crudo como formato de datos.
            </summary>
            <remarks>
            This class implements the Singleton pattern, you must use
            <see cref="M:Trx.Messaging.BinaryEncoder.GetInstance"/> to acquire the instance.
            </remarks>
        </member>
        <member name="T:Trx.Messaging.IBinaryEncoder">
            <summary>
            Esta interfaz define qué debe implementar una clase para formatear y
            analizar componentes de mensajería hacia y desde su forma cruda cuando
            son recibido y/o enviados hacia otro sistema.
            Formatea, analiza y produce datos que son cadenas de bytes.
            </summary>
        </member>
        <member name="M:Trx.Messaging.IBinaryEncoder.GetEncodedLength(System.Int32)">
            <summary>
            Calcula el largo de los datos formateados del componente de mensajería.
            </summary>
            <param name="dataLength">Es el largo de los datos del componente de
            mensajería.</param>
            <returns>Retorna el largo de los datos formateados.</returns>
        </member>
        <member name="M:Trx.Messaging.IBinaryEncoder.Encode(System.Byte[],Trx.Messaging.FormatterContext@)">
            <summary>
            Formatea los datos del componente de mensajería.
            </summary>
            <param name="data">
            Son los datos del componente de mensajería.
            </param>
            <param name="formatterContext">
            Es el contexto de formateo donde se almacenará la
            información formateada.
            </param>
        </member>
        <member name="M:Trx.Messaging.IBinaryEncoder.Decode(Trx.Messaging.ParserContext@,System.Int32)">
            <summary>
            Convierte los datos formateados en datos válidos del componente
            de mensajería.
            </summary>
            <param name="parserContext">
            Es el contexto de análisis y construcción de mensajes donde
            reside la información a decodificar.
            </param>
            <param name="length">
            Es la cantidad de información que se desea obtener.
            </param>
            <returns>
            Una cadena de bytes con los datos del componente de mensajería.
            </returns>
        </member>
        <member name="M:Trx.Messaging.BinaryEncoder.#ctor">
            <summary>
            Construye una nueva instancia del codificador. Le damos el nivel
            del visibilidad 'private' para forzar al usuario a emplear
            <see cref="M:Trx.Messaging.BinaryEncoder.GetInstance"/>.
            </summary>
        </member>
        <member name="M:Trx.Messaging.BinaryEncoder.GetInstance">
            <summary>
            Retorna una instancia de la clase <see cref="T:Trx.Messaging.BinaryEncoder"/>.
            </summary>
            <returns>
            Una instancia de la clase <see cref="T:Trx.Messaging.BinaryEncoder"/>.
            </returns>
        </member>
        <member name="M:Trx.Messaging.BinaryEncoder.GetEncodedLength(System.Int32)">
            <summary>
            Calcula el largo de los datos formateados del componente de mensajería.
            </summary>
            <param name="dataLength">
            Es el largo de los datos del componente de mensajería.
            </param>
            <returns>
            Retorna el largo de los datos formateados.
            </returns>
        </member>
        <member name="M:Trx.Messaging.BinaryEncoder.Encode(System.Byte[],Trx.Messaging.FormatterContext@)">
            <summary>
            Formatea los datos del componente de mensajería.
            </summary>
            <param name="data">
            Son los datos del componente de mensajería.
            </param>
            <param name="formatterContext">
            Es el contexto de formateo donde se almacenará la
            información formateada.
            </param>
        </member>
        <member name="M:Trx.Messaging.BinaryEncoder.Decode(Trx.Messaging.ParserContext@,System.Int32)">
            <summary>
            Convierte los datos formateados en datos válidos del componente
            de mensajería.
            </summary>
            <param name="parserContext">
            Es el contexto de análisis y construcción de mensajes donde
            reside la información a decodificar.
            </param>
            <param name="length">
            Es la cantidad de información que se desea obtener.
            </param>
            <returns>
            Una cadena de caracteres con los datos del componente de mensajería.
            </returns>
        </member>
        <member name="T:Trx.Utilities.VolatileSequencer">
            <summary>
            Implements a numerical sequencer.
            </summary>
            <remarks>
            The minimum and maximum default values are defined by
            <see cref="F:Trx.Utilities.VolatileSequencer.VolatileSequencerMinimumValue"/> and
            <see cref="F:System.Int32.MaxValue"/> respectively.
            </remarks>
        </member>
        <member name="T:Trx.Utilities.ISequencer">
            <summary>
            It defines a numerical sequencer.
            </summary>
        </member>
        <member name="M:Trx.Utilities.ISequencer.CurrentValue">
            <summary>
            It's the value of the sequencer.
            </summary>
            <returns>
            The actual value of the sequencer.
            </returns>
        </member>
        <member name="M:Trx.Utilities.ISequencer.Increment">
            <summary>
            It increases in one the present value of the sequencer.
            </summary>
            <returns>
            It returns the value of the sequencer before being increased.
            </returns>
            <remarks>
            If the value increased of the sequencer surpasses the maximum value
            permitted by <see cref="M:Trx.Utilities.ISequencer.Maximum"/>, <see cref="M:Trx.Utilities.ISequencer.Minimum"/>  it is assigned
            to present value.  
            </remarks>
        </member>
        <member name="M:Trx.Utilities.ISequencer.Minimum">
            <summary>
            Is the maximum value that can be worth the sequencer.
            </summary>
            <returns>
            The maximum value that can be worth the sequencer.
            </returns>
        </member>
        <member name="M:Trx.Utilities.ISequencer.Maximum">
            <summary>
            Is the minimum value that can be worth the sequencer.
            </summary>
            <returns>
            The minimum value that can be worth the sequencer.
            </returns>
        </member>
        <member name="F:Trx.Utilities.VolatileSequencer.VolatileSequencerMinimumValue">
            <summary>
            The minimum default value for the sequencer.
            </summary>
        </member>
        <member name="M:Trx.Utilities.VolatileSequencer.#ctor">
            <summary>
            Initializes a new instance of the class <see cref="T:Trx.Utilities.VolatileSequencer"/>.
            </summary>
        </member>
        <member name="M:Trx.Utilities.VolatileSequencer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the class <see cref="T:Trx.Utilities.VolatileSequencer"/>.
            </summary>
            <param name="minimumValue">
            The minimum value of the sequencer.
            </param>
        </member>
        <member name="M:Trx.Utilities.VolatileSequencer.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the class <see cref="T:Trx.Utilities.VolatileSequencer"/>.
            </summary>
            <param name="minimumValue">
            The minimum value of the sequencer.
            </param>
            <param name="maximumValue">
            The maximum value of the sequencer.
            </param>
        </member>
        <member name="M:Trx.Utilities.VolatileSequencer.CurrentValue">
            <summary>
            It's the value of the sequencer.
            </summary>
            <returns>
            The actual value of the sequencer.
            </returns>
        </member>
        <member name="M:Trx.Utilities.VolatileSequencer.Increment">
            <summary>
            It increases in one the present value of the sequencer.
            </summary>
            <returns>
            It returns the value of the sequencer before being increased.
            </returns>
            <remarks>
            If the value increased of the sequencer surpasses the maximum value
            permitted by <see cref="M:Trx.Utilities.VolatileSequencer.Maximum"/>, <see cref="M:Trx.Utilities.VolatileSequencer.Minimum"/>  it is assigned
            to present value.  
            </remarks>
        </member>
        <member name="M:Trx.Utilities.VolatileSequencer.Maximum">
            <summary>
            Is the minimum value that can be worth the sequencer.
            </summary>
            <returns>
            The minimum value that can be worth the sequencer.
            </returns>
        </member>
        <member name="M:Trx.Utilities.VolatileSequencer.Minimum">
            <summary>
            Is the maximum value that can be worth the sequencer.
            </summary>
            <returns>
            The maximum value that can be worth the sequencer.
            </returns>
        </member>
        <member name="T:Trx.Messaging.StringMessageHeader">
            <summary>
            This class represents a string message header.
            </summary>
        </member>
        <member name="T:Trx.Messaging.MessageHeader">
            <summary>
            Representa un componente de mensajería que es un cabezal del mensaje.
            </summary>
        </member>
        <member name="M:Trx.Messaging.MessageHeader.#ctor">
            <summary>
            Contruye un nuevo cabezal de mensaje.
            </summary>
        </member>
        <member name="M:Trx.Messaging.MessageHeader.XmlRendering(log4net.ObjectRenderer.RendererMap)">
            <summary>
            Retorna una clase que puede representar en formato XML el cabezal de
            mensajes.
            </summary>
            <param name="renderingMap">Es un mapa con todas las clases que
            representan objetos.</param>
            <returns>Una clase que puede representar en formato XML el cabezal de
            mensajes.
            </returns>
        </member>
        <member name="M:Trx.Messaging.StringMessageHeader.#ctor">
            <summary>
            Contruye un nuevo cabezal de mensaje de tipo string.
            </summary>
        </member>
        <member name="M:Trx.Messaging.StringMessageHeader.#ctor(System.String)">
            <summary>
            Contruye un nuevo cabezal de mensaje de tipo string.
            </summary>
            <param name="value">
            Es el valor del nuevo cabezal.
            </param>
        </member>
        <member name="M:Trx.Messaging.StringMessageHeader.ToString">
            <summary>
            Convierte en una cadena de caracteres el valor del cabezal.
            </summary>
            <returns>
            Una cadena de caracteres que representan el valor del cabezal.
            </returns>
        </member>
        <member name="M:Trx.Messaging.StringMessageHeader.GetBytes">
            <summary>
            Convierte a un array de bytes el valor del cabezal.
            </summary>
            <returns>
            Un array de bytes.
            </returns>
        </member>
        <member name="M:Trx.Messaging.StringMessageHeader.Clone">
            <summary>
            Construye una copia exacta del cabezal.
            </summary>
            <returns>
            Una copia exacta del cabezal.
            </returns>
        </member>
        <member name="M:Trx.Messaging.StringMessageHeader.NewComponent">
            <summary>
            Crea un nuevo cabezal de tipo string.
            </summary>
            <returns>
            Un nuevo cabezal de tipo string.
            </returns>
        </member>
        <member name="P:Trx.Messaging.StringMessageHeader.Value">
            <summary>
            Retorna o asigna el valor del cabezal de tipo cadena de carateres.
            </summary>
        </member>
        <member name="T:Trx.Messaging.NumericValidator">
            <summary>
            It defines a class to validate numeric fields values.
            </summary>
            <remarks>
            This class implements the Singleton pattern, you must use
            <see cref="M:Trx.Messaging.NumericValidator.GetInstance"/> or <see cref="M:Trx.Messaging.NumericValidator.GetInstance(System.Boolean)"/>
            to acquire the instance.
            </remarks>
        </member>
        <member name="T:Trx.Messaging.IStringValidator">
            <summary>
            Define un validador de valores.
            </summary>
        </member>
        <member name="M:Trx.Messaging.IStringValidator.Validate(System.String)">
            <summary>
            Valida el valor indicado.
            </summary>
            <param name="value">
            Es el valor a ser validado.
            </param>
            <exception cref="T:Trx.Messaging.StringValidationException">
            Se produce cuando la validación falla.
            </exception>
        </member>
        <member name="M:Trx.Messaging.NumericValidator.#ctor(System.Boolean)">
            <summary>
            It initializes a new instance of the class.
            </summary>
            <param name="allowNulls">
            true to accept null field values, otherwise false.
            </param>
        </member>
        <member name="M:Trx.Messaging.NumericValidator.GetInstance">
            <summary>
            It returns an instance of <see cref="T:Trx.Messaging.NumericValidator"/>.
            </summary>
            <returns>
            An instance of <see cref="T:Trx.Messaging.NumericValidator"/> which doesn't support null fields.
            </returns>
        </member>
        <member name="M:Trx.Messaging.NumericValidator.GetInstance(System.Boolean)">
            <summary>
            It returns an instance of <see cref="T:Trx.Messaging.NumericValidator"/>.
            </summary>
            <param name="allowNulls">
            true to accept null field values, otherwise false.
            </param>
            <returns>
            An instance of <see cref="T:Trx.Messaging.NumericValidator"/>.
            </returns>
        </member>
        <member name="M:Trx.Messaging.NumericValidator.Validate(System.String)">
            <summary>
            It validates the field value.
            </summary>
            <param name="value">
            The value to validate.
            </param>
            <exception cref="T:Trx.Messaging.StringValidationException">
            Thrown when the value isn't numeric.
            </exception>
        </member>
        <member name="T:Trx.Messaging.HexadecimalStringEncoder">
            <summary>
            Implementa una clase capaz de formatear y analizar componentes de
            mensajería, utilizando cadenas de caracteres como formato de datos.
            Cada caracter de la información a formatear es tomado en su representación
            hexadecimal y almacenado en dos bytes, cada uno guardando el
            correspondiente dígito hexadecimal de la información. A modo de ejemplo
            si un caracter contiene el valor decimal '58', su representación hexadecimal
            es '3A', cuando el codificador formatee esta información producirá
            dos caracteres, el primero con un '3' (valor decimal 51, hexadecimal
            33), y el segundo con una 'A' (valor decimal 65, hexadecimal 41).
            La información producida por esta clase siempre contendrá datos
            de tipo ASCII sin caracteres de control.
            </summary>
            <remarks>
            This class implements the Singleton pattern, you must use
            <see cref="M:Trx.Messaging.HexadecimalStringEncoder.GetInstance"/> to acquire the instance.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.HexadecimalStringEncoder.#ctor">
            <summary>
            Construye una nueva instancia del codificador. Le damos el nivel
            del visibilidad 'private' para forzar al usuario a emplear
            <see cref="M:Trx.Messaging.HexadecimalStringEncoder.GetInstance"/>.
            </summary>
        </member>
        <member name="M:Trx.Messaging.HexadecimalStringEncoder.GetInstance">
            <summary>
            Retorna una instancia de la clase <see cref="T:Trx.Messaging.HexadecimalStringEncoder"/>.
            </summary>
            <returns>
            Una instancia de la clase <see cref="T:Trx.Messaging.HexadecimalStringEncoder"/>.
            </returns>
        </member>
        <member name="M:Trx.Messaging.HexadecimalStringEncoder.GetEncodedLength(System.Int32)">
            <summary>
            Calcula el largo de los datos formateados del componente de mensajería.
            </summary>
            <param name="dataLength">
            Es el largo de los datos del componente de mensajería.
            </param>
            <returns>
            Retorna el largo de los datos formateados.
            </returns>
        </member>
        <member name="M:Trx.Messaging.HexadecimalStringEncoder.Encode(System.String,Trx.Messaging.FormatterContext@)">
            <summary>
            Formatea los datos del componente de mensajería.
            </summary>
            <param name="data">
            Son los datos del componente de mensajería.
            </param>
            <param name="formatterContext">
            Es el contexto de formateo donde se almacenará la
            información formateada.
            </param>
        </member>
        <member name="M:Trx.Messaging.HexadecimalStringEncoder.Decode(Trx.Messaging.ParserContext@,System.Int32)">
            <summary>
            Convierte los datos formateados en datos válidos del componente
            de mensajería.
            </summary>
            <param name="parserContext">
            Es el contexto de análisis y construcción de mensajes donde
            reside la información a decodificar.
            </param>
            <param name="length">
            Es la cantidad de información que se desea obtener.
            </param>
            <returns>
            Una cadena de caracteres con los datos del componente de mensajería.
            </returns>
        </member>
        <member name="T:Trx.Messaging.FlowControl.PeerRequest">
            <summary>
            Esta clase encapsula un par de mensajes que son un requerimiento
            y su respuesta.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.PeerRequest.#ctor(Trx.Messaging.FlowControl.Peer,Trx.Messaging.Message)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Trx.Messaging.FlowControl.PeerRequest"/>.
            </summary>
            <param name="peer">
            Es el punto por el que se procesa el requerimiento.
            </param>
            <param name="message">
            Es el mensaje que inicia el requerimiento.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Alguno de los parámetros es nulo.
            </exception>
        </member>
        <member name="M:Trx.Messaging.FlowControl.PeerRequest.DisposeTimer">
            <summary>
            Elimina el timer de timeout.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.PeerRequest.MarkAsTransmitted">
            <summary>
            Marca el requerimiento como transmitido.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.PeerRequest.SetResponseMessage(Trx.Messaging.Message)">
            <summary>
            Sets the response to the request if it's not an expired request.
            </summary>
            <param name="message">
            It's the response message.
            </param>
            <returns>
            true if the response was set, false if the response wasn't set because
            the request is expired.
            </returns>
        </member>
        <member name="M:Trx.Messaging.FlowControl.PeerRequest.MarkAsExpired">
            <summary>
            Marca el requerimiento como vencido.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.PeerRequest.WaitResponse(System.Int32)">
            <summary>
            Espera el tiempo indicado, a que llegue el mensaje de respuesta
            al requerimiento, si es que aun no ha llegado.
            </summary>
            <param name="timeout">
            Es el tiempo máximo, expresado en milisegundos, que se espera
            por la respuesta.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            El tiempo máximo que se espera por la respuesta debe ser
            mayor que cero.
            </exception>
        </member>
        <member name="M:Trx.Messaging.FlowControl.PeerRequest.Send">
            <summary>
            Este método le pide al <see cref="P:Trx.Messaging.FlowControl.PeerRequest.Peer"/> que se le pasó al
            objeto en el momento de su creación, que envíe el mensaje
            al sistema remoto para iniciar el requerimiento.
            </summary>
            <remarks>
            Luego de enviar el mensaje, esta método devuelve el control
            sin efectuar otra operación.
            Para esperar la respuesta con un timeout, se debe invocar al
            método <see cref="M:Trx.Messaging.FlowControl.PeerRequest.WaitResponse(System.Int32)"/>.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.FlowControl.PeerRequest.OnTimerTick(System.Object)">
            <summary>
            Este método recibe el evento del timer que controla
            el tiempo máximo por el que se espera respuesta desde
            el sistema remoto.
            </summary>
            <param name="state">
            Este parámetro no se utiliza.
            </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.PeerRequest.Send(System.Int32)">
            <summary>
            Este método le pide al <see cref="P:Trx.Messaging.FlowControl.PeerRequest.Peer"/> que se le pasó al
            objeto en el momento de su creación, que envíe el mensaje
            al sistema remoto para iniciar el requerimiento, iniciando
            además un proceso de control que marca el requerimiento
            como expirado si la respuesta no llega antes de que transcurra
            el tiempo indicado por parámetro.
            </summary>
            <param name="millisecondsTimeout">
            Es el tiempo que se espera antes de marcar automáticamente el
            requerimiento como que ha expirado.
            </param>
            <remarks>
            Luego de enviar el mensaje, esta método devuelve el control
            sin efectuar otra operación, el control del tiempo se hace
            asincronicamente.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.FlowControl.PeerRequest.ToString">
            <summary>
            Crea una cadena de caracteres que representa al requerimiento.
            </summary>
            <returns>
            La cadena de caracteres que representa al requerimiento.
            </returns>
        </member>
        <member name="P:Trx.Messaging.FlowControl.PeerRequest.Expired">
            <summary>
            Informa si el requerimiento ha vencido, es decir,
            si no ha recibido respuesta desde el sistema remoto.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.PeerRequest.ExpiredDateTime">
            <summary>
            Retorna la fecha y la hora en que el requerimiento
            expiró.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.PeerRequest.Transmitted">
            <summary>
            Indica si el mensaje de requerimiento ha sido enviado
            al sistema remoto.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.PeerRequest.RequestMessage">
            <summary>
            Retorna el mensaje de requerimiento.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.PeerRequest.RequestDateTime">
            <summary>
            Retorna la fecha y la hora del requerimiento.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.PeerRequest.ResponseMessage">
            <summary>
            Retorna el mensaje de respuesta.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.PeerRequest.ResponseDateTime">
            <summary>
            Retorna la fecha y la hora de la respuesta.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.PeerRequest.Peer">
            <summary>
            Retorna el punto de conexión por donde
            se gestiona o gestionó el requerimiento.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.PeerRequest.Payload">
            <summary>
            Retorna o asigna la carga que transporta el requerimiento.
            </summary>
            <remarks>
            Esta propiedad no es empleada por el punto de conexión, se
            provee para que el usuario pueda salvar información de su
            interes.
            </remarks>
        </member>
        <member name="P:Trx.Messaging.FlowControl.PeerRequest.Logger">
            <summary>
            Retorna o asigna el logger empleado por la clase.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.PeerRequest.LoggerName">
            <summary>
            Retorna o asigna el nombre del logger que se utiliza.
            </summary>
        </member>
        <member name="T:Trx.Messaging.FlowControl.BasicServerPeerManager">
            <summary>
            This class implements the basic functionality to be a
            server peer manager.
            </summary>
        </member>
        <member name="T:Trx.Messaging.FlowControl.IServerPeerManager">
            <summary>
            This interface defines what a class must implements to be
            a server peers manager.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.IServerPeerManager.AcceptConnectionRequest(System.Object)">
            <summary>
            This function is used to know if the peer manager accepts the connection
            request.
            </summary>
            <param name="connectionInfo">
            It's the connection request information. The server peer manager
            can use this information in order to take the decision to accept
            or not the connection request.
            </param>
            <returns>
            A logical value equal to true if the connection request is accepted,
            otherwise false .
            </returns>
            <remarks>
            The connection requests arrives from objects implementing
            <see cref="T:Trx.Messaging.FlowControl.IListener"/> interface.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.FlowControl.IServerPeerManager.Connected(Trx.Messaging.Channels.IChannel)">
            <summary>
            Through the invocation of this method <see cref="T:Trx.Messaging.FlowControl.Server"/> informs to
            the peer manager of the connection of the indicated channel.
            </summary>
            <param name="channel">
            It's the connected channel.
            </param>
            <returns>
            The peer associated to the channel.
            </returns>
            <remarks>
            Normally at this time the peers manager associates the channel to the peer.
            </remarks>
        </member>
        <member name="P:Trx.Messaging.FlowControl.IServerPeerManager.Peers">
            <summary>
            It returns the collection of known peers by the server peer
            manager.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.IServerPeerManager.MessageProcessor">
            <summary>
            It returns or sets the objets which process the received messages
            by the connections points.
            </summary>
            <remarks>
            The server peer manager sends every received message from the
            peers to the messages processor set here.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.FlowControl.BasicServerPeerManager.#ctor">
            <summary>
            Initializes a new instance of the class
            <see cref="T:Trx.Messaging.FlowControl.BasicServerPeerManager"/>.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.BasicServerPeerManager.AcceptConnectionRequest(System.Object)">
            <summary>
            This function is used to know if the peer manager accepts the connection
            request.
            </summary>
            <param name="connectionInfo">
            It's the connection request information. The server peer manager
            can use this information in order to take the decision to accept
            or not the connection request.
            </param>
            <returns>
            A logical value equal to true if the connection request is accepted,
            otherwise false .
            </returns>
            <remarks>
            The connection requests arrives from objects implementing
            <see cref="T:Trx.Messaging.FlowControl.IListener"/> interface.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.FlowControl.BasicServerPeerManager.DisablePeer(Trx.Messaging.FlowControl.ServerPeer)">
            <summary>
            Disables the <see cref="T:Trx.Messaging.FlowControl.ServerPeer"/>.
            </summary>
            <param name="peer">
            It's the peer to disable.
            </param>
            <remarks>
            It's called when the peer channel is disconnected or an
            error occurs.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.FlowControl.BasicServerPeerManager.OnPeerDisconnected(System.Object,System.EventArgs)">
            <summary>
            It handles the event <see cref="E:Trx.Messaging.FlowControl.Peer.Disconnected"/>.
            </summary>
            <param name="sender">
            It's the <see cref="T:Trx.Messaging.FlowControl.ServerPeer"/> which sends the event.
            </param>
            <param name="e">
            It's the event paremeters.
            </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.BasicServerPeerManager.GetServerPeer(Trx.Messaging.Channels.IChannel)">
            <summary>
            It creates a new server peer, and associates the provided
            channel to it.
            </summary>
            <param name="channel">
            It's the channel to associate with the peer.
            </param>
            <returns>
            It's the new server peer.
            </returns>
        </member>
        <member name="M:Trx.Messaging.FlowControl.BasicServerPeerManager.Connected(Trx.Messaging.Channels.IChannel)">
            <summary>
            Through the invocation of this method <see cref="T:Trx.Messaging.FlowControl.Server"/> informs to
            the peer manager of the connection of the indicated channel.
            </summary>
            <param name="channel">
            It's the connected channel.
            </param>
            <returns>
            The peer associated to the channel.
            </returns>
            <remarks>
            Normally at this time the peers manager associates the channel to the peer.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.FlowControl.BasicServerPeerManager.Process(Trx.Messaging.FlowControl.IMessageSource,Trx.Messaging.Message)">
            <summary>
            It's called to process the indicated message.
            </summary>
            <param name="source">
            It's the source of the message.
            </param>
            <param name="message">
            It's the message to be processed.
            </param>
            <returns>
            A logical value the same to true, if the messages processor
            processeced it, otherwise it returns false.
            </returns>
            <remarks>
            If the messages processor doesn't process it, the system
            delivers it to the next processor in the list, and so on until
            one process it, or there aren't other processors.
            </remarks>
        </member>
        <member name="P:Trx.Messaging.FlowControl.BasicServerPeerManager.Peers">
            <summary>
            It returns the collection of known peers by the server peer
            manager.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.BasicServerPeerManager.MessagesIdentifier">
            <summary>
            It returns or sets the messages identificator which are
            assigned to each new connection point.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.BasicServerPeerManager.Logger">
            <summary>
            It returns the logger used by the class.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.BasicServerPeerManager.LoggerName">
            <summary>
            It returns the logger name used by the class.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.BasicServerPeerManager.MessageProcessor">
            <summary>
            It returns or sets the objets which process the received messages
            by the connections points.
            </summary>
            <remarks>
            The server peer manager sends every received message from the
            peers to the messages processor set here.
            </remarks>
        </member>
        <member name="P:Trx.Messaging.FlowControl.BasicServerPeerManager.NextMessageProcessor">
            <summary>
            It returns or sets the next messages processor.
            </summary>
        </member>
        <member name="T:Trx.Messaging.ConditionalFormatting.ParentMessageExpression">
            <summary>
            This class implements the parent message expression, suitable to access
            the parent message of an inner message.
            </summary>
        </member>
        <member name="T:Trx.Messaging.ConditionalFormatting.IMessageExpression">
            <summary>
            This interface defines an expression which handles a messages hierarchy.
            </summary>
            <remarks>
            Our primary interest with the hierarchy is to access the leaf message
            node and a given field value of it (by it's number which is also stored
            in the leaf node).
            </remarks>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.IMessageExpression.GetLeafMessage(Trx.Messaging.ParserContext@,Trx.Messaging.Message)">
            <summary>
            It returns the message.
            </summary>
            <param name="parserContext">
            It's the parser context.
            </param>
            <param name="message">
            The message to get the message field.
            </param>
            <returns>
            The message.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.IMessageExpression.GetLeafMessage(Trx.Messaging.FormatterContext@,Trx.Messaging.Message)">
            <summary>
            It returns the message.
            </summary>
            <param name="formatterContext">
            It's the context of formatting to be used by the method.
            </param>
            <param name="message">
            The message to get the message field.
            </param>
            <returns>
            The message.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.IMessageExpression.GetLeafFieldNumber">
            <summary>
            It returns the leaf field number of a message hierarchy.
            </summary>
            <returns>
            The leaf field number.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.IMessageExpression.GetLeafFieldValueString(Trx.Messaging.ParserContext@,Trx.Messaging.Message)">
            <summary>
            It returns the field value as string.
            </summary>
            <param name="parserContext">
            It's the parser context.
            </param>
            <param name="message">
            The message to get the field.
            </param>
            <returns>
            The field value.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.IMessageExpression.GetLeafFieldValueString(Trx.Messaging.FormatterContext@,Trx.Messaging.Message)">
            <summary>
            It returns the field value as string.
            </summary>
            <param name="formatterContext">
            It's the context of formatting to be used by the method.
            </param>
            <param name="message">
            The message to get the field.
            </param>
            <returns>
            The field value.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.IMessageExpression.GetLeafFieldValueBytes(Trx.Messaging.ParserContext@,Trx.Messaging.Message)">
            <summary>
            It returns the field value as a byte array.
            </summary>
            <param name="parserContext">
            It's the parser context.
            </param>
            <param name="message">
            The message to get the field.
            </param>
            <returns>
            The field value.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.IMessageExpression.GetLeafFieldValueBytes(Trx.Messaging.FormatterContext@,Trx.Messaging.Message)">
            <summary>
            It returns the field value as a byte array.
            </summary>
            <param name="formatterContext">
            It's the context of formatting to be used by the method.
            </param>
            <param name="message">
            The message to get the field.
            </param>
            <returns>
            The field value.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.ParentMessageExpression.#ctor">
            <summary>
            It initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.ParentMessageExpression.#ctor(Trx.Messaging.ConditionalFormatting.IMessageExpression)">
            <summary>
            It initializes a new instance of the class.
            </summary>
            <param name="messageExpression">
            The inner message expression.
            </param>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.ParentMessageExpression.GetParentMessage(Trx.Messaging.Message)">
            <summary>
            It returns the parent message located of a given message.
            </summary>
            <param name="message">
            The given message.
            </param>
            <returns>
            The parent message located of a given message.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.ParentMessageExpression.GetLeafMessage(Trx.Messaging.ParserContext@,Trx.Messaging.Message)">
            <summary>
            It returns the message.
            </summary>
            <param name="parserContext">
            It's the parser context.
            </param>
            <param name="message">
            The message to get the message field.
            </param>
            <returns>
            The message.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.ParentMessageExpression.GetLeafMessage(Trx.Messaging.FormatterContext@,Trx.Messaging.Message)">
            <summary>
            It returns the message.
            </summary>
            <param name="formatterContext">
            It's the context of formatting to be used by the method.
            </param>
            <param name="message">
            The message to get the message field.
            </param>
            <returns>
            The message.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.ParentMessageExpression.GetLeafFieldNumber">
            <summary>
            It returns the leaf field number of a message hierarchy.
            </summary>
            <returns>
            The leaf field number.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.ParentMessageExpression.GetLeafFieldValueString(Trx.Messaging.ParserContext@,Trx.Messaging.Message)">
            <summary>
            It returns the field value as string.
            </summary>
            <param name="parserContext">
            It's the parser context.
            </param>
            <param name="message">
            The message to get the field.
            </param>
            <returns>
            The field value.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.ParentMessageExpression.GetLeafFieldValueString(Trx.Messaging.FormatterContext@,Trx.Messaging.Message)">
            <summary>
            It returns the field value as string.
            </summary>
            <param name="formatterContext">
            It's the context of formatting to be used by the method.
            </param>
            <param name="message">
            The message to get the field.
            </param>
            <returns>
            The field value.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.ParentMessageExpression.GetLeafFieldValueBytes(Trx.Messaging.ParserContext@,Trx.Messaging.Message)">
            <summary>
            It returns the field value as a byte array.
            </summary>
            <param name="parserContext">
            It's the parser context.
            </param>
            <param name="message">
            The message to get the field.
            </param>
            <returns>
            The field value.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.ParentMessageExpression.GetLeafFieldValueBytes(Trx.Messaging.FormatterContext@,Trx.Messaging.Message)">
            <summary>
            It returns the field value as a byte array.
            </summary>
            <param name="formatterContext">
            It's the context of formatting to be used by the method.
            </param>
            <param name="message">
            The message to get the field.
            </param>
            <returns>
            The field value.
            </returns>
        </member>
        <member name="P:Trx.Messaging.ConditionalFormatting.ParentMessageExpression.MessageExpression">
            <summary>
            It returns or sets the inner message expression.
            </summary>
        </member>
        <member name="T:Trx.Messaging.Channels.TwoBytesNboHeaderChannel">
            <summary>
            This class implements a channel capable of interchanging messages
            with another system, using the TCP/IP communication protocol.
            It uses a 2 bytes header in NBO format to indicate the length of
            data.
            </summary>
        </member>
        <member name="T:Trx.Messaging.Channels.TcpChannel">
            <summary>
            This class implements a channel capable of interchanging messages
            with another system, using the TCP/IP communication protocol.
            </summary>
        </member>
        <member name="T:Trx.Messaging.Channels.IFilteredChannel">
            <summary>
            
            </summary>
        </member>
        <member name="T:Trx.Messaging.Channels.IChannel">
            <summary>
            Defines a channel capable of interchanging messages
            with another system.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Channels.IChannel.Connect">
            <summary>
            It starts the connection of the channel with the remote system.
            </summary>
            <returns>
            Returns true if connection has been started, otherwise
            returns false.
            </returns>
        </member>
        <member name="M:Trx.Messaging.Channels.IChannel.Close">
            <summary>
            Close the connection, if exists, stablished with
            the remote system.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Channels.IChannel.Send(Trx.Messaging.Message)">
            <summary>
            It sends the specified message to the remote system.
            </summary>
            <param name="message">
            It's the message to be sent.
            </param>
        </member>
        <member name="M:Trx.Messaging.Channels.IChannel.BeginBind(System.Object)">
            <summary>
            It begins the association of a channel with a connection accepted
            by a listener.
            </summary>
            <param name="connectionData">
            It's the data of the connection accepted by
            the listener.
            </param>
        </member>
        <member name="M:Trx.Messaging.Channels.IChannel.EndBind">
            <summary>
            It ends the association of a channel with a connection accepted
            by a listener.
            </summary>
        </member>
        <member name="E:Trx.Messaging.Channels.IChannel.Connected">
            <summary>
            It's raised when the channel has been connected.
            </summary>
        </member>
        <member name="E:Trx.Messaging.Channels.IChannel.Disconnected">
            <summary>
            It's raised when the channel has been disconnected.
            </summary>
        </member>
        <member name="E:Trx.Messaging.Channels.IChannel.Receive">
            <summary>
            It's raised when a message has been received.
            </summary>
        </member>
        <member name="E:Trx.Messaging.Channels.IChannel.Error">
            <summary>
            It's raised when an error has been catched in the
            internal channel processing. 
            </summary>
            <remarks>
            This event is received from the channel when a catched error
            causes its inhabilitation, it's necessary to call
            <see cref="M:Trx.Messaging.Channels.IChannel.Connect"/> again to use it.
            </remarks>
        </member>
        <member name="P:Trx.Messaging.Channels.IChannel.Formatter">
            <summary>
            Returns the messages formatter used every time
            a message is sent.
            </summary>
            <remarks>
            If a message has a formatter, it's the one used
            when it's sent.
            </remarks>
        </member>
        <member name="P:Trx.Messaging.Channels.IChannel.Logger">
            <summary>
            It returns or sets the logger associated to the channel.
            </summary>
        </member>
        <member name="P:Trx.Messaging.Channels.IChannel.LoggerName">
            <summary>
            It returns or sets the logger name associated to the channel.
            </summary>
        </member>
        <member name="P:Trx.Messaging.Channels.IChannel.Name">
            <summary>
            It returns or sets the channel name.
            </summary>
        </member>
        <member name="P:Trx.Messaging.Channels.IChannel.IsConnected">
            <summary>
            Tells if the channel is connected.
            </summary>
        </member>
        <member name="P:Trx.Messaging.Channels.IChannel.MessageProcessor">
            <summary>
            Returns or sets the received messages processor.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Channels.IFilteredChannel.AddFilter(Trx.Messaging.Channels.IMessageFilter)">
            <summary>
            
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:Trx.Messaging.Channels.IFilteredChannel.RemoveFilter(Trx.Messaging.Channels.IMessageFilter)">
            <summary>
            
            </summary>
            <param name="filter"></param>
        </member>
        <member name="P:Trx.Messaging.Channels.IFilteredChannel.IncomingFilters">
            <summary>
            
            </summary>
        </member>
        <member name="P:Trx.Messaging.Channels.IFilteredChannel.OutgoingFilters">
            <summary>
            
            </summary>
        </member>
        <member name="F:Trx.Messaging.Channels.TcpChannel.DEFAULT_RECONNECT_INTERVAL">
            <summary>
            Default reconnection interval (in milliseconds).
            </summary>
            <remarks>
            When the reconnection interval has elapsed, and the channel
            doesn't have communications and must start a connection
            request, it does it.
            </remarks>
        </member>
        <member name="F:Trx.Messaging.Channels.TcpChannel.DEFAULT_INACTIVITY_INTERVAL">
            <summary>
            Default innactivity reception interval (in milliseconds).
            </summary>
            <remarks>
            If in the indicated interval doesn't arrives data from
            the remote system, the channel hang up the connection and
            it tries to reconnect whether it's configurated to do so.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.Channels.TcpChannel.#ctor(Trx.Messaging.IMessageFormatter)">
            <summary>
            It initializes a new instance of <see cref="T:Trx.Messaging.Channels.TcpChannel"/> class.
            </summary>
            <param name="formatter">
            It's the messages formatter to use.
            </param>
        </member>
        <member name="M:Trx.Messaging.Channels.TcpChannel.#ctor(Trx.Messaging.IMessageFormatter,System.String,System.Int32)">
            <summary>
            It initializes a new instance of <see cref="T:Trx.Messaging.Channels.TcpChannel"/> class,
            and tries to connect to the indicated host and port.
            </summary>
            <param name="formatter">
            It's the messages formatter to use.
            </param>
            <param name="hostName">
            It's the host's name to which it tries to connect.
            </param>
            <param name="port">
            It's the port number in the host to which it tries to connect.
            </param>
            <exception cref="T:System.ArgumentNullException">
            hostName is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            port isn't in the defined range by <see cref="F:System.Net.IPEndPoint.MinPort"/>
            and <see cref="F:System.Net.IPEndPoint.MaxPort"/>.
            </exception>
        </member>
        <member name="M:Trx.Messaging.Channels.TcpChannel.Finalize">
            <summary>
            It destroys the channel.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Channels.TcpChannel.OnError(System.Exception)">
            <summary>
            It fires the <see cref="E:Trx.Messaging.Channels.TcpChannel.Error"/> event.
            </summary>
            <param name="exception">
            It's the exception the error made.
            </param>
        </member>
        <member name="M:Trx.Messaging.Channels.TcpChannel.OnReceive(System.Object)">
            <summary>
            It invokes the message processors and fires the
            <see cref="E:Trx.Messaging.Channels.TcpChannel.Receive"/> event.
            </summary>
            <param name="state">
            It's the received message.
            </param>
        </member>
        <member name="M:Trx.Messaging.Channels.TcpChannel.OnConnected(System.Object)">
            <summary>
            It fires the <see cref="E:Trx.Messaging.Channels.TcpChannel.Connected"/> event.
            </summary>
            <param name="state">
            Not used.
            </param>
        </member>
        <member name="M:Trx.Messaging.Channels.TcpChannel.OnDisconnected">
            <summary>
            It fires the <see cref="E:Trx.Messaging.Channels.TcpChannel.Disconnected"/> event.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Channels.TcpChannel.BeginBind(System.Object)">
            <summary>
            It begins the association of a channel with a connection accepted
            by a listener.
            </summary>
            <param name="connectionData">
            It's the data of the connection accepted by
            the listener.
            </param>
        </member>
        <member name="M:Trx.Messaging.Channels.TcpChannel.EndBind">
            <summary>
            It ends the association of a channel with a connection accepted
            by a listener.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Channels.TcpChannel.Dispose(System.Boolean)">
            <summary>
            It disposes the object.
            </summary>
            <param name="disposing">
            It indicates with a true logical value the object is
            disposing explicitly throught the Dispose
            method invocation.
            </param>
        </member>
        <member name="M:Trx.Messaging.Channels.TcpChannel.Dispose">
            <summary>
            It disposes the object.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Channels.TcpChannel.Connect(System.String,System.Int32)">
            <summary>
            It connects the channel to the remote system  with the
            objective of interchanging messages
            </summary>
            <param name="hostName">
            It's the name or IP address of the remote system.
            </param>
            <param name="port">
            It's the port in the remote system to which you wish to connect.
            </param>
            <returns>
            Returns true if connection has been started, otherwise
            returns false.
            </returns>
        </member>
        <member name="M:Trx.Messaging.Channels.TcpChannel.Connect">
            <summary>
            It starts the connection of the channel with the remote system.
            </summary>
            <returns>
            Returns true if connection has been started, otherwise
            returns false.
            </returns>
        </member>
        <member name="M:Trx.Messaging.Channels.TcpChannel.OnTimerTick(System.Object)">
            <summary>
            This method receives the events from the channel timer.
            </summary>
            <param name="state">
            Not used.
            </param>
            <remarks>
            The timer's event is received when reconnection is required, or when the 
            given interval of time has been fulfilled and no messages has been received
             from the remote system. 
            </remarks>
        </member>
        <member name="M:Trx.Messaging.Channels.TcpChannel.DataLengthHeaderLength(System.Boolean)">
            <summary>
            It informs the length of the packet length indicator.
            </summary>
            <param name="formatting">
            true if we're formatting, false if we're receiving a message.
            </param>
            <returns>
            The length of the packet length indicator.
            </returns>
        </member>
        <member name="M:Trx.Messaging.Channels.TcpChannel.ApplyIncomingFilters(Trx.Messaging.Message)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Trx.Messaging.Channels.TcpChannel.ApplyOutgoingFilters(Trx.Messaging.Message)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Trx.Messaging.Channels.TcpChannel.GetDataLength(Trx.Messaging.ParserContext@,System.Boolean@)">
            <summary>
            Analyse from the parser context the length of the data packet
            to be processed.
            </summary>
            <param name="parserContext">
            It's the parser context which holds the information of the
            packet length.
            </param>
            <param name="lengthConsumed">
            Used to indicate data length was consumed.
            </param>
            <returns>
            It's the data packet length which can be turned into a
            message.
            </returns>
            <remarks>
            This method consumes data from the parser context.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.Channels.TcpChannel.NullDataLengthReceived(System.Net.Sockets.Socket)">
            <summary>
            It's a method called by the reception routine, when an equal or
            less than zero packet length indicator has been received.
            </summary>
            <param name="socket">
            It's the socket holded whith the remote system.
            </param>
        </member>
        <member name="M:Trx.Messaging.Channels.TcpChannel.PrepareMessageRead">
            <summary>
            Initializes the reading of a new message.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Channels.TcpChannel.CreateSocketAndStartConnection">
            <summary>
            It starts a connection request.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Channels.TcpChannel.HandleExceptionAndTryReconnection(System.Exception)">
            <summary>
            It handles an error according to the kind of exception which was
            generated, starting a reconnection if necessary.
            </summary>
            <param name="e">
            It's the generated exception because of the catched error.
            </param>
        </member>
        <member name="M:Trx.Messaging.Channels.TcpChannel.AsyncReadRequestHandler(System.IAsyncResult)">
            <summary>
            It's the asynchronous reading handler.
            </summary>
            <param name="asyncResult">
            It's the result of the asynchronous reading.
            </param>
        </member>
        <member name="M:Trx.Messaging.Channels.TcpChannel.ComputeNextReconnectionInterval">
            <summary>
            Compute next reconnection attempt interval.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Channels.TcpChannel.AsyncConnectionRequestHandler(System.IAsyncResult)">
            <summary>
            It's the handler of the asynchronous connection request.
            </summary>
            <param name="asyncResult">
            It's the result of the asynchronous connection request.
            </param>
        </member>
        <member name="M:Trx.Messaging.Channels.TcpChannel.Connect(System.Net.IPEndPoint)">
            <summary>
            Connects the channel to the remote system
            </summary>
            <param name="remoteEndPoint">
            It represents the connection point to the remote system.
            </param>
            <returns>
            Returns true if connection has been started, otherwise
            returns false.
            </returns>
        </member>
        <member name="M:Trx.Messaging.Channels.TcpChannel.Close">
            <summary>
            Close the connection, if exists, stablished with
            the remote system.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Channels.TcpChannel.Close(System.String)">
            <summary>
            Close the connection, if exists, stablished with
            the remote system.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Channels.TcpChannel.UpdateDataLengthHeader(Trx.Messaging.FormatterContext@)">
            <summary>
            Updates the data length to be sent to the remote system.
            </summary>
            <param name="formatterContext">
            It's the message formatter context.
            </param>
        </member>
        <member name="M:Trx.Messaging.Channels.TcpChannel.RemovePreamble(Trx.Messaging.ParserContext@)">
            <summary>
            
            </summary>
            <param name="parserContext"></param>
        </member>
        <member name="M:Trx.Messaging.Channels.TcpChannel.Send(Trx.Messaging.Message)">
            <summary>
            It sends the specified message to the remote system.
            </summary>
            <param name="message">
            It's the message to be sent.
            </param>
        </member>
        <member name="M:Trx.Messaging.Channels.TcpChannel.AddFilter(Trx.Messaging.Channels.IMessageFilter)">
            <summary>
            
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:Trx.Messaging.Channels.TcpChannel.RemoveFilter(Trx.Messaging.Channels.IMessageFilter)">
            <summary>
            
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:Trx.Messaging.Channels.TcpChannel.SetCommonProperties(Trx.Messaging.Channels.TcpChannel)">
            <summary>
            
            </summary>
            <param name="clone"></param>
        </member>
        <member name="M:Trx.Messaging.Channels.TcpChannel.Clone">
            <summary>
            Clones the channel.
            </summary>
            <returns>
            The clone.
            </returns>
        </member>
        <member name="P:Trx.Messaging.Channels.TcpChannel.SessionHeader">
            <summary>
            Get or set session header.
            </summary>
        </member>
        <member name="P:Trx.Messaging.Channels.TcpChannel.Reconnect">
            <summary>
            It sets or returns the flag indicating if the channel attempts a reconnection
            if the connection is lost.
            </summary>
        </member>
        <member name="P:Trx.Messaging.Channels.TcpChannel.HexadecimalSessionHeader">
            <summary>
            Set session header, but can be specified in hex (i.e. 840 = 383430).
            </summary>
        </member>
        <member name="P:Trx.Messaging.Channels.TcpChannel.Formatter">
            <summary>
            It returns the messages formatter used each time a
            message is sent.
            </summary>
            <remarks>
            If a message has a formatter, will be used at the moment
            to send it.
            </remarks>
        </member>
        <member name="P:Trx.Messaging.Channels.TcpChannel.Logger">
            <summary>
            It returns the logger used by the class.
            </summary>
        </member>
        <member name="P:Trx.Messaging.Channels.TcpChannel.LoggerName">
            <summary>
            It returns the name of the logger used by the class.
            </summary>
        </member>
        <member name="P:Trx.Messaging.Channels.TcpChannel.Name">
            <summary>
            It returns or sets the channel name.
            </summary>
        </member>
        <member name="P:Trx.Messaging.Channels.TcpChannel.HostName">
            <summary>
            It returns or sets the remote server name to which the channel
            tries to connect.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The channel is active, isn't possible to modify the property.
            </exception>
        </member>
        <member name="P:Trx.Messaging.Channels.TcpChannel.Port">
            <summary>
            It returns or sets the remote server port to which the channel
            tries to connect.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The channel is active, isn't possible to modify the property.
            </exception>
        </member>
        <member name="P:Trx.Messaging.Channels.TcpChannel.Enabled">
            <summary>
            It indicates whether the channel is enabled, I mean, whether it's
            connected or is trying to reconnect.
            </summary>
        </member>
        <member name="P:Trx.Messaging.Channels.TcpChannel.MessageProcessor">
            <summary>
            It returns or sets the received messages processor.
            </summary>
        </member>
        <member name="P:Trx.Messaging.Channels.TcpChannel.IncomingFilters">
            <summary>
            It return the incoming filters of the messages.
            </summary>
        </member>
        <member name="P:Trx.Messaging.Channels.TcpChannel.OutgoingFilters">
            <summary>
            It return the outgoing filters of the messages.
            </summary>
        </member>
        <member name="P:Trx.Messaging.Channels.TcpChannel.Family">
            <summary>
            It returns or sets the kind of family of the IP protocol the
            channel uses.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The channel is active, it's not possible to modify the property.
            </exception>
            <exception cref="T:System.ArgumentException">
            It's attempted to assing a family other than
            <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork"/> or
            <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6"/>.
            </exception>
        </member>
        <member name="P:Trx.Messaging.Channels.TcpChannel.IsConnected">
            <summary>
            It informs whether the channel is connected.
            </summary>
        </member>
        <member name="P:Trx.Messaging.Channels.TcpChannel.ReconnectInterval">
            <summary>
            It returns or sets the interval waited by the channel
            before trying a reconnection to the remote host.
            </summary>
            <exception cref="T:System.ArgumentException">
            It's attempted to assign an invalid value to the property.
            </exception>
        </member>
        <member name="P:Trx.Messaging.Channels.TcpChannel.InactivityInterval">
            <summary>
            It returns or sets the interval the channel waits to
            shutdown the connection with the remote host, if data
            hasn't been received in this period.
            </summary>
            <exception cref="T:System.ArgumentException">
            It's attempted to assign an invalid value to the property.
            </exception>
        </member>
        <member name="E:Trx.Messaging.Channels.TcpChannel.Connected">
            <summary>
            It's fired when the channel has been connected.
            </summary>
        </member>
        <member name="E:Trx.Messaging.Channels.TcpChannel.Disconnected">
            <summary>
            It's fired when the channel has been disconnected.
            </summary>
        </member>
        <member name="E:Trx.Messaging.Channels.TcpChannel.Receive">
            <summary>
            It's fired when a message has been received.
            </summary>
        </member>
        <member name="E:Trx.Messaging.Channels.TcpChannel.Error">
            <summary>
            It's fired when an error has been catched in the internal
            channel processing.
            </summary>
            <remarks>
            This event is received from the channel when a catched error
            causes its inhabilitation, it's necessary to call
            Connect again to use it.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.Channels.TwoBytesNboHeaderChannel.#ctor(Trx.Messaging.IMessageFormatter)">
            <summary>
            It initializes a new instance of <see cref="T:Trx.Messaging.Channels.TwoBytesNboHeaderChannel"/> class.
            </summary>
            <param name="formatter">
            It's the messages formatter to use.
            </param>
        </member>
        <member name="M:Trx.Messaging.Channels.TwoBytesNboHeaderChannel.#ctor(Trx.Messaging.IMessageFormatter,System.String,System.Int32)">
            <summary>
            It initializes a new instance of <see cref="T:Trx.Messaging.Channels.TwoBytesNboHeaderChannel"/> class,
            and tries to connect to the indicated host and port.
            </summary>
            <param name="formatter">
            It's the messages formatter to use.
            </param>
            <param name="hostName">
            It's the host's name to which it tries to connect.
            </param>
            <param name="port">
            It's the port number in the host to which it tries to connect.
            </param>
        </member>
        <member name="M:Trx.Messaging.Channels.TwoBytesNboHeaderChannel.DataLengthHeaderLength(System.Boolean)">
            <summary>
            It informs the length of the packet length indicator.
            </summary>
            <param name="formatting">
            true if we're formatting, false if we're receiving a message.
            </param>
            <returns>
            The length of the packet length indicator.
            </returns>
        </member>
        <member name="M:Trx.Messaging.Channels.TwoBytesNboHeaderChannel.UpdateDataLengthHeader(Trx.Messaging.FormatterContext@)">
            <summary>
            Updates the data length to be sent to the remote system.
            </summary>
            <param name="formatterContext">
            It's the message formatter context.
            </param>
        </member>
        <member name="M:Trx.Messaging.Channels.TwoBytesNboHeaderChannel.GetDataLength(Trx.Messaging.ParserContext@,System.Boolean@)">
            <summary>
            Analyse from the parser context the length of the data packet
            to be processed.
            </summary>
            <param name="parserContext">
            It's the parser context which holds the information of the
            packet length.
            </param>
            <param name="lengthConsumed">
            Used to indicate data length was consumed.
            </param>
            <returns>
            It's the data packet length which can be turned into a
            message.
            </returns>
            <remarks>
            This method consumes data from the parser context.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.Channels.TwoBytesNboHeaderChannel.Clone">
            <summary>
            Clones the channel.
            </summary>
            <returns>
            The clone.
            </returns>
        </member>
        <member name="T:Trx.Messaging.Channels.ReceiveEventArgs">
            <summary>
            This class defines the arguments of the events which notifies
            the message reception.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Channels.ReceiveEventArgs.#ctor(Trx.Messaging.Message)">
            <summary>
            Creates and initializes a new instance of type <see cref="T:Trx.Messaging.Channels.ReceiveEventArgs"/>.
            </summary>
            <param name="message">
            It's the received message.
            </param>
            <exception cref="T:System.ArgumentNullException">
            message holds a null reference.
            </exception>
        </member>
        <member name="P:Trx.Messaging.Channels.ReceiveEventArgs.Message">
            <summary>
            It returns the received message.
            </summary>
        </member>
        <member name="T:Trx.Messaging.BitMapField">
            <summary>
            Representa un campo de mensajes que es un mapa de bits.
            </summary>
            <remarks>
            Normalmente es utilizado para informar cuales campos están presentes
            en un mensaje, con el objetivo de que el parser lo pueda analizar.
            Gracias a los mapas de bits es posible generar mensajes cuyos campos
            pueden o no estar presentes.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.BitMapField.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Construye un nuevo mapa de bits.
            </summary>
            <param name="fieldNumber">
            Es el número del campo en el mensaje.
            </param>
            <param name="lowerFieldNumber">
            Es el número de campo menor que el mapa de bits puede anunciar.
            </param>
            <param name="upperFieldNumber">
            Es el número de campo mayor que el mapa de bits puede anunciar.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="lowerFieldNumber"/> debe ser mayor que cero y menor
            o igual a <paramref name="upperFieldNumber"/>.
            </exception>
        </member>
        <member name="M:Trx.Messaging.BitMapField.#ctor(System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Construye un nuevo mapa de bits.
            </summary>
            <param name="fieldNumber">
            Es el número del campo en el mensaje.
            </param>
            <param name="lowerFieldNumber">
            Es el número de campo menor que el mapa de bits puede anunciar.
            </param>
            <param name="upperFieldNumber">
            Es el número de campo mayor que el mapa de bits puede anunciar.
            </param>
            <param name="value">
            Es el valor que toma el mapa de bits.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="lowerFieldNumber"/> debe ser menor o igual a
            <paramref name="upperFieldNumber"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            La cantidad de bytes del valor que debe tomar el nuevo mapa de bits
            no concuerda con los que se calculan en base a los parámetros
            <paramref name="lowerFieldNumber"/> y <paramref name="upperFieldNumber"/>.
            </exception>
        </member>
        <member name="M:Trx.Messaging.BitMapField.#ctor(System.Int32,Trx.Messaging.BitMapField)">
            <summary>
            Construye un mapa de bits exactamente igual a otro dado.
            </summary>
            <param name="fieldNumber">
            Es el número del campo en el mensaje.
            </param>
            <param name="bitmap">
            Es el mapa de bits que se toma como referencia para crear uno nuevo.
            </param>
        </member>
        <member name="M:Trx.Messaging.BitMapField.SetFieldValue(System.Byte[])">
            <summary>
            Asigna el valor del campo.
            </summary>
        </member>
        <member name="M:Trx.Messaging.BitMapField.Set(System.Int32,System.Boolean)">
            <summary>
            Asigna un valor al bit que representa el campo indicado.
            </summary>
            <param name="fieldNumber">
            Es el bit que representa al campo indicado por el parámetro.
            </param>
            <param name="value">
            Es el valor a asignar.
            </param>
        </member>
        <member name="M:Trx.Messaging.BitMapField.Clear">
            <summary>
            Asigna <see langref="false"/> a todos los bits del bitmap.
            </summary>
        </member>
        <member name="M:Trx.Messaging.BitMapField.IsSet(System.Int32)">
            <summary>
            Consulta el valor del bit que representa el campo indicado.
            </summary>
            <param name="fieldNumber">
            Es el bit que representa al campo indicado por el parámetro.
            </param>
            <returns>
            El valor del bit.
            </returns>
        </member>
        <member name="M:Trx.Messaging.BitMapField.GetBytes">
            <summary>
            Retorna como un array de bytes el valor del mapa de bits.
            </summary>
            <returns>
            Un array de bytes.
            </returns>
        </member>
        <member name="M:Trx.Messaging.BitMapField.Clone">
            <summary>
            Construye una copia exacta del mapa de bits.
            </summary>
            <returns>
            Una copia exacta del mapa de bits.
            </returns>
        </member>
        <member name="M:Trx.Messaging.BitMapField.ToString">
            <summary>
            Convierte en una cadena de caracteres el valor del mapa de bits.
            </summary>
            <returns>
            Una cadena de caracteres que representan el valor del mapa de bits.
            </returns>
        </member>
        <member name="M:Trx.Messaging.BitMapField.XmlRendering(log4net.ObjectRenderer.RendererMap)">
            <summary>
            Retorna una clase que puede representar en formato XML el mapa de bits.
            </summary>
            <param name="renderingMap">
            Es un mapa con todas las clases que representan objetos.
            </param>
            <returns>
            Una clase que puede representar en formato XML el mapa de bits.
            </returns>
        </member>
        <member name="M:Trx.Messaging.BitMapField.NewComponent">
            <summary>
            Crea un nuevo componente de mensajería de tipo mapa de bits.
            </summary>
            <returns>
            Un nuevo componente de mensajería de tipo mapa de bits.
            </returns>
        </member>
        <member name="P:Trx.Messaging.BitMapField.LowerFieldNumber">
            <summary>
            Es el número de campo menor que el mapa de bits puede anunciar.
            </summary>
        </member>
        <member name="P:Trx.Messaging.BitMapField.UpperFieldNumber">
            <summary>
            Es el número de campo mayor que el mapa de bits puede anunciar.
            </summary>
        </member>
        <member name="P:Trx.Messaging.BitMapField.Item(System.Int32)">
            <summary>
            Retorna o asigna el valor del bit que representa al campo indicado.
            </summary>
        </member>
        <member name="P:Trx.Messaging.BitMapField.Value">
            <summary>
            Retorna o asigna el valor del mapa de bits.
            </summary>
        </member>
        <member name="T:Trx.Utilities.StringUtilities">
            <summary>
            String handling utilities.
            </summary>
        </member>
        <member name="M:Trx.Utilities.StringUtilities.#ctor">
            <remarks>
            It prevents the instantiation of <see cref="T:Trx.Utilities.StringUtilities"/> class.
            </remarks>
        </member>
        <member name="M:Trx.Utilities.StringUtilities.Count(System.String,System.Char)">
            <summary>
            It counts the number of times that a given caracter appears in a string.
            </summary>
            <param name="source">
            The string where the character is counted.
            </param>
            <param name="find">
            The given character.
            </param>
            <returns>
            The number of times that a given caracter appears in a string.
            </returns>
        </member>
        <member name="M:Trx.Utilities.StringUtilities.IsNullOrEmpty(System.String)">
            <summary>
            Indicates whether or not the specified string is null or an empty string.
            </summary>
            <param name="value">
            The value to check.
            </param>
            <returns>
            true if <paramref name="value" /> is null or an empty string, otherwise false.
            </returns>
        </member>
        <member name="M:Trx.Utilities.StringUtilities.IsNumber(System.String)">
            <summary>
            Check a string and indicates if it's a number.
            </summary>
            <param name="data">
            It's the string to check.
            </param>
            <returns>
            True if the given string is a number, otherwise false.
            </returns>
        </member>
        <member name="M:Trx.Utilities.StringUtilities.ConvertEmptyToNull(System.String)">
            <summary>
            Converts an empty string to null.
            </summary>
            <param name="value">
            The value to convert.
            </param>
            <returns>
            null if <paramref name="value" /> is an empty string or null,
            otherwise it returns <paramref name="value" />.
            </returns>
        </member>
        <member name="M:Trx.Utilities.StringUtilities.LeftOf(System.String,System.Char)">
            <summary>
            Search for the character indicated by the parameter <paramref name="c"/>
            in the string of characters indicated by the parameter <paramref name="source"/>,
            and it returns the substring that is to its left.
            </summary>
            <param name="source">
            It is the string to search for <paramref name="c"/>.
            </param>
            <param name="c">
            The character to find in <paramref name="source"/>
            </param>
            <returns>
            The substring to the left of <paramref name="c"/>.
            If <paramref name="c"/> isn't found, he function returns <paramref name="source"/>.
            </returns>
        </member>
        <member name="M:Trx.Utilities.StringUtilities.LeftOf(System.String,System.Char,System.Int32)">
            <summary>
            Search for the nth character indicated by the parameter <paramref name="c"/>
            in the string of characters indicated by the parameter <paramref name="source"/>,
            and it returns the substring that is to its left.
            </summary>
            <param name="source">
            It is the string to search for <paramref name="c"/>.
            </param>
            <param name="c">
            The character to find in <paramref name="source"/>
            </param>
            <param name="n">
            The nth occurrence of <paramref name="c"/>.
            </param>
            <returns>
            The substring to the left of <paramref name="c"/>.
            If <paramref name="c"/> isn't found, he function returns <paramref name="source"/>.
            </returns>
        </member>
        <member name="M:Trx.Utilities.StringUtilities.RightOf(System.String,System.Char)">
            <summary>
            Search for the character indicated by the parameter <paramref name="c"/>
            in the string of characters indicated by the parameter <paramref name="source"/>,
            and it returns the substring that is to its right.
            </summary>
            <param name="source">
            It is the string to search for <paramref name="c"/>.
            </param>
            <param name="c">
            The character to find in <paramref name="source"/>
            </param>
            <returns>
            The substring to the right of <paramref name="c"/>.
            If <paramref name="c"/> isn't found, he function returns <paramref name="source"/>.
            </returns>
        </member>
        <member name="M:Trx.Utilities.StringUtilities.RightOf(System.String,System.Char,System.Int32)">
            <summary>
            Search for the nth character indicated by the parameter <paramref name="c"/>
            in the string of characters indicated by the parameter <paramref name="source"/>,
            and it returns the substring that is to its right.
            </summary>
            <param name="source">
            It is the string to search for <paramref name="c"/>.
            </param>
            <param name="c">
            The character to find in <paramref name="source"/>
            </param>
            <param name="n">
            The nth occurrence of <paramref name="c"/>.
            </param>
            <returns>
            The substring to the right of <paramref name="c"/>.
            If <paramref name="c"/> isn't found, he function returns <paramref name="source"/>.
            </returns>
        </member>
        <member name="M:Trx.Utilities.StringUtilities.LeftOfRightmostOf(System.String,System.Char)">
            <summary>
            Search for the last character indicated by the parameter <paramref name="c"/>
            in the string of characters indicated by the parameter <paramref name="source"/>,
            and it returns the substring that is to its left.
            </summary>
            <param name="source">
            It is the string to search for <paramref name="c"/>.
            </param>
            <param name="c">
            The character to find in <paramref name="source"/>
            </param>
            <returns>
            The substring to the left of <paramref name="c"/>.
            If <paramref name="c"/> isn't found, he function returns <paramref name="source"/>.
            </returns>
        </member>
        <member name="M:Trx.Utilities.StringUtilities.RightOfRightmostOf(System.String,System.Char)">
            <summary>
            Search for the last character indicated by the parameter <paramref name="c"/>
            in the string of characters indicated by the parameter <paramref name="source"/>,
            and it returns the substring that is to its right.
            </summary>
            <param name="source">
            It is the string to search for <paramref name="c"/>.
            </param>
            <param name="c">
            The character to find in <paramref name="source"/>
            </param>
            <returns>
            The substring to the right of <paramref name="c"/>.
            If <paramref name="c"/> isn't found, he function returns <paramref name="source"/>.
            </returns>
        </member>
        <member name="M:Trx.Utilities.StringUtilities.Between(System.String,System.Char,System.Char)">
            <summary>
            It returns the substring of characters that is between two given characters.
            </summary>
            <param name="source">
            It is the string of characters in which the indicated substring is searched.
            </param>
            <param name="first">
            It is the first character of the searched substring.
            </param>
            <param name="last">
            It is the last character of the searched substring.
            </param>
            <returns>
            The substring of characters that is between two given characters.
            </returns>
            <remarks>
            If <paramref name="first"/> or <paramref name="last"/> are not
            found, an empty string is returned.
            </remarks>
        </member>
        <member name="M:Trx.Utilities.StringUtilities.Between(System.String,System.String,System.String)">
            <summary>
            It returns the substring of characters that is between two given strings.
            </summary>
            <param name="source">
            It is the string of characters in which the indicated substring is searched.
            </param>
            <param name="first">
            It is the firts string of the searched substring.
            </param>
            <param name="last">
            It is the last string of the searched substring.
            </param>
            <returns>
            The substring of characters that is between two given strings.
            </returns>
            <remarks>
            If <paramref name="first"/> or <paramref name="last"/> are not
            found, an empty string is returned.
            </remarks>
        </member>
        <member name="M:Trx.Utilities.StringUtilities.GetPrintableBuffer(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a printable string containing a human readable
            representation of the specified data.
            </summary>
            <param name="prefix">
            Prefix for the string to be returned.
            </param>
            <param name="data">
            Data to be represented.
            </param>
            <param name="offset">
            Start offset within data bounds.
            </param>
            <param name="len">
            Length of the data to be represented.
            </param>
            <returns>
            A printable string with a human readable representation of
            the specified data.
            </returns>
        </member>
        <member name="M:Trx.Utilities.StringUtilities.GetPrintableBuffer(System.String,System.Byte[])">
            <summary>
            Returns a printable string containing a human readable
            representation of the specified data.
            </summary>
            <param name="prefix">
            Prefix for the string to be returned.
            </param>
            <param name="data">
            Data to be represented.
            </param>
            <returns>
            A printable string with a human readable representation of
            the specified data.
            </returns>
        </member>
        <member name="T:Trx.Messaging.VariableLengthManager">
            <summary>
            Implementa la clase que permite administrar largos variables de
            datos.
            </summary>
        </member>
        <member name="T:Trx.Messaging.LengthManager">
            <summary>
            Define la clase base que administra e instrumenta el largo de los
            datos de los componentes de mensajería.
            </summary>
        </member>
        <member name="M:Trx.Messaging.LengthManager.#ctor(System.Int32)">
            <summary>
            Construye un nuevo administrador de largo.
            </summary>
            <param name="maximumLength">
            Es el largo máximo que pueden alcanzar los datos del campo.
            </param>
        </member>
        <member name="M:Trx.Messaging.LengthManager.WriteLength(Trx.Messaging.MessagingComponent,System.Int32,System.Int32,Trx.Messaging.FormatterContext@)">
            <summary>
            Escribe el largo de los datos del campo en el contexto de
            formateo del mensaje.
            </summary>
            <param name="component">
            Es el componente de mensajería del que se está escribiendo
            el largo de sus datos.
            </param>
            <param name="dataLength">
            Es el largo de los datos del componente (puede diferir del largo
            de los datos obtenidos de <paramref name="component"/>, pues pueden
            estar rellenados)
            </param>
            <param name="encodedLength">
            Es el largo de los datos codificados.
            </param>
            <param name="formatterContext">
            Es el contexto de formateo del mensaje.
            </param>
        </member>
        <member name="M:Trx.Messaging.LengthManager.WriteLengthTrailer(Trx.Messaging.MessagingComponent,System.Int32,System.Int32,Trx.Messaging.FormatterContext@)">
            <summary>
            Escribe en el contexto de formateo del mensaje al final de
            los datos del campo, el indicador de fin del largo del campo.
            </summary>
            <param name="component">
            Es el componente de mensajería del que se está escribiendo
            el largo de sus datos.
            </param>
            <param name="dataLength">
            Es el largo de los datos del componente (puede diferir del largo
            de los datos obtenidos de <paramref name="component"/>, pues pueden
            estar rellenados)
            </param>
            <param name="encodedLength">
            Es el largo de los datos codificados.
            </param>
            <param name="formatterContext">
            Es el contexto de formateo del mensaje.
            </param>
        </member>
        <member name="M:Trx.Messaging.LengthManager.EnoughData(Trx.Messaging.ParserContext@)">
            <summary>
            Indica si existen datos suficientes como para leer el largo
            de los datos desde el contexto de análisis y construcción de mensajes.
            </summary>
            <param name="parserContext">
            Es el contexto de análisis y construcción de mensajes.
            </param>
            <returns>
            <see langref="true"/> en caso de que existan datos suficientes
            como para leer el largo de los datos, <see langref="false"/> en caso
            contrario.
            </returns>
        </member>
        <member name="M:Trx.Messaging.LengthManager.ReadLength(Trx.Messaging.ParserContext@)">
            <summary>
            Lee desde el contexto de análisis y construcción de mensajes,
            el largo de los datos.
            </summary>
            <param name="parserContext">
            Es el contexto de análisis y construcción de mensajes.
            </param>
            <returns>
            El largo de los datos.
            </returns>
        </member>
        <member name="M:Trx.Messaging.LengthManager.ReadLengthTrailer(Trx.Messaging.ParserContext@)">
            <summary>
            Lee el indicador de fin de largo del componente de mensajería.
            </summary>
            <param name="parserContext">
            Es el contexto de análisis y construcción de mensajes.
            </param>
        </member>
        <member name="P:Trx.Messaging.LengthManager.MaximumLength">
            <summary>
            Retorna el largo máximo de los datos.
            </summary>
        </member>
        <member name="M:Trx.Messaging.VariableLengthManager.#ctor(System.Int32,System.Int32,Trx.Messaging.ILengthEncoder)">
            <summary>
            Construye un nuevo administrador de largos variable.
            </summary>
            <param name="minimumLength">
            Es el largo mínimo que deben tener los datos.
            </param>
            <param name="maximumLength">
            Es el largo máximo que pueden alcanzar los datos.
            </param>
            <param name="lengthEncoder">
            Es el codificador/decodificador del largo.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Se ha indicado un valor incorrecto para el largo mínimo
            de los datos.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Se ha indicado un codificador/decodificador inválido.
            </exception>
        </member>
        <member name="M:Trx.Messaging.VariableLengthManager.WriteLength(Trx.Messaging.MessagingComponent,System.Int32,System.Int32,Trx.Messaging.FormatterContext@)">
            <summary>
            Escribe el largo de los datos del campo en el contexto de
            formateo del mensaje.
            </summary>
            <param name="component">
            Es el componente de mensajería del que se está escribiendo
            el largo de sus datos.
            </param>
            <param name="dataLength">
            Es el largo de los datos del componente (puede diferir del largo
            de los datos obtenidos de <paramref name="component"/>, pues pueden
            estar rellenados)
            </param>
            <param name="encodedLength">
            Es el largo de los datos codificados.
            </param>
            <param name="formatterContext">
            Es el contexto de formateo del mensaje.
            </param>
        </member>
        <member name="M:Trx.Messaging.VariableLengthManager.EnoughData(Trx.Messaging.ParserContext@)">
            <summary>
            Indica si existen datos suficientes como para leer el largo
            de los datos desde el contexto de análisis y construcción de mensajes.
            </summary>
            <param name="parserContext">
            Es el contexto de análisis y construcción de mensajes.
            </param>
            <returns>
            <see langref="true"/> en caso de que existan datos suficientes
            como para leer el largo de los datos, <see langref="false"/> en caso
            contrario.
            </returns>
        </member>
        <member name="M:Trx.Messaging.VariableLengthManager.ReadLength(Trx.Messaging.ParserContext@)">
            <summary>
            Lee desde el contexto de análisis y construcción de mensajes,
            el largo de los datos.
            </summary>
            <param name="parserContext">
            Es el contexto de análisis y construcción de mensajes.
            </param>
            <returns>
            El largo de los datos.
            </returns>
            <exception cref="T:Trx.Messaging.MessagingException">
            El largo indicado para los datos no se encuentra
            entre los valores permitidos.
            </exception>
        </member>
        <member name="P:Trx.Messaging.VariableLengthManager.LengthEncoder">
            <summary>
            Retorna el codificador/decodificador del largo.
            </summary>
        </member>
        <member name="P:Trx.Messaging.VariableLengthManager.MinimumLength">
            <summary>
            Retorna el largo mínimo de los datos.
            </summary>
        </member>
        <member name="T:Trx.Messaging.FlowControl.PeerConnectedEventHandler">
            <summary>
            Es el delegado del evento <see cref="E:Trx.Messaging.FlowControl.Peer.Connected"/>.
            </summary>
        </member>
        <member name="T:Trx.Messaging.FlowControl.PeerDisconnectedEventHandler">
            <summary>
            Es el delegado del evento <see cref="E:Trx.Messaging.FlowControl.Peer.Disconnected"/>.
            </summary>
        </member>
        <member name="T:Trx.Messaging.FlowControl.PeerReceiveEventHandler">
            <summary>
            Es el delegado del evento <see cref="E:Trx.Messaging.FlowControl.Peer.Receive"/>.
            </summary>
        </member>
        <member name="T:Trx.Messaging.FlowControl.PeerRequestDoneEventHandler">
            <summary>
            Es el delegado del evento <see cref="E:Trx.Messaging.FlowControl.Peer.RequestDone"/>.
            </summary>
        </member>
        <member name="T:Trx.Messaging.FlowControl.PeerRequestCancelledEventHandler">
            <summary>
            Es el delegado del evento <see cref="E:Trx.Messaging.FlowControl.Peer.RequestCancelled"/>.
            </summary>
        </member>
        <member name="T:Trx.Messaging.FlowControl.PeerErrorEventHandler">
            <summary>
            Es el delegado del evento <see cref="E:Trx.Messaging.FlowControl.Peer.Error"/>.
            </summary>
        </member>
        <member name="T:Trx.Messaging.ConditionalFormatting.SubMessageExpression">
            <summary>
            This class implements the sub field message expression, suitable to access
            inner messages.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.SubMessageExpression.#ctor">
            <summary>
            It initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.SubMessageExpression.#ctor(System.Int32,Trx.Messaging.ConditionalFormatting.IMessageExpression)">
            <summary>
            It initializes a new instance of the class.
            </summary>
            <param name="fieldNumber">
            The field number to get the value.
            </param>
            <param name="messageExpression">
            The sub field message expression.
            </param>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.SubMessageExpression.GetInnerMessage(Trx.Messaging.Message)">
            <summary>
            It returns the inner message located in a field (pointed by
            _fieldNumber) of a given message.
            </summary>
            <param name="message">
            The given message.
            </param>
            <returns>
            The inner message located in a field (pointed by _fieldNumber)
            of a given message.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.SubMessageExpression.GetLeafMessage(Trx.Messaging.ParserContext@,Trx.Messaging.Message)">
            <summary>
            It returns the message.
            </summary>
            <param name="parserContext">
            It's the parser context.
            </param>
            <param name="message">
            The message to get the message field.
            </param>
            <returns>
            The message.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.SubMessageExpression.GetLeafMessage(Trx.Messaging.FormatterContext@,Trx.Messaging.Message)">
            <summary>
            It returns the message.
            </summary>
            <param name="formatterContext">
            It's the context of formatting to be used by the method.
            </param>
            <param name="message">
            The message to get the message field.
            </param>
            <returns>
            The message.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.SubMessageExpression.GetLeafFieldNumber">
            <summary>
            It returns the leaf field number of a message hierarchy.
            </summary>
            <returns>
            The leaf field number.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.SubMessageExpression.GetLeafFieldValueString(Trx.Messaging.ParserContext@,Trx.Messaging.Message)">
            <summary>
            It returns the field value as string.
            </summary>
            <param name="parserContext">
            It's the parser context.
            </param>
            <param name="message">
            The message to get the field.
            </param>
            <returns>
            The field value.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.SubMessageExpression.GetLeafFieldValueString(Trx.Messaging.FormatterContext@,Trx.Messaging.Message)">
            <summary>
            It returns the field value as string.
            </summary>
            <param name="formatterContext">
            It's the context of formatting to be used by the method.
            </param>
            <param name="message">
            The message to get the field.
            </param>
            <returns>
            The field value.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.SubMessageExpression.GetLeafFieldValueBytes(Trx.Messaging.ParserContext@,Trx.Messaging.Message)">
            <summary>
            It returns the field value as a byte array.
            </summary>
            <param name="parserContext">
            It's the parser context.
            </param>
            <param name="message">
            The message to get the field.
            </param>
            <returns>
            The field value.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.SubMessageExpression.GetLeafFieldValueBytes(Trx.Messaging.FormatterContext@,Trx.Messaging.Message)">
            <summary>
            It returns the field value as a byte array.
            </summary>
            <param name="formatterContext">
            It's the context of formatting to be used by the method.
            </param>
            <param name="message">
            The message to get the field.
            </param>
            <returns>
            The field value.
            </returns>
        </member>
        <member name="P:Trx.Messaging.ConditionalFormatting.SubMessageExpression.FieldNumber">
            <summary>
            It returns or sets the field number.
            </summary>
        </member>
        <member name="P:Trx.Messaging.ConditionalFormatting.SubMessageExpression.MessageExpression">
            <summary>
            It returns or sets the sub field message expression.
            </summary>
        </member>
        <member name="T:Trx.Messaging.ConditionalFormatting.FieldValueEqualsStringOperator">
            <summary>
            This class implements the equals operator of two expressions.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.FieldValueEqualsStringOperator.#ctor">
            <summary>
            It initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.FieldValueEqualsStringOperator.#ctor(Trx.Messaging.ConditionalFormatting.IMessageExpression,Trx.Messaging.ConditionalFormatting.StringConstantExpression)">
            <summary>
            It initializes a new instance of the class.
            </summary>
            <param name="messageExpression">
            The message expression, source of the field value of the equality
            operator (left part of the operator).
            </param>
            <param name="valueExpression">
            The value expression of the equality operator (right part of the operator).
            </param>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.FieldValueEqualsStringOperator.EvaluateParse(Trx.Messaging.ParserContext@)">
            <summary>
            Evaluates the expression when parsing a message.
            </summary>
            <param name="parserContext">
            It's the parser context.
            </param>
            <returns>
            A boolean value.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.FieldValueEqualsStringOperator.EvaluateFormat(Trx.Messaging.Field,Trx.Messaging.FormatterContext@)">
            <summary>
            Evaluates the expression when formatting a message.
            </summary>
            <param name="field">
            It's the field to format.
            </param>
            <param name="formatterContext">
            It's the context of formatting to be used by the method.
            </param>
            <returns>
            A boolean value.
            </returns>
        </member>
        <member name="P:Trx.Messaging.ConditionalFormatting.FieldValueEqualsStringOperator.ValueExpression">
            <summary>
            It returns or sets the value expression of the equality operator (right
            part of the operator).
            </summary>
        </member>
        <member name="T:Trx.Messaging.ConditionalFormatting.ExpressionCompileException">
            <summary>
            This class implements the exception raised when a expression
            parser locates an error.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.ExpressionCompileException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Trx.Messaging.ConditionalFormatting.ExpressionCompileException"/> 
            class.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.ExpressionCompileException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Trx.Messaging.ConditionalFormatting.ExpressionCompileException"/> 
            class with a descriptive message.
            </summary>
            <param name="message">
            A descriptive message to include with the exception.
            </param>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.ExpressionCompileException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Trx.Messaging.ConditionalFormatting.ExpressionCompileException"/> 
            class with a descriptive message.
            </summary>
            <param name="message">
            A descriptive message to include with the exception.
            </param>
            <param name="lastParsedTokenIndex">
            The index of the last parsed token.
            </param>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.ExpressionCompileException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Trx.Messaging.ConditionalFormatting.ExpressionCompileException"/> 
            class with the specified descriptive message and inner exception.
            </summary>
            <param name="message">
            A descriptive message to include with the exception.
            </param>
            <param name="innerException">
            A nested exception that is the cause of the current exception.
            </param>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.ExpressionCompileException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Trx.Messaging.ConditionalFormatting.ExpressionCompileException"/> 
            class with serialized data.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data
            about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.
            </param>
        </member>
        <member name="P:Trx.Messaging.ConditionalFormatting.ExpressionCompileException.LastParsedTokenIndex">
            <summary>
            It returns or sets the index of the last parsed token.
            </summary>
        </member>
        <member name="T:Trx.Messaging.IMessageHeaderFormatter">
            <summary>
            Define la interfaz que debe implementar una clase para
            poder ser empleada como formateador de cabezales de mensajes.
            </summary>
        </member>
        <member name="M:Trx.Messaging.IMessageHeaderFormatter.Format(Trx.Messaging.MessageHeader,Trx.Messaging.FormatterContext@)">
            <summary>
            Formatea un cabezal.
            </summary>
            <param name="header">
            Es el cabezal a formatear.
            </param>
            <param name="formatterContext">
            Es el contexto de formateo que debe ser empleado.
            </param>
        </member>
        <member name="M:Trx.Messaging.IMessageHeaderFormatter.Parse(Trx.Messaging.ParserContext@)">
            <summary>
            Analiza la información contenida en un contexto de analisis y construcción
            de mensajes, y construye en base a ella un nuevo cabezal para el que el
            formateador se ha construido.
            </summary>
            <param name="parserContext">
            Es el contexto de analisis y construcción de mensajes.
            </param>
            <returns>
            El nuevo cabezal contruido a partir de la información contenida en el
            contexto de análisis y construcción de mensajes.
            </returns>
        </member>
        <member name="T:Trx.Messaging.HexadecimalBinaryEncoder">
            <summary>
            Implementa una clase capaz de formatear y analizar componentes de
            mensajería, utilizando los bytes en crudo como formato de datos.
            Cada byte de la información a formatear es tomado en su representación
            hexadecimal y almacenado en dos bytes, cada uno guardando el
            correspondiente dígito hexadecimal de la información. A modo de ejemplo
            si un byte contiene el valor decimal '58', su representación hexadecimal
            es '3A', cuando el codificador formatee esta información producirá
            dos bytes, el primero con un '3' (valor decimal 51, hexadecimal
            33), y el segundo con una 'A' (valor decimal 65, hexadecimal 41).
            La información producida por esta clase siempre contendrá datos
            de tipo ASCII sin caracteres de control.
            </summary>
            <remarks>
            This class implements the Singleton pattern, you must use
            <see cref="M:Trx.Messaging.HexadecimalBinaryEncoder.GetInstance"/> to acquire the instance.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.HexadecimalBinaryEncoder.#ctor">
            <summary>
            Construye una nueva instancia del codificador. Le damos el nivel
            del visibilidad 'private' para forzar al usuario a emplear
            <see cref="M:Trx.Messaging.HexadecimalBinaryEncoder.GetInstance"/>.
            </summary>
        </member>
        <member name="M:Trx.Messaging.HexadecimalBinaryEncoder.GetInstance">
            <summary>
            Retorna una instancia de la clase <see cref="T:Trx.Messaging.HexadecimalBinaryEncoder"/>.
            </summary>
            <returns>
            Una instancia de la clase <see cref="T:Trx.Messaging.HexadecimalBinaryEncoder"/>.
            </returns>
        </member>
        <member name="M:Trx.Messaging.HexadecimalBinaryEncoder.GetEncodedLength(System.Int32)">
            <summary>
            It computes the encoded data length for the given data length.
            </summary>
            <param name="dataLength">
            It's the length of the data to be encoded.
            </param>
            <returns>
            The length of the encoded data for the given data length.
            </returns>
        </member>
        <member name="M:Trx.Messaging.HexadecimalBinaryEncoder.Encode(System.Byte[],Trx.Messaging.FormatterContext@)">
            <summary>
            It encodes the given data.
            </summary>
            <param name="data">
            It's the data to encode.
            </param>
            <param name="formatterContext">
            It's the formatter context to store the encoded data.
            </param>
        </member>
        <member name="M:Trx.Messaging.HexadecimalBinaryEncoder.Decode(Trx.Messaging.ParserContext@,System.Int32)">
            <summary>
            It decodes the data.
            </summary>
            <param name="parserContext">
            It's the parser context holding the data to be parsed.
            </param>
            <param name="length">
            It's the length of the data to get from the parser context.
            </param>
            <returns>
            A byte array with the decoded data.
            </returns>
        </member>
        <member name="T:Trx.Messaging.ConditionalFormatting.Tokenizer">
            <summary>
            This class implements a tokenizer to be used by SemanticParser.
            </summary>
        </member>
        <member name="T:Trx.Messaging.ConditionalFormatting.yyInput">
            must be implemented by a scanner object to supply input to the parser.
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.yyInput.advance">
            move on to next token.
                    @return false if positioned beyond tokens.
                    @throws IOException on input error.
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.yyInput.token">
            classifies current token.
                    Should not be called if advance() returned false.
                    @return current %token or single character.
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.yyInput.value">
            associated with current token.
                    Should not be called if advance() returned false.
                    @return value for token().
        </member>
        <member name="P:Trx.Messaging.ConditionalFormatting.yyInput.LastParsedTokenIndex">
            <summary>
            It returns the index of the last parsed token.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.Tokenizer.#ctor(System.IO.TextReader)">
            <summary>
            It initializes a new instance of the class.
            </summary>
            <param name="reader">
            It's the source of the expression to be parsed.
            </param>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.Tokenizer.advance">
            <summary>
            It parses the next token.
            </summary>
            <returns>
            true if the parse was performed, otherwise false.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.Tokenizer.token">
            <summary>
            It return the last parsed token.
            </summary>
            <returns>
            The last parsed token.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.Tokenizer.value">
            <summary>
            It returns the las parsed object.
            </summary>
            <returns>
            The las parsed object.
            </returns>
        </member>
        <member name="P:Trx.Messaging.ConditionalFormatting.Tokenizer.LastParsedTokenIndex">
            <summary>
            It returns the index of the last parsed token.
            </summary>
        </member>
        <member name="T:Trx.Messaging.ConditionalFormatting.NegationOperator">
            <summary>
            This class implements the not operator.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.NegationOperator.#ctor">
            <summary>
            It initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.NegationOperator.#ctor(Trx.Messaging.ConditionalFormatting.IBooleanExpression)">
            <summary>
            It initializes a new instance of the class.
            </summary>
            <param name="expression">
            The expression to negate.
            </param>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.NegationOperator.EvaluateParse(Trx.Messaging.ParserContext@)">
            <summary>
            Evaluates the expression when parsing a message.
            </summary>
            <param name="parserContext">
            It's the parser context.
            </param>
            <returns>
            A boolean value.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.NegationOperator.EvaluateFormat(Trx.Messaging.Field,Trx.Messaging.FormatterContext@)">
            <summary>
            Evaluates the expression when formatting a message.
            </summary>
            <param name="field">
            It's the field to format.
            </param>
            <param name="formatterContext">
            It's the context of formatting to be used by the method.
            </param>
            <returns>
            A boolean value.
            </returns>
        </member>
        <member name="P:Trx.Messaging.ConditionalFormatting.NegationOperator.Expression">
            <summary>
            It returns or sets the expression to negate.
            </summary>
        </member>
        <member name="T:Trx.Messaging.ConditionalFormatting.ExpressionEvaluationException">
            <summary>
            This class implements the exception raised when a expression
            evaluation produces an error.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.ExpressionEvaluationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Trx.Messaging.ConditionalFormatting.ExpressionEvaluationException"/> 
            class.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.ExpressionEvaluationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Trx.Messaging.ConditionalFormatting.ExpressionEvaluationException"/> 
            class with a descriptive message.
            </summary>
            <param name="message">
            A descriptive message to include with the exception.
            </param>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.ExpressionEvaluationException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Trx.Messaging.ConditionalFormatting.ExpressionEvaluationException"/> 
            class with a descriptive message.
            </summary>
            <param name="message">
            A descriptive message to include with the exception.
            </param>
            <param name="tokenIndex">
            The index of the token where the error was produced.
            </param>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.ExpressionEvaluationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Trx.Messaging.ConditionalFormatting.ExpressionEvaluationException"/> 
            class with the specified descriptive message and inner exception.
            </summary>
            <param name="message">
            A descriptive message to include with the exception.
            </param>
            <param name="innerException">
            A nested exception that is the cause of the current exception.
            </param>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.ExpressionEvaluationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Trx.Messaging.ConditionalFormatting.ExpressionEvaluationException"/> 
            class with serialized data.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data
            about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.
            </param>
        </member>
        <member name="P:Trx.Messaging.ConditionalFormatting.ExpressionEvaluationException.TokenIndex">
            <summary>
            It returns or sets the index of the token where the error was produced.
            </summary>
        </member>
        <member name="T:Trx.Messaging.ConditionalFormatting.ConditionalAndOperator">
            <summary>
            This class implements the and operator of two expressions.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.ConditionalAndOperator.#ctor">
            <summary>
            It initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.ConditionalAndOperator.#ctor(Trx.Messaging.ConditionalFormatting.IBooleanExpression,Trx.Messaging.ConditionalFormatting.IBooleanExpression)">
            <summary>
            It initializes a new instance of the class.
            </summary>
            <param name="leftExpression">
            The left expression of the and operator.
            </param>
            <param name="rightExpression">
            The right expression of the and operator.
            </param>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.ConditionalAndOperator.EvaluateParse(Trx.Messaging.ParserContext@)">
            <summary>
            Evaluates the expression when parsing a message.
            </summary>
            <param name="parserContext">
            It's the parser context.
            </param>
            <returns>
            A boolean value.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.ConditionalAndOperator.EvaluateFormat(Trx.Messaging.Field,Trx.Messaging.FormatterContext@)">
            <summary>
            Evaluates the expression when formatting a message.
            </summary>
            <param name="field">
            It's the field to format.
            </param>
            <param name="formatterContext">
            It's the context of formatting to be used by the method.
            </param>
            <returns>
            A boolean value.
            </returns>
        </member>
        <member name="P:Trx.Messaging.ConditionalFormatting.ConditionalAndOperator.LeftExpression">
            <summary>
            It returns or sets the left expression of the and operator.
            </summary>
        </member>
        <member name="P:Trx.Messaging.ConditionalFormatting.ConditionalAndOperator.RightExpression">
            <summary>
            It returns or sets the right expression of the and operator.
            </summary>
        </member>
        <member name="T:Trx.Messaging.Channels.IMessageFilter">
            <summary>
            Users should implement this interface to implement customised message
            filtering.
            </summary>
            <remarks>
            <para>
            Users should implement this interface to implement customized message
            filtering.
            </para>
            <para>
            This abstract class assumes and also imposes that filters be
            organized in a linear chain. The <see cref="M:Trx.Messaging.Channels.IMessageFilter.Decide(Trx.Messaging.Channels.IChannel,Trx.Messaging.Message)"/>
            method of each filter is called sequentially, in the order of their 
            addition to the chain.
            </para>
            <para>
            The <see cref="M:Trx.Messaging.Channels.IMessageFilter.Decide(Trx.Messaging.Channels.IChannel,Trx.Messaging.Message)"/> method must return one of the integer constants
            <see cref="F:Trx.Messaging.Channels.MessageFilterDecision.Deny"/>, 
            <see cref="F:Trx.Messaging.Channels.MessageFilterDecision.Neutral"/> or
            <see cref="F:Trx.Messaging.Channels.MessageFilterDecision.Accept"/>.
            </para>
            <para>
            If the value <see cref="F:Trx.Messaging.Channels.MessageFilterDecision.Deny"/> is returned,
            then the message is dropped immediately without consulting with the
            remaining filters.
            </para>
            <para>
            If the value <see cref="F:Trx.Messaging.Channels.MessageFilterDecision.Neutral"/> is returned,
            then the next filter in the chain is consulted. If there are no more
            filters in the chain, then the message is processed. Thus, in the
            presence of no filters, the default behaviour is to process all messages.
            </para>
            <para>
            If the value <see cref="F:Trx.Messaging.Channels.MessageFilterDecision.Accept"/> is returned,
            then the message is processed without consulting the remaining filters.
            </para>
            </remarks>
        </member>
        <member name="M:Trx.Messaging.Channels.IMessageFilter.Decide(Trx.Messaging.Channels.IChannel,Trx.Messaging.Message)">
            <summary>
            Decide if the message should be processed and apply transfomartions
            if required.
            </summary>
            <param name="channel">
            The channel where the message is processed.
            </param>
            <param name="message">
            The message to filter.
            </param>
            <returns>
            The decision of the filter, and transformations in message if done
            by the filter.
            </returns>
            <remarks>
            <para>
            If the decision is <see cref="F:Trx.Messaging.Channels.MessageFilterDecision.Deny"/>,
            then the message will be dropped. If the decision is
            <see cref="F:Trx.Messaging.Channels.MessageFilterDecision.Neutral"/>, then the next
            filter, if any, will be invoked. If the decision is
            <see cref="F:Trx.Messaging.Channels.MessageFilterDecision.Accept"/> then the message will be
            processed without consulting with other filters in the chain.
            </para>
            </remarks>
        </member>
        <member name="P:Trx.Messaging.Channels.IMessageFilter.Next">
            <summary>
            Property to get and set the next filter in the filter chain of
            responsibility.
            </summary>
            <value>
            The next filter in the chain
            </value>
            <remarks>
            Filters are typically composed into chains. This property allows the
            next filter in the chain to be accessed.
            </remarks>
        </member>
        <member name="T:Trx.Messaging.BinaryFieldFormatter">
            <summary>
            Implements a binary fields formatter.
            </summary>
        </member>
        <member name="M:Trx.Messaging.BinaryFieldFormatter.#ctor(System.Int32,Trx.Messaging.LengthManager,Trx.Messaging.IBinaryEncoder)">
            <summary>
            It initializes a new binary field formatter instance.
            </summary>
            <param name="fieldNumber">
            It's the number of the field this formatter formats/parse.
            </param>
            <param name="lengthManager">
            It's the field length manager.
            </param>
            <param name="encoder">
            It's the field value encoder.
            </param>
        </member>
        <member name="M:Trx.Messaging.BinaryFieldFormatter.#ctor(System.Int32,Trx.Messaging.LengthManager,Trx.Messaging.IBinaryEncoder,System.String)">
            <summary>
            It initializes a new binary field formatter instance.
            </summary>
            <param name="fieldNumber">
            It's the number of the field this formatter formats/parse.
            </param>
            <param name="lengthManager">
            It's the field length manager.
            </param>
            <param name="encoder">
            It's the field value encoder.
            </param>
            <param name="description">
            It's the description of the field formatter.
            </param>
        </member>
        <member name="M:Trx.Messaging.BinaryFieldFormatter.Format(Trx.Messaging.Field,Trx.Messaging.FormatterContext@)">
            <summary>
            Formats the specified field.
            </summary>
            <param name="field">
            It's the field to format.
            </param>
            <param name="formatterContext">
            It's the context of formatting to be used by the method.
            </param>
        </member>
        <member name="M:Trx.Messaging.BinaryFieldFormatter.Parse(Trx.Messaging.ParserContext@)">
            <summary>
            It parses the information in the parser context and builds the field.
            </summary>
            <param name="parserContext">
            It's the parser context.
            </param>
            <returns>
            The new field built with the information found in the parser context.
            </returns>
        </member>
        <member name="P:Trx.Messaging.BinaryFieldFormatter.LengthManager">
            <summary>
            It returns the field length manager.
            </summary>
        </member>
        <member name="P:Trx.Messaging.BinaryFieldFormatter.Encoder">
            <summary>
            It returns the field value encoder.
            </summary>
        </member>
        <member name="T:Trx.Messaging.BcdStringEncoder">
            <summary>
            This class allows to format and parse messaging components,
            producing and consuming data in BCD (Binary Coded Decimal).
            BCD uses 4 bits (a nibble) in a byte to represent a decimal
            digit, i.e., if we have the number 4531, it is stored in two
            bytes, the first will contain 0x45 and the second 0x31.
            When the number of digits to encode or decode in BCD is odd,
            this class allows to choose if the nibble not used is stored
            in the left or the right; likewise the value of those 4 bits
            can be selected (by default is 0).
            </summary>
            <remarks>
            This class implements the Singleton pattern, you must use
            <see cref="M:Trx.Messaging.BcdStringEncoder.GetInstance(System.Boolean,System.Byte)"/> to acquire the instance.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.BcdStringEncoder.#ctor(System.Boolean,System.Byte)">
            <summary>
            It initializes a new instance of the encoder.
            </summary>
            <param name="leftPadded">
            If <see langref="true"/> and the number of digits to encode
            or decode is odd, the 4 bits not used are placed at the left,
            if <see langref="false"/> the 4 bits not used are placed at
            the right.
            </param>
            <param name="pad">
            It's the value for the 4 bits not used.
            </param>
        </member>
        <member name="M:Trx.Messaging.BcdStringEncoder.GetInstance(System.Boolean,System.Byte)">
            <summary>
            It initializes a new instace of the class.
            </summary>
            <param name="leftPadded">
            If <see langref="true"/> and the number of digits to encode
            or decode is odd, the 4 bits not used are placed at the left,
            if <see langref="false"/> the 4 bits not used are placed at
            the right.
            </param>
            <param name="pad">
            It's the value for the 4 bits not used.
            </param>
            <returns>
            An instance of <see cref="T:Trx.Messaging.BcdStringEncoder"/>.
            </returns>
        </member>
        <member name="M:Trx.Messaging.BcdStringEncoder.GetEncodedLength(System.Int32)">
            <summary>
            It computes the encoded data length for the given data length.
            </summary>
            <param name="dataLength">
            It's the length of the data to be encoded.
            </param>
            <returns>
            The length of the encoded data for the given data length.
            </returns>
        </member>
        <member name="M:Trx.Messaging.BcdStringEncoder.Encode(System.String,Trx.Messaging.FormatterContext@)">
            <summary>
            It encodes the given data.
            </summary>
            <param name="data">
            It's the data to encode.
            </param>
            <param name="formatterContext">
            It's the formatter context to store the encoded data.
            </param>
        </member>
        <member name="M:Trx.Messaging.BcdStringEncoder.Decode(Trx.Messaging.ParserContext@,System.Int32)">
            <summary>
            It decodes the data.
            </summary>
            <param name="parserContext">
            It's the parser context holding the data to be parsed.
            </param>
            <param name="length">
            It's the length of the data to get from the parser context.
            </param>
            <returns>
            A string with the decoded data.
            </returns>
        </member>
        <member name="P:Trx.Messaging.BcdStringEncoder.LeftPadded">
            If <see langref="true"/> and the number of digits to encode
            or decode is odd, the 4 bits not used are placed at the left,
            if <see langref="false"/> the 4 bits not used are placed at
            the right.
        </member>
        <member name="P:Trx.Messaging.BcdStringEncoder.Pad">
            It's the value for the 4 bits not used.
        </member>
        <member name="T:Trx.Utilities.SpacePaddingRight">
            <summary>
            This class implements a filler of values of type string.
            It performs the work adding or removing spaces at the
            end of the given value.
            </summary>
            <remarks>
            In addition, this filler verifies that the length of the data
            to fill up, does not exceed the expected length.
            </remarks>
        </member>
        <member name="T:Trx.Utilities.StringPaddingRight">
            <summary>
            This class implements a filler of values of type string.
            It performs the work adding or removing a character at the
            end of the given value.
            </summary>
            <remarks>
            In addition, this filler verifies that the length of the data
            to fill up, does not exceed the expected length.
            </remarks>
        </member>
        <member name="M:Trx.Utilities.StringPaddingRight.#ctor(System.Boolean,System.Char,System.Boolean)">
            <summary>
            It constructs a new instance of the filler.
            </summary>
            <param name="truncate">
            <see langref="true"/> to discard data over the supported length,
            otherwise <see langref="false"/> to receive an exception if
            data doesn't fit in field.
            </param>
            <param name="pad">
            It is the character to use in the filling.
            </param>
            <param name="canRemovePad">
            It indicates in true if the filling is removed, in false it does not do it.
            </param>
        </member>
        <member name="M:Trx.Utilities.StringPaddingRight.#ctor(System.Boolean,System.Char)">
            <summary>
            It constructs a new instance of the filler.
            </summary>
            <param name="truncate">
            <see langref="true"/> to discard data over the supported length,
            otherwise <see langref="false"/> to receive an exception if
            data doesn't fit in field.
            </param>
            <param name="pad">
            It is the character to use in the filling.
            </param>
        </member>
        <member name="M:Trx.Utilities.StringPaddingRight.Pad(System.String,System.Int32)">
            <summary>
            It carries out the filling of a value of type string.
            </summary>
            <param name="data">
            It is the value that must be filled up.
            </param>
            <param name="totalWidth">
            It is the maximum length of the resulting value.
            </param>
            <returns>
            A string with the filled up value.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="totalWidth"/> less than 1.
            </exception>
            <exception cref="T:System.ArgumentException">
            Data length &gt; totalWidth (the instance can't
            truncate value).
            </exception>
        </member>
        <member name="M:Trx.Utilities.StringPaddingRight.RemovePad(System.String)">
            <summary>
            It eliminates the filling used in the given value.
            </summary>
            <param name="data">
            It is the filled up value.
            </param>
            <returns>
            The value without its filling.
            </returns>
        </member>
        <member name="P:Trx.Utilities.StringPaddingRight.Truncate">
            <summary>
            It informs if the class has been formed to truncate the
            data of the fields whose length is superior to the supported one.
            </summary>
        </member>
        <member name="P:Trx.Utilities.StringPaddingRight.CanRemovePad">
            <summary>
            It informs if the filler is formed to remove the filling character.
            </summary>
        </member>
        <member name="P:Trx.Utilities.StringPaddingRight.PadCharacter">
            <summary>
            It returns the pad character.
            </summary>
        </member>
        <member name="M:Trx.Utilities.SpacePaddingRight.#ctor(System.Boolean)">
            <summary>
            It constructs a new instance of the filler. It's private,
            in order to force the user to use <see cref="M:Trx.Utilities.SpacePaddingRight.GetInstance(System.Boolean)"/>.
            </summary>
            <param name="truncate">
            <see langref="true"/> to discard data over the supported length,
            otherwise <see langref="false"/> to receive an exception if
            data doesn't fit in field.
            </param>
        </member>
        <member name="M:Trx.Utilities.SpacePaddingRight.GetInstance(System.Boolean)">
            <summary>
            It returns an instance of class <see cref="T:Trx.Utilities.SpacePaddingRight"/>.
            </summary>
            <param name="truncate">
            <see langref="true"/> to discard data over the supported length,
            otherwise <see langref="false"/> to receive an exception if
            data doesn't fit in field.
            </param>
            <returns>
            An instance of class <see cref="T:Trx.Utilities.SpacePaddingRight"/>.
            </returns>
        </member>
        <member name="T:Trx.Messaging.StringLengthEncoder">
            <summary>
            Implementa un codificador de indicadores de largos de valores de
            componentes de mensajería, utilizando como formato de datos el set
            de caracteres ASCII.
            </summary>
            <remarks>
            Normalmente se emplean indicadores de largo, cuando los datos de
            los componentes de mensajería son de largo variable.
            This class implements the Singleton pattern, you must use
            <see cref="M:Trx.Messaging.StringLengthEncoder.GetInstance(System.Int32)"/> to acquire the instance.
            </remarks>
        </member>
        <member name="T:Trx.Messaging.ILengthEncoder">
            <summary>
            Esta interfaz define qué debe implementar una clase para formatear y
            analizar los indicadores de largo de los valores formateados de los
            componentes de mensajería.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ILengthEncoder.Encode(System.Int32,Trx.Messaging.FormatterContext@)">
            <summary>
            Formatea el largo de los datos del componente de mensajería.
            </summary>
            <param name="length">
            Es el largo de los datos del componente de mensajería.
            </param>
            <param name="formatterContext">
            Es el contexto de formateo donde se almacenará la
            información formateada.
            </param>
        </member>
        <member name="M:Trx.Messaging.ILengthEncoder.Decode(Trx.Messaging.ParserContext@)">
            <summary>
            Convierte los datos formateados del indicador de largo
            de los datos del componente de mensajería.
            </summary>
            <param name="parserContext">
            Es el contexto de análisis y construcción de mensajes donde
            reside la información a decodificar.
            </param>
            <returns>
            Es el largo de los datos del componente de mensajería.
            </returns>
        </member>
        <member name="P:Trx.Messaging.ILengthEncoder.EncodedLength">
            <summary>
            Retorna el largo que ocupa el indicador de largo.
            </summary>
        </member>
        <member name="M:Trx.Messaging.StringLengthEncoder.#ctor(System.Int32)">
            <summary>
            Construye una nueva instancia del codificador. Le damos el nivel
            del visibilidad 'private' para forzar al usuario a emplear
            <see cref="M:Trx.Messaging.StringLengthEncoder.GetInstance(System.Int32)"/>.
            </summary>
            <param name="lengthsIndex">
            Es el índice dentro del array _lengths que guarda la información
            del largo máximo que se puede codificar.
            </param>
        </member>
        <member name="M:Trx.Messaging.StringLengthEncoder.GetInstance(System.Int32)">
            <summary>
            Retorna una instancia de la clase <see cref="T:Trx.Messaging.StringLengthEncoder"/>
            configurada de acuerdo a los requerimientos especificados.
            </summary>
            <param name="maximumLength">
            Es el largo máximo que se puede codificar.
            </param>
            <returns>
            Una instancia de la clase <see cref="T:Trx.Messaging.StringLengthEncoder"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Cuando <paramref name="maximumLength"/> contiene un valor inválido.
            </exception>
        </member>
        <member name="M:Trx.Messaging.StringLengthEncoder.Encode(System.Int32,Trx.Messaging.FormatterContext@)">
            <summary>
            Formatea el largo de los datos del componente de mensajería.
            </summary>
            <param name="length">
            Es el largo de los datos del componente de mensajería.
            </param>
            <param name="formatterContext">
            Es el contexto de formateo donde se almacenará la
            información formateada.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Cuando <paramref name="length"/> sobrepasa el valor
            máximo permitido.
            </exception>
        </member>
        <member name="M:Trx.Messaging.StringLengthEncoder.Decode(Trx.Messaging.ParserContext@)">
            <summary>
            Convierte los datos formateados del indicador de largo
            de los datos del componente de mensajería.
            </summary>
            <param name="parserContext">
            Es el contexto de análisis y construcción de mensajes donde
            reside la información a decodificar.
            </param>
            <returns>
            Es el largo de los datos del componente de mensajería.
            </returns>
        </member>
        <member name="P:Trx.Messaging.StringLengthEncoder.MaximumLength">
            <summary>
            Es el largo máximo que se puede codificar.
            </summary>
        </member>
        <member name="P:Trx.Messaging.StringLengthEncoder.EncodedLength">
            <summary>
            Retorna el largo que ocupa el indicador de largo.
            </summary>
        </member>
        <member name="T:Trx.Messaging.IStringFieldValueFormatter">
            <summary>
            Esta clase define la interfaz que debe implementar una clase
            para formatear el valor de un campo desde y hacia un valor de
            un tipo dado.
            </summary>
            <remarks>
            Las clases que implementen esta interfaz pueden opcionalmente
            tomar como argumentos, el formato a emplear.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.IStringFieldValueFormatter.Format(System.Object)">
            <summary>
            Convierte el valor dado en un string.
            </summary>
            <param name="value">
            Es el valor a convertir.
            </param>
            <returns>
            Un string que representa al valor dado.
            </returns>
        </member>
        <member name="M:Trx.Messaging.IStringFieldValueFormatter.Parse(System.Type,System.String)">
            <summary>
            Convierte un valor de tipo string en un objeto del tipo dado.
            </summary>
            <param name="convertType">
            Es un objeto que representa el tipo hacia el que se desea
            convertir el valor dado.
            </param>
            <param name="value">
            Es el valor a convertir.
            </param>
            <returns>
            Un objeto del tipo deseado conteniendo el valor dado.
            </returns>
        </member>
        <member name="T:Trx.Messaging.FlowControl.PeerCollection">
            <summary>
            Implementa una colección de elementos de tipo <see cref="T:Trx.Messaging.FlowControl.Peer"/>.
            </summary>
            <remarks>
            El nombre del punto de conexión es empleado como clave dentro de
            la colección.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.FlowControl.PeerCollection.#ctor">
            <summary>
            Crea una nueva instancia de la colección de puntos de conexión.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.PeerCollection.Add(Trx.Messaging.FlowControl.Peer)">
            <summary>
            Agrega un punto de conexión a la colección.
            </summary>
            <param name="peer">
            Es el punto de conexión a agregar a la colección.
            </param>
            <remarks>
            Si existe es reemplazado.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.FlowControl.PeerCollection.Remove(System.String)">
            <summary>
            Elimina el punto de conexión cuyo nombre coincida con el
            especificado.
            </summary>
            <param name="name">
            Es el nombre del punto de conexión que se desea eliminar
            de la colección.
            </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.PeerCollection.Clear">
            <summary>
            Elimina todos los puntos de conexión de la colección.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.PeerCollection.Contains(System.String)">
            <summary>
            Indica si la colección contiene un punto de conexión con el nombre
            indicado.
            </summary>
            <param name="name">
            Es el nombre del punto de conexión que se desea conocer si existe en
            la colección.
            </param>
            <returns>
            <see langref="true"/> si el punto de conexión está contenido en la
            colección, <see langref="false"/> en caso contrario.
            </returns>
        </member>
        <member name="M:Trx.Messaging.FlowControl.PeerCollection.GetEnumerator">
            <summary>
            Devuelve un enumerador de la colección.
            </summary>
            <returns>
            El enumerador sobre la colección.
            </returns>
        </member>
        <member name="M:Trx.Messaging.FlowControl.PeerCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copia los elementos de la colección en el array indicado.
            </summary>
            <param name="array">
            Es el array destino donde se copian los elementos.
            </param>
            <param name="index">
            Es el índice en el array desde donde comienza la copia de los
            elementos.
            </param>
        </member>
        <member name="P:Trx.Messaging.FlowControl.PeerCollection.Item(System.String)">
             <summary>
             Retorna o asigna un punto de conexión de la colección de puntos
             de conexión.
             </summary>
             <remarks>
             Si el punto de conexión no existe en la colección, un valor nulo
             es retornado.
            
             Si existe se está agregando y ya existe es reemplazado.
             </remarks>
        </member>
        <member name="P:Trx.Messaging.FlowControl.PeerCollection.Count">
            <summary>
            Retorna la cantidad de puntos de conexión incluidos en la colección.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.PeerCollection.IsSynchronized">
            <summary>
            Informa si la colección está sincronizada.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.PeerCollection.SyncRoot">
            <summary>
            Retorna un objeto que encapsula a la colección sincronizada.
            </summary>
        </member>
        <member name="T:Trx.Messaging.FlowControl.PeerCollection.PeersEnumerator">
            <summary>
            Implementa el enumerador de la colección.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.PeerCollection.PeersEnumerator.#ctor(System.Collections.Hashtable)">
            <summary>
            Crea una nueva instancia de la clase <see cref="T:Trx.Messaging.FlowControl.PeerCollection.PeersEnumerator"/>.
            </summary>
            <param name="peers">
            Es la tabla de hash que contiene los campos.
            </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.PeerCollection.PeersEnumerator.Reset">
            <summary>
            Reinicia la enumeración.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.PeerCollection.PeersEnumerator.MoveNext">
            <summary>
            Se mueve al siguiente elemento en la enumeración.
            </summary>
            <returns>
            Un valor verdadero si logró posicionarse en el siguiente elemento de
            la enumeración, un valor igual a falso cuando no existen mas elementos
            a enumerar.
            </returns>
        </member>
        <member name="P:Trx.Messaging.FlowControl.PeerCollection.PeersEnumerator.Current">
            <summary>
            Retorna el elemento actual de la enumeración.
            </summary>
        </member>
        <member name="T:Trx.Messaging.FlowControl.ListenerPeer">
            <summary>
            This class implements a listener peer. It accepts only one
            connection at a time.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ListenerPeer.#ctor(System.String,Trx.Messaging.Channels.IChannel,Trx.Messaging.FlowControl.IListener)">
            <summary>
            It initializes a new <see cref="T:Trx.Messaging.FlowControl.ListenerPeer"/> class instance.
            </summary>
            <param name="name">
            It's the name of the listener peer.
            </param>
            <param name="listener">
            It's the listener accepting the remote connection.
            </param>
            <param name="channel">
            It's the channel to use.
            </param>
            <remarks>
            The listener and the channel must be inactive.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ListenerPeer.#ctor(System.String,Trx.Messaging.Channels.IChannel,Trx.Messaging.IMessagesIdentifier,Trx.Messaging.FlowControl.IListener)">
            <summary>
            It initializes a new <see cref="T:Trx.Messaging.FlowControl.ListenerPeer"/> class instance,
            configurating it to process <see cref="T:Trx.Messaging.FlowControl.PeerRequest"/>
            </summary>
            <param name="name">
            It's the name of the listener peer.
            </param>
            <param name="listener">
            It's the listener accepting the remote connection.
            </param>
            <param name="channel">
            It's the channel to use.
            </param>
            <param name="messagesIdentifier">
            It's the object in charge to match request messages with their
            responses.
            </param>
            <remarks>
            The listener and the channel must be inactive.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ListenerPeer.ConstructorHelper(Trx.Messaging.FlowControl.IListener)">
            <summary>
            Constructor helper.
            </summary>
            <param name="listener">
            It's the listener accepting the remote connection.
            </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ListenerPeer.OnChannelDisconnected(System.Object,System.EventArgs)">
            <summary>
            Traps the <see cref="E:Trx.Messaging.Channels.IChannel.Disconnected"/> event.
            </summary>
            <param name="sender">
            It's the channel sending the event.
            </param>
            <param name="e">
            The event parameters.
            </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ListenerPeer.OnListenerConnected(System.Object,Trx.Messaging.FlowControl.ListenerConnectedEventArgs)">
            <summary>
            Traps the <see cref="E:Trx.Messaging.FlowControl.IListener.Connected"/> event.
            </summary>
            <param name="sender">
            It's the listener sending the event.
            </param>
            <param name="e">
            The event parameters.
            </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ListenerPeer.Connect">
            <summary>
            Start listening for the remote peer.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ListenerPeer.Close">
            <summary>
            It closes the connection with the remote peer (if it's established).
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ListenerPeer.Add(Trx.Messaging.Channels.IChannel)">
            <summary>
            It adds a channel to the pool.
            </summary>
            <param name="channel">
            It's the channel to be added.
            </param>
            <returns>
            True if the channel was added, otherwise false.
            </returns>
            <remarks>
            This peer can't handle more than one channel, the channel
            used by the ListenerPeer instance is the one received in their
            constructor.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ListenerPeer.Remove">
            <summary>
            It removes a channel from the pool.
            </summary>
            <returns>
            The removed channel, otherwise null if the pool was empty.
            </returns>
            <remarks>
            The channel used by the ListenerPeer is never removed. If it's
            connected, a reference of the channel is returned.
            </remarks>
        </member>
        <member name="P:Trx.Messaging.FlowControl.ListenerPeer.Listener">
            <summary>
            It returns the listener accepting the remote connection.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.ListenerPeer.Length">
            <summary>
            It returns the number of free channels in the pool.
            </summary>
        </member>
        <member name="T:Trx.Messaging.FlowControl.ListenerConnectionRequestEventHandler">
            <summary>
            Es el delegado del evento <see cref="E:Trx.Messaging.FlowControl.IListener.ConnectionRequest"/>.
            </summary>
        </member>
        <member name="T:Trx.Messaging.FlowControl.ListenerConnectedEventHandler">
            <summary>
            Es el delegado del evento <see cref="E:Trx.Messaging.FlowControl.IListener.Connected"/>.
            </summary>
        </member>
        <member name="T:Trx.Messaging.FlowControl.ListenerErrorEventHandler">
            <summary>
            Es el delegado del evento <see cref="E:Trx.Messaging.FlowControl.IListener.Error"/>.
            </summary>
        </member>
        <member name="T:Trx.Messaging.FlowControl.IListener">
            <summary>
            Define una interfaz que es capaz de aceptar canales de conexión
            desde otros sistemas.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.IListener.Start">
            <summary>
            Comienza a escuchar requerimientos de conexión.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.IListener.Stop">
            <summary>
            Termina de escuchar requerimientos de conexión.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.IListener.Pending">
            <summary>
            Informa si existen requerimientos de conexión pendientes
            de aceptación.
            </summary>
            <returns>
            Retorna verdadero si existen conexiones pendientes, en
            caso contrario retorna falso.
            </returns>
        </member>
        <member name="E:Trx.Messaging.FlowControl.IListener.ConnectionRequest">
            <summary>
            Se dispara cuando intentan conectarse. Este evento permite
            decidir si se acepta la conexión o no.
            </summary>
        </member>
        <member name="E:Trx.Messaging.FlowControl.IListener.Connected">
            <summary>
            Se dispara cuando se ha creado una conexión.
            </summary>
        </member>
        <member name="E:Trx.Messaging.FlowControl.IListener.Error">
            <summary>
            Se dispara cuando se ha producido un error en procesamiento
            interno del listener.
            </summary>
            <remarks>
            Este evento se recibe desde el listener, cuando se produce un error
            que provoca que el listener quede deshabilitado, debiendo ser
            necesario invocar nuevamente a <see cref="M:Trx.Messaging.FlowControl.IListener.Start"/> para
            utilizarlo.
            </remarks>
        </member>
        <member name="P:Trx.Messaging.FlowControl.IListener.Listening">
            <summary>
            Informa si el canal está esperando requerimientos de connexión.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.IListener.ChannelPool">
            <summary>
            Rotorna o asigna el pool de canales desde el que el listener
            obtiene los canales que asocia a las conexiones.
            </summary>
        </member>
        <member name="T:Trx.Messaging.ConditionalFormatting.FieldValueEqualsBinaryOperator">
            <summary>
            This class implements the equals operator of two expressions.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.FieldValueEqualsBinaryOperator.#ctor">
            <summary>
            It initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.FieldValueEqualsBinaryOperator.#ctor(Trx.Messaging.ConditionalFormatting.IMessageExpression,Trx.Messaging.ConditionalFormatting.BinaryConstantExpression)">
            <summary>
            It initializes a new instance of the class.
            </summary>
            <param name="messageExpression">
            The message expression, source of the field value of the equality
            operator (left part of the operator).
            </param>
            <param name="valueExpression">
            The value expression of the equality operator (right part of the operator).
            </param>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.FieldValueEqualsBinaryOperator.EvaluateParse(Trx.Messaging.ParserContext@)">
            <summary>
            Evaluates the expression when parsing a message.
            </summary>
            <param name="parserContext">
            It's the parser context.
            </param>
            <returns>
            A boolean value.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.FieldValueEqualsBinaryOperator.EvaluateFormat(Trx.Messaging.Field,Trx.Messaging.FormatterContext@)">
            <summary>
            Evaluates the expression when formatting a message.
            </summary>
            <param name="field">
            It's the field to format.
            </param>
            <param name="formatterContext">
            It's the context of formatting to be used by the method.
            </param>
            <returns>
            A boolean value.
            </returns>
        </member>
        <member name="P:Trx.Messaging.ConditionalFormatting.FieldValueEqualsBinaryOperator.ValueExpression">
            <summary>
            It returns or sets the value expression of the equality operator (right
            part of the operator).
            </summary>
        </member>
        <member name="T:Trx.Messaging.ConditionalFormatting.ConditionalFieldFormatter">
            <summary>
            Implements a field formatter, this class holds two field formatters
            which are used based on a conditional statement.
            </summary>
            <remarks>
            This class implements <see cref="T:Trx.Messaging.ConditionalFormatting.IConditionalFieldEvaluator"/> as a facade
            when an expression is used to instantiate the class.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Trx.Messaging.ConditionalFormatting.ConditionalFieldFormatter.#ctor(System.Int32,System.String,Trx.Messaging.FieldFormatter,Trx.Messaging.FieldFormatter,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Trx.Messaging.ConditionalFormatting.ConditionalFieldFormatter.#ctor(System.Int32,System.String,Trx.Messaging.FieldFormatter,Trx.Messaging.FieldFormatter)" -->
        <!-- Badly formed XML comment ignored for member "M:Trx.Messaging.ConditionalFormatting.ConditionalFieldFormatter.#ctor(System.Int32,Trx.Messaging.ConditionalFormatting.IConditionalFieldEvaluator,Trx.Messaging.FieldFormatter,Trx.Messaging.FieldFormatter,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Trx.Messaging.ConditionalFormatting.ConditionalFieldFormatter.#ctor(System.Int32,Trx.Messaging.ConditionalFormatting.IConditionalFieldEvaluator,Trx.Messaging.FieldFormatter,Trx.Messaging.FieldFormatter)" -->
        <member name="M:Trx.Messaging.ConditionalFormatting.ConditionalFieldFormatter.Format(Trx.Messaging.Field,Trx.Messaging.FormatterContext@)">
            <summary>
            Formats the specified field.
            </summary>
            <param name="field">
            It's the field to format.
            </param>
            <param name="formatterContext">
            It's the context of formatting to be used by the method.
            </param>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.ConditionalFieldFormatter.Parse(Trx.Messaging.ParserContext@)">
            <summary>
            It parses the information in the parser context and builds the field.
            </summary>
            <param name="parserContext">
            It's the parser context.
            </param>
            <returns>
            The new field built with the information found in the parser context.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.ConditionalFieldFormatter.EvaluateFormat(Trx.Messaging.Field,Trx.Messaging.FormatterContext@)">
            <summary>
            Evaluates the field to format to decide the field formatter to be used.
            </summary>
            <param name="field">
            It's the field to format.
            </param>
            <param name="formatterContext">
            It's the context of formatting to be used by the method.
            </param>
            <returns>
            A logical value indicating the field formatter to be used.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.ConditionalFieldFormatter.EvaluateParse(Trx.Messaging.ParserContext@)">
            <summary>
            Evaluates the parser context to decide the field formatter to be used.
            </summary>
            <param name="parserContext">
            It's the parser context.
            </param>
            <returns>
            A logical value indicating the field formatter to be used.
            </returns>
        </member>
        <member name="P:Trx.Messaging.ConditionalFormatting.ConditionalFieldFormatter.Expression">
            <summary>
            It returns the expression evaluated to select a field formatter.
            </summary>
        </member>
        <member name="P:Trx.Messaging.ConditionalFormatting.ConditionalFieldFormatter.CompiledExpression">
            <summary>
            It returns the compiled expression which decides which field formatter must
            be used between <paramref name="trueFormatter"/> and <paramref name="falseFormatter" />,
            in the formatting/parsing of a message.
            </summary>
        </member>
        <member name="P:Trx.Messaging.ConditionalFormatting.ConditionalFieldFormatter.Evaluator">
            <summary>
            It returns the evaluator which decides which field formatter must be used between
            <paramref name="trueFormatter"/> and <paramref name="falseFormatter" />,
            in the formatting/parsing of a message.
            </summary>
        </member>
        <member name="P:Trx.Messaging.ConditionalFormatting.ConditionalFieldFormatter.TrueFormatter">
            <summary>
            It returns the formatter used when the <see cref="P:Trx.Messaging.ConditionalFormatting.ConditionalFieldFormatter.Expression"/>
            evaluates to true.
            </summary>
        </member>
        <member name="P:Trx.Messaging.ConditionalFormatting.ConditionalFieldFormatter.FalseFormatter">
            <summary>
            It returns the formatter used when the <see cref="P:Trx.Messaging.ConditionalFormatting.ConditionalFieldFormatter.Expression"/>
            evaluates to false.
            </summary>
        </member>
        <member name="T:Trx.Utilities.NetUtilities">
            <summary>
            Network utilities.
            </summary>
        </member>
        <member name="M:Trx.Utilities.NetUtilities.#ctor">
            <remarks>
            It prevents the <see cref="T:Trx.Utilities.NetUtilities"/> instantiation, the methods and
            functions of this class are static.
            </remarks>
        </member>
        <member name="M:Trx.Utilities.NetUtilities.IsValidTcpPort(System.Int32)">
            <summary>
            It verifies that the number of port indicated is a valid TCP port. 
            </summary>
            <param name="port">
            It's the port number to validate.
            </param>
            <returns>
            true if the port is valid, otherwise false.
            </returns>
        </member>
        <member name="T:Trx.Messaging.StringMessageHeaderFormatter">
            <summary>
            Representa un formateador capaz de formatear o analizar un cabezales
            cuyos datos son cadenas de caracteres.
            </summary>
        </member>
        <member name="M:Trx.Messaging.StringMessageHeaderFormatter.#ctor(Trx.Messaging.LengthManager,Trx.Messaging.IStringEncoder)">
            <summary>
            Construye un nuevo formateador de cabezales de mensajes cuyos
            datos son de tipo cadena de caracteres.
            </summary>
            <param name="lengthManager">
            Es el objeto que administra el largo de los datos del cabezal.
            </param>
            <param name="encoder">
            Es el objeto capaz de codificar/decodificar los datos del cabezal.
            </param>
        </member>
        <member name="M:Trx.Messaging.StringMessageHeaderFormatter.#ctor(Trx.Messaging.LengthManager,Trx.Messaging.IStringEncoder,Trx.Utilities.IStringPadding)">
            <summary>
            Construye un nuevo formateador de cabezales de mensajes cuyos
            datos son de tipo cadena de caracteres.
            </summary>
            <param name="lengthManager">
            Es el objeto que administra el largo de los datos del cabezal.
            </param>
            <param name="encoder">
            Es el objeto capaz de codificar/decodificar los datos del cabezal.
            </param>
            <param name="padding">
            Es el objeto capaz de rellenar los datos del cabezal.
            </param>
        </member>
        <member name="M:Trx.Messaging.StringMessageHeaderFormatter.Format(Trx.Messaging.MessageHeader,Trx.Messaging.FormatterContext@)">
            <summary>
            Formatea un campo cuyo valor es una cadena de caracteres.
            </summary>
            <param name="header">
            Es el cabezal a formatear.
            </param>
            <param name="formatterContext">
            Es el contexto de formateo que debe ser empleado.
            </param>
        </member>
        <member name="M:Trx.Messaging.StringMessageHeaderFormatter.Parse(Trx.Messaging.ParserContext@)">
            <summary>
            Analiza la información contenida en un contexto de analisis y
            construcción de mensajes, y construye en base a ella un nuevo
            cabezal para el que el formateador se ha construido.
            </summary>
            <param name="parserContext">
            Es el contexto de analisis y construcción y construcción de mensajes.
            </param>
            <returns>
            El nuevo cabezal contruido a partir de la información contenida en
            el contexto de análisis y construcción de mensajes.
            </returns>
        </member>
        <member name="P:Trx.Messaging.StringMessageHeaderFormatter.LengthManager">
            <summary>
            Retorna el administrador del largo de los datos del cabezal.
            </summary>
        </member>
        <member name="P:Trx.Messaging.StringMessageHeaderFormatter.Encoder">
            <summary>
            Retorna el codificar/decodificar de los datos del cabezal.
            </summary>
        </member>
        <member name="P:Trx.Messaging.StringMessageHeaderFormatter.Padding">
            <summary>
            Retorna el rellenador de los datos del cabezal.
            </summary>
        </member>
        <member name="T:Trx.Messaging.Message">
            <summary>
            Define la representación abstracta de un mensaje.
            </summary>
            <remarks>
            Los mensajes se intercambian entre sistemas, con formatos
            de datos implementados por los diversos formateadores de
            mensajes que ofrece en el framework.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.Message.#ctor">
            <summary>
            Contruye un nuevo mensaje.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Message.CopyTo(Trx.Messaging.Message)">
            <summary>
            Copia los datos del mensaje en el mensaje indicado.
            </summary>
            <param name="message">
            Es el mensaje al que se le copian los datos.
            </param>
        </member>
        <member name="M:Trx.Messaging.Message.CopyTo(Trx.Messaging.Message,System.Int32[])">
            <summary>
            Copia los datos del mensaje y los campos específicos en el mensaje
            indicado.
            </summary>
            <param name="message">
            Es el mensaje al que se le copian los datos.
            </param>
            <param name="fieldsNumbers">
            Son los campos a copiar al mensaje.
            </param>
        </member>
        <member name="M:Trx.Messaging.Message.Clone">
            <summary>
            Construye una copia exacta del mensaje.
            </summary>
            <returns>
            Una copia exacta del mensaje.
            </returns>
        </member>
        <member name="M:Trx.Messaging.Message.GetBytes">
            <summary>
            Convierte a un array de bytes los datos del mensaje.
            </summary>
            <returns>
            Un array de bytes.
            </returns>
        </member>
        <member name="M:Trx.Messaging.Message.XmlRendering(log4net.ObjectRenderer.RendererMap)">
            <summary>
            Retorna una clase que puede representar en formato XML el mensaje.
            </summary>
            <param name="renderingMap">
            Es un mapa con todas las clases que representan objetos.
            </param>
            <returns>
            Una clase que puede representar en formato XML el campo.
            </returns>
        </member>
        <member name="M:Trx.Messaging.Message.ToString">
            <summary>
            Convierte en una cadena de caracteres el mensaje.
            </summary>
            <returns>
            Una cadena de caracteres que representan el mensaje.
            </returns>
        </member>
        <member name="M:Trx.Messaging.Message.MergeFields(Trx.Messaging.Message)">
            <summary>
            Agrega o substituye al mensaje los campos del mensaje indicado.
            </summary>
            <param name="message">
            Es el mensaje desde el que se agregan o substituyen los campos.
            </param>
            <remarks>
            Los campos no son copiados, se agrega una referencia al campo
            del mensaje indicado.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.Message.CopyFields(Trx.Messaging.Message)">
            <summary>
            Agrega o substituye al mensaje los campos del mensaje indicado.
            </summary>
            <param name="message">
            Es el mensaje desde el que se agregan o substituyen los campos.
            </param>
            <remarks>
            Los campos son copiados.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.Message.CorrectBitMapsValues">
            <summary>
            Se encarga de actualizar el valor de los campos de tipo mapa de bits.
            </summary>
            <remarks>
            Cuando se trabaja con el mensaje agregando y eliminando campos, el
            sistema no actualiza los mapas de bits, debe invocarse este método
            para hacerlo.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.Message.NewComponent">
            <summary>
            Crea un nuevo componente de mensajería del tipo <see cref="T:Trx.Messaging.Message"/>.
            </summary>
            <returns>
            Un nuevo mensaje.
            </returns>
        </member>
        <member name="P:Trx.Messaging.Message.Header">
            <summary>
            Retorna o asigna el cabezal del mensaje.
            </summary>
        </member>
        <member name="P:Trx.Messaging.Message.Formatter">
            <summary>
            Retorna o asigna el formateador del mensaje.
            </summary>
        </member>
        <member name="P:Trx.Messaging.Message.Fields">
            <summary>
            Retorna la colección de campos del mensaje.
            </summary>
        </member>
        <member name="P:Trx.Messaging.Message.Item(System.Int32)">
            <summary>
            Retorna un campo en la colección de campos.
            </summary>
            <remarks>
            Si el campo no existe en la colección, un valor nulo es
            retornado.
            </remarks>
        </member>
        <member name="P:Trx.Messaging.Message.Identifier">
            <summary>
            Retorna la clave que identifica al mensaje.
            </summary>
        </member>
        <member name="P:Trx.Messaging.Message.Parent">
            <summary>
            It returns or sets the parent message.
            </summary>
            <remarks>
            This property is intended to be set by the message formatter.
            </remarks>
        </member>
        <member name="T:Trx.Messaging.Iso8583.Iso8583Ascii1987MessageFormatter">
            <summary>
            It defines an ISO 8583 messages formatter to produce and parse
            strings without control characters. The definition is for the
            ISO 8583-87.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583Ascii1987MessageFormatter.#ctor">
            <summary>
            It initializes a new ISO 8583 formatter.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583Ascii1987MessageFormatter.SetupFields">
            <summary>
            It initializes the fields formatters for this message formatter.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583Ascii1987MessageFormatter.Clone">
            <summary>
            It clones the formatter instance.
            </summary>
            <remarks>
            The header, the mti formatter and the fields formatters, aren't cloned,
            the new instance and the original shares those object instances.
            </remarks>
            <returns>
            A new instance of the formatter.
            </returns>
        </member>
        <member name="T:Trx.Messaging.FlowControl.PeerRequestCancelledEventArgs">
            <summary>
            Esta clase define los argumentos de los eventos que notifican
            que un requerimiento ha sido completado.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.PeerRequestCancelledEventArgs.#ctor(Trx.Messaging.FlowControl.PeerRequest)">
            <summary>
            Crea e inicializa una nueva clase del tipo <see cref="T:Trx.Messaging.FlowControl.PeerRequestCancelledEventArgs"/>.
            </summary>
            <param name="request">
            Es el requerimiento que se ha completado.
            </param>
            <exception cref="T:System.ArgumentNullException">
            request contiene una referencia nula.
            </exception>
        </member>
        <member name="P:Trx.Messaging.FlowControl.PeerRequestCancelledEventArgs.Request">
            <summary>
            Retorna el requerimiento que se ha completado.
            </summary>
        </member>
        <member name="T:Trx.Messaging.FixedLengthManager">
            <summary>
            Implementa la clase que permite administrar largos constantes
            de datos de componentes de mensajería.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FixedLengthManager.#ctor(System.Int32)">
            <summary>
            Construye un nuevo administrador de largos constantes de datos.
            </summary>
            <param name="length">
            Es el largo de los datos.
            </param>
        </member>
        <member name="M:Trx.Messaging.FixedLengthManager.WriteLength(Trx.Messaging.MessagingComponent,System.Int32,System.Int32,Trx.Messaging.FormatterContext@)">
            <summary>
            Escribe el largo de los datos del campo en el contexto de
            formateo del mensaje.
            </summary>
            <param name="component">
            Es el componente de mensajería del que se está escribiendo
            el largo de sus datos.
            </param>
            <param name="dataLength">
            Es el largo de los datos del componente (puede diferir del largo
            de los datos obtenidos de <paramref name="component"/>, pues pueden
            estar rellenados)
            </param>
            <param name="encodedLength">
            Es el largo de los datos codificados.
            </param>
            <param name="formatterContext">
            Es el contexto de formateo del mensaje.
            </param>
            <exception cref="T:Trx.Messaging.MessagingException">
            El largo de los datos no concuerda con el largo conocido por
            este administrador.
            </exception>
        </member>
        <member name="M:Trx.Messaging.FixedLengthManager.EnoughData(Trx.Messaging.ParserContext@)">
            <summary>
            Indica si existen datos suficientes como para leer el largo
            de los datos desde el contexto de análisis y construcción de mensajes.
            </summary>
            <param name="parserContext">
            Es el contexto de análisis y construcción de mensajes.
            </param>
            <returns>
            <see langref="true"/> en caso de que existan datos suficientes
            como para leer el largo de los datos, <see langref="false"/> en caso
            contrario.
            </returns>
        </member>
        <member name="M:Trx.Messaging.FixedLengthManager.ReadLength(Trx.Messaging.ParserContext@)">
            <summary>
            Lee desde el contexto de análisis y construcción de mensajes,
            el largo de los datos.
            </summary>
            <param name="parserContext">
            Es el contexto de análisis y construcción de mensajes.
            </param>
            <returns>
            El largo de los datos.
            </returns>
        </member>
        <member name="T:Trx.Messaging.Channels.ChannelConnectedEventHandler">
            <summary>
            It's the <see cref="E:Trx.Messaging.Channels.IChannel.Connected"/> event delegate.
            </summary>
        </member>
        <member name="T:Trx.Messaging.Channels.ChannelDisconnectedEventHandler">
            <summary>
            It's the <see cref="E:Trx.Messaging.Channels.IChannel.Disconnected"/> event delegate.
            </summary>
        </member>
        <member name="T:Trx.Messaging.Channels.ChannelReceiveEventHandler">
            <summary>
            It's the <see cref="E:Trx.Messaging.Channels.IChannel.Receive"/> event delegate.
            </summary>
        </member>
        <member name="T:Trx.Messaging.Channels.ChannelErrorEventHandler">
            <summary>
            It's the <see cref="E:Trx.Messaging.Channels.IChannel.Error"/> event delegate.
            </summary>
        </member>
        <member name="T:Trx.Messaging.Iso8583.Iso8583Bin1987MessageFormatter">
            <summary>
            It defines an ISO 8583 messages formatter. The definition is for the
            ISO 8583-93.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583Bin1987MessageFormatter.#ctor">
            <summary>
            It initializes a new ISO 8583 formatter.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583Bin1987MessageFormatter.SetupFields">
            <summary>
            It initializes the fields formatters for this message formatter.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583Bin1987MessageFormatter.Clone">
            <summary>
            It clones the formatter instance.
            </summary>
            <remarks>
            The header, the mti formatter and the fields formatters, aren't cloned,
            the new instance and the original shares those object instances.
            </remarks>
            <returns>
            A new instance of the formatter.
            </returns>
        </member>
        <member name="T:Trx.Messaging.Iso8583.Iso8583Ascii1987InnerBinaryBitmapMessageFormatter">
            <summary>
            It defines an ISO 8583 messages formatter to produce and parse
            strings without control characters. The definition is for the
            ISO 8583-87.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583Ascii1987InnerBinaryBitmapMessageFormatter.#ctor">
            <summary>
            It initializes a new ISO 8583 formatter.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583Ascii1987InnerBinaryBitmapMessageFormatter.SetupFields">
            <summary>
            It initializes the fields formatters for this message formatter.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583Ascii1987InnerBinaryBitmapMessageFormatter.Clone">
            <summary>
            It clones the formatter instance.
            </summary>
            <remarks>
            The header, the mti formatter and the fields formatters, aren't cloned,
            the new instance and the original shares those object instances.
            </remarks>
            <returns>
            A new instance of the formatter.
            </returns>
        </member>
        <member name="T:Trx.Messaging.FlowControl.TcpListener">
            <summary>
            This class implements a server capable of accepting connection requests
            that use TCP/IP protocol.
            Each new connection is encapsulated in an new object that is or inherits
            of <see cref="T:Trx.Messaging.Channels.TcpChannel"/>.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.TcpListener.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Trx.Messaging.FlowControl.TcpListener"/> class.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.TcpListener.#ctor(System.Int32)">
            <summary>
            Initialize a new instance of the <see cref="T:Trx.Messaging.FlowControl.TcpListener"/> class.
            </summary>
            <param name="port">
            It's the local port where the connection requests will be listened.
            </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Initialize a new instance of the <see cref="T:Trx.Messaging.FlowControl.TcpListener"/> class,
            ready to listen requests over a given IP address and port.
            </summary>
            <param name="localAddress">
            It's the local address where the connection requests will be listened.
            </param>
            <param name="port">
            It's the local port where the connection requests will be listened.
            </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.TcpListener.OnError(System.Exception)">
            <summary>
            It fires the <see cref="E:Trx.Messaging.FlowControl.TcpListener.Error"/> event.
            </summary>
            <param name="exception">
            It's the exception produced by the error.
            </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.TcpListener.OnConnectionRequest(System.Net.EndPoint)">
            <summary>
            Fires the <see cref="E:Trx.Messaging.FlowControl.TcpListener.ConnectionRequest"/> event.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.TcpListener.OnConnected(Trx.Messaging.Channels.IChannel)">
            <summary>
            Fires the <see cref="E:Trx.Messaging.FlowControl.TcpListener.Connected"/> event.
            </summary>
            <param name="channel">
            It's the accepted channel.
            </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.TcpListener.CreateServerSocket(System.Net.IPEndPoint)">
            <summary>
            This method creates the socket that is going to listen
            over a given interface and port.
            </summary>
            <param name="localEndPoint">
            It holds the information about over wich interface and port
            should listen the new connection request.
            </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.TcpListener.AsyncAcceptRequestHandler(System.IAsyncResult)">
            <summary>
            It's the handler of the asynchronous reading.
            </summary>
            <param name="asyncResult">
            It is the result of the asynchronous reading.
            </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.TcpListener.Start">
            <summary>
            Start to listen connection requests.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.TcpListener.Stop">
            <summary>
            Finish to listen connection requests.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.TcpListener.Pending">
            <summary>
            It informs if there are pending request connections.
            </summary>
            <returns>
            Returns true if there are pending request connections,
            otherwise returns false.
            </returns>
        </member>
        <member name="P:Trx.Messaging.FlowControl.TcpListener.Listening">
            <summary>
            It indicates if the channel is waiting for connection requests.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.TcpListener.Logger">
            <summary>
            It returns the logger used by the class.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.TcpListener.LoggerName">
            <summary>
            It returns the logger name used by the class.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.TcpListener.Port">
            <summary>
            It returns or sets the port number over which connection
            requests are listened.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.TcpListener.Name">
            <summary>
            It returns or sets the channel name.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.TcpListener.ChannelPool">
            <summary>
            It returns or sets the pool of channels from which the listener
            gets the channels that associates with new connections.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.TcpListener.LocalInterface">
            <summary>
            It returns or sets the name or IP address of the interface
            over which connection requests are listened.
            </summary>
        </member>
        <member name="E:Trx.Messaging.FlowControl.TcpListener.ConnectionRequest">
            <summary>
            Occurs when a connection request arrives. It allows to choose
            if the connection will be accepted or rejected.
            </summary>
        </member>
        <member name="E:Trx.Messaging.FlowControl.TcpListener.Connected">
            <summary>
            Occurs when a connection has been created.
            </summary>
        </member>
        <member name="E:Trx.Messaging.FlowControl.TcpListener.Error">
            <summary>
            Occurs when an error has been taken in the internal listener's
            processing.
            </summary>
            <remarks>
            This event is received from the listener when a taken error has
            disabled it, it's necessary to call <see cref="M:Trx.Messaging.FlowControl.TcpListener.Start"/>
            to enable it again.
            </remarks>
        </member>
        <member name="T:Trx.Messaging.FlowControl.ServerPeer">
            <summary>
            Esta clase encapsula los servicios de un punto de conexión
            de tipo servidor.
            </summary>
            <remarks>
            Los puntos de conexión de tipo servidor son aquellos utilizados
            por los objetos que implementan <see cref="T:Trx.Messaging.FlowControl.IServerPeerManager"/>.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ServerPeer.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Trx.Messaging.FlowControl.ServerPeer"/>.
            </summary>
            <param name="name">
            Es el nombre del punto de conexión.
            </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ServerPeer.#ctor(System.String,Trx.Messaging.IMessagesIdentifier)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Trx.Messaging.FlowControl.ServerPeer"/>,
            configurándola para procesar requerimientos.
            </summary>
            <param name="name">
            Es el nombre del punto de conexión.
            </param>
            <param name="messagesIdentifier">
            Es el identificador de mensajes.
            </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ServerPeer.Bind(Trx.Messaging.Channels.IChannel)">
            <summary>
            Asocia el punto de conexión a un canal.
            </summary>
            <param name="channel">
            Es el canal a asociar al punto de conexión.
            </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ServerPeer.Connect">
            <summary>
            Inicia la conexión con el sistema remoto.
            </summary>
        </member>
        <member name="T:Trx.Messaging.ConditionalFormatting.BinaryConstantExpression">
            <summary>
            It represents a binary string constant.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.BinaryConstantExpression.#ctor">
            <summary>
            It initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.BinaryConstantExpression.#ctor(System.String)">
            <summary>
            It initializes a new instance of the class.
            </summary>
            <param name="constant">
            It's the constant to store.
            </param>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.BinaryConstantExpression.GetValue">
            <summary>
            It returns the binary value represented by the constant.
            </summary>
            <returns>
            A byte array.
            </returns>
        </member>
        <member name="P:Trx.Messaging.ConditionalFormatting.BinaryConstantExpression.Constant">
            <summary>
            It returns or sets the string constant.
            </summary>
        </member>
        <member name="T:Trx.Messaging.StringFieldFormatter">
            <summary>
            Representa un formateador capaz de formatear o analizar un campo
            cuyos datos son cadenas de caracteres.
            </summary>
        </member>
        <member name="M:Trx.Messaging.StringFieldFormatter.#ctor(System.Int32,Trx.Messaging.LengthManager,Trx.Messaging.IStringEncoder)">
            <summary>
            Construye un nuevo formateador de campos de mensajes cuyos
            datos son de tipo cadena de caracteres.
            </summary>
            <param name="fieldNumber">
            Es el número de campo del mensaje que el formateador es capaz
            de formatear.
            </param>
            <param name="lengthManager">
            Es el objeto que administra el largo de los datos del campo.
            </param>
            <param name="encoder">
            Es el objeto capaz de codificar/decodificar los datos del campo.
            </param>
        </member>
        <member name="M:Trx.Messaging.StringFieldFormatter.#ctor(System.Int32,Trx.Messaging.LengthManager,Trx.Messaging.IStringEncoder,System.String)">
            <summary>
            Construye un nuevo formateador de campos de mensajes cuyos
            datos son de tipo cadena de caracteres.
            </summary>
            <param name="fieldNumber">
            Es el número de campo del mensaje que el formateador es capaz
            de formatear.
            </param>
            <param name="lengthManager">
            Es el objeto que administra el largo de los datos del campo.
            </param>
            <param name="encoder">
            Es el objeto capaz de codificar/decodificar los datos del campo.
            </param>
            <param name="description">
            Es la descripción del campo.
            </param>
        </member>
        <member name="M:Trx.Messaging.StringFieldFormatter.#ctor(System.Int32,Trx.Messaging.LengthManager,Trx.Messaging.IStringEncoder,Trx.Utilities.IStringPadding)">
            <summary>
            Construye un nuevo formateador de campos de mensajes cuyos
            datos son de tipo cadena de caracteres.
            </summary>
            <param name="fieldNumber">
            Es el número de campo del mensaje que el formateador es capaz
            de formatear.
            </param>
            <param name="lengthManager">
            Es el objeto que administra el largo de los datos del campo.
            </param>
            <param name="encoder">
            Es el objeto capaz de codificar/decodificar los datos del campo.
            </param>
            <param name="padding">
            Es el objeto capaz de rellenar los datos del campo.
            </param>
        </member>
        <member name="M:Trx.Messaging.StringFieldFormatter.#ctor(System.Int32,Trx.Messaging.LengthManager,Trx.Messaging.IStringEncoder,Trx.Utilities.IStringPadding,System.String)">
            <summary>
            Construye un nuevo formateador de campos de mensajes cuyos
            datos son de tipo cadena de caracteres.
            </summary>
            <param name="fieldNumber">
            Es el número de campo del mensaje que el formateador es capaz
            de formatear.
            </param>
            <param name="lengthManager">
            Es el objeto que administra el largo de los datos del campo.
            </param>
            <param name="encoder">
            Es el objeto capaz de codificar/decodificar los datos del campo.
            </param>
            <param name="padding">
            Es el objeto capaz de rellenar los datos del campo.
            </param>
            <param name="description">
            Es la descripción del campo.
            </param>
        </member>
        <member name="M:Trx.Messaging.StringFieldFormatter.#ctor(System.Int32,Trx.Messaging.LengthManager,Trx.Messaging.IStringEncoder,Trx.Messaging.IStringValidator)">
            <summary>
            Construye un nuevo formateador de campos de mensajes cuyos
            datos son de tipo cadena de caracteres.
            </summary>
            <param name="fieldNumber">
            Es el número de campo del mensaje que el formateador es capaz
            de formatear.
            </param>
            <param name="lengthManager">
            Es el objeto que administra el largo de los datos del campo.
            </param>
            <param name="encoder">
            Es el objeto capaz de codificar/decodificar los datos del campo.
            </param>
            <param name="validator">
            Es el objeto capaz de validar los datos del campo.
            </param>
        </member>
        <member name="M:Trx.Messaging.StringFieldFormatter.#ctor(System.Int32,Trx.Messaging.LengthManager,Trx.Messaging.IStringEncoder,Trx.Messaging.IStringValidator,System.String)">
            <summary>
            Construye un nuevo formateador de campos de mensajes cuyos
            datos son de tipo cadena de caracteres.
            </summary>
            <param name="fieldNumber">
            Es el número de campo del mensaje que el formateador es capaz
            de formatear.
            </param>
            <param name="lengthManager">
            Es el objeto que administra el largo de los datos del campo.
            </param>
            <param name="encoder">
            Es el objeto capaz de codificar/decodificar los datos del campo.
            </param>
            <param name="validator">
            Es el objeto capaz de validar los datos del campo.
            </param>
            <param name="description">
            Es la descripción del campo.
            </param>
        </member>
        <member name="M:Trx.Messaging.StringFieldFormatter.#ctor(System.Int32,Trx.Messaging.LengthManager,Trx.Messaging.IStringEncoder,Trx.Utilities.IStringPadding,Trx.Messaging.IStringValidator)">
            <summary>
            Construye un nuevo formateador de campos de mensajes cuyos
            datos son de tipo cadena de caracteres.
            </summary>
            <param name="fieldNumber">
            Es el número de campo del mensaje que el formateador es capaz
            de formatear.
            </param>
            <param name="lengthManager">
            Es el objeto que administra el largo de los datos del campo.
            </param>
            <param name="encoder">
            Es el objeto capaz de codificar/decodificar los datos del campo.
            </param>
            <param name="padding">
            Es el objeto capaz de rellenar los datos del campo.
            </param>
            <param name="validator">
            Es el objeto capaz de validar los datos del campo.
            </param>
        </member>
        <member name="M:Trx.Messaging.StringFieldFormatter.#ctor(System.Int32,Trx.Messaging.LengthManager,Trx.Messaging.IStringEncoder,Trx.Utilities.IStringPadding,Trx.Messaging.IStringValidator,Trx.Messaging.IStringFieldValueFormatter)">
            <summary>
            Construye un nuevo formateador de campos de mensajes cuyos
            datos son de tipo cadena de caracteres.
            </summary>
            <param name="fieldNumber">
            Es el número de campo del mensaje que el formateador es capaz
            de formatear.
            </param>
            <param name="lengthManager">
            Es el objeto que administra el largo de los datos del campo.
            </param>
            <param name="encoder">
            Es el objeto capaz de codificar/decodificar los datos del campo.
            </param>
            <param name="padding">
            Es el objeto capaz de rellenar los datos del campo.
            </param>
            <param name="validator">
            Es el objeto capaz de validar los datos del campo.
            </param>
            <param name="valueFormatter">
            Es el objeto capaz de formatear/analizar los datos del campo.
            </param>
        </member>
        <member name="M:Trx.Messaging.StringFieldFormatter.#ctor(System.Int32,Trx.Messaging.LengthManager,Trx.Messaging.IStringEncoder,Trx.Utilities.IStringPadding,Trx.Messaging.IStringValidator,Trx.Messaging.IStringFieldValueFormatter,System.String)">
            <summary>
            Construye un nuevo formateador de campos de mensajes cuyos
            datos son de tipo cadena de caracteres.
            </summary>
            <param name="fieldNumber">
            Es el número de campo del mensaje que el formateador es capaz
            de formatear.
            </param>
            <param name="lengthManager">
            Es el objeto que administra el largo de los datos del campo.
            </param>
            <param name="encoder">
            Es el objeto capaz de codificar/decodificar los datos del campo.
            </param>
            <param name="padding">
            Es el objeto capaz de rellenar los datos del campo.
            </param>
            <param name="validator">
            Es el objeto capaz de validar los datos del campo.
            </param>
            <param name="valueFormatter">
            Es el objeto capaz de formatear/analizar los datos del campo.
            </param>
            <param name="description">
            Es la descripción del campo.
            </param>
        </member>
        <member name="M:Trx.Messaging.StringFieldFormatter.Format(Trx.Messaging.Field,Trx.Messaging.FormatterContext@)">
            <summary>
            Formatea un campo cuyo valor es una cadena de caracteres.
            </summary>
            <param name="field">
            Es el campo a formatear.
            </param>
            <param name="formatterContext">
            Es el contexto de formateo que debe ser empleado.
            </param>
        </member>
        <member name="M:Trx.Messaging.StringFieldFormatter.Parse(Trx.Messaging.ParserContext@)">
            <summary>
            Analiza la información contenida en un contexto de analisis y
            construcción de mensajes, y construye en base a ella un nuevo
            campo para el que el formateador se ha construido.
            </summary>
            <param name="parserContext">
            Es el contexto de analisis y construcción y construcción de mensajes.
            </param>
            <returns>
            El nuevo campo contruido a partir de la información contenida en
            el contexto de análisis y construcción de mensajes.
            </returns>
        </member>
        <member name="P:Trx.Messaging.StringFieldFormatter.LengthManager">
            <summary>
            Retorna el administrador del largo de los datos del campo.
            </summary>
        </member>
        <member name="P:Trx.Messaging.StringFieldFormatter.Encoder">
            <summary>
            Retorna el codificar/decodificar de los datos del campo.
            </summary>
        </member>
        <member name="P:Trx.Messaging.StringFieldFormatter.Padding">
            <summary>
            Retorna el rellenador de los datos del campo.
            </summary>
        </member>
        <member name="P:Trx.Messaging.StringFieldFormatter.Validator">
            <summary>
            Retorna el validador de los datos del campo.
            </summary>
        </member>
        <member name="P:Trx.Messaging.StringFieldFormatter.ValueFormatter">
            <summary>
            Retorna el formateador/analizador de los datos del campo.
            </summary>
        </member>
        <member name="T:Trx.Messaging.ParserContext">
            <summary>
            Es el contexto de análisis y contrucción de mensajes empleado por el framework,
            en él se almacena la información que se va recibiendo del canal de recepción de
            datos, el mensaje que se está construyendo a partir de la información recibida
            y el campo actual de ese mensaje que se está intentando construir, entre otras
            cosas.
            </summary>
        </member>
        <member name="F:Trx.Messaging.ParserContext.DefaultBufferSize">
            <summary>
            En caso de que el buffer necesite ser ampliado, será ampliado la cantidad de
            bytes que esta constante indica.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ParserContext.#ctor(System.Int32)">
            <summary>
            Construye un nuevo contexto de análisis y contrucción de mensajes.
            </summary>
            <param name="bufferSize">
            Es el tamaño inicial del buffer donde residirán los datos a desformatear.
            </param>
            <exception cref="T:System.ArgumentException">
            En caso de que <paramref name="bufferSize"/> sea menor a 1.
            </exception>
        </member>
        <member name="M:Trx.Messaging.ParserContext.GetBuffer">
            <summary>
            Retorna el buffer donde residirán los datos a desformatear.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Trx.Messaging.ParserContext.ResizeBuffer(System.Int32)">
            <summary>
            Aumenta el tamaño del buffer en al menos la cantidad de bytes
            indicada.
            </summary>
            <param name="count">
            Es la cantidad mínima de bytes en que al menos se agranda el
            buffer.
            </param>
            <remarks>
            Este método amplía el buffer en bloques cuyo tamaño está definido
            por <see cref="F:Trx.Messaging.ParserContext.DefaultBufferSize"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            En caso de que <paramref name="count"/> sea menor a 1.
            </exception>
        </member>
        <member name="M:Trx.Messaging.ParserContext.Clear">
            <summary>
            Elimina los datos formateados contenidos en el buffer.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ParserContext.Write(System.String)">
            <summary>
            Escribe en el buffer de datos a desformatear, los datos indicados.
            </summary>
            <param name="data">
            Son los datos a escribir en el buffer.
            </param>
        </member>
        <member name="M:Trx.Messaging.ParserContext.Write(System.String,System.Int32,System.Int32)">
            <summary>
            Escribe en el buffer de datos formateados, los datos indicados.
            </summary>
            <param name="data">
            Son los datos a escribir en el buffer.
            </param>
            <param name="offset">
            Indica a partir desde donde se comienza a copiar la información
            contenida en <paramref name="data"/>.
            </param>
            <param name="count">
            Indica la cantidad de caracteres a copiar.
            </param>
        </member>
        <member name="M:Trx.Messaging.ParserContext.Write(System.Byte[])">
            <summary>
            Escribe en el buffer de datos a desformatear, los datos indicados.
            </summary>
            <param name="data">
            Son los datos a escribir en el buffer.
            </param>
        </member>
        <member name="M:Trx.Messaging.ParserContext.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Escribe en el buffer de datos a desformatear, los datos indicados.
            </summary>
            <param name="data">
            Son los datos a escribir en el buffer.
            </param>
            <param name="offset">
            Indica a partir desde donde se comienza a copiar la información
            contenida en <paramref name="data"/>.
            </param>
            <param name="count">
            Indica la cantidad de bytes a copiar.
            </param>
        </member>
        <member name="M:Trx.Messaging.ParserContext.GetData(System.Boolean)">
            <summary>
            Devuelve un array de bytes conteniendo una copia de los datos
            almacenados en el buffer.
            </summary>
            <param name="consume">
            Indica en <see langref="true"/> que los datos deben ser eliminados
            del buffer.
            </param>
            <returns>
            Una copia de los datos almacenados en el buffer.
            </returns>
            <remarks>
            Si el buffer no contiene datos, esta función retorna
            <see langref="null"/>.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.ParserContext.GetData(System.Boolean,System.Int32)">
            <summary>
            Devuelve un array de bytes conteniendo una copia de los datos
            almacenados en el buffer.
            </summary>
            <param name="consume">
            Indica en <see langref="true"/> que los datos deben ser eliminados
            del buffer.
            </param>
            <param name="count">
            Indica la cantidad de bytes a extraer del buffer.
            </param>
            <returns>
            Una copia de los datos almacenados en el buffer.
            </returns>
            <remarks>
            Si <paramref name="count"/> es igual a cero esta función retorna
            <see langref="null"/>.
            </remarks>
            <exception cref="T:System.ArgumentException">
            En caso de que no exista en el buffer la cantidad de bytes
            especificados en el parámetro <paramref name="count"/>.
            </exception>
        </member>
        <member name="M:Trx.Messaging.ParserContext.GetDataAsString(System.Boolean)">
            <summary>
            Devuelve una cadena de caracteres con una copia de los datos
            almacenados en el buffer.
            </summary>
            <param name="consume">
            Indica en <see langref="true"/> que los datos deben ser eliminados
            del buffer.
            </param>
            <returns>
            Una copia de los datos almacenados en el buffer.
            </returns>
            <remarks>
            Si el buffer no contiene datos, esta función retorna
            <see langref="null"/>.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.ParserContext.GetDataAsString(System.Boolean,System.Int32)">
            <summary>
            Devuelve una cadena de caracteres con una copia de los datos
            almacenados en el buffer.
            </summary>
            <param name="consume">
            Indica en <see langref="true"/> que los datos deben ser eliminados
            del buffer.
            </param>
            <param name="count">
            Indica la cantidad de caracteres a extraer del buffer.
            </param>
            <returns>
            Una copia de los datos almacenados en el buffer.
            </returns>
            <remarks>
            Si <paramref name="count"/> es igual a cero esta función retorna
            <see langref="null"/>.
            </remarks>
            <exception cref="T:System.ArgumentException">
            En caso de que no exista en el buffer la cantidad de caracteres
            especificados en el parámetro <paramref name="count"/>.
            </exception>
        </member>
        <member name="M:Trx.Messaging.ParserContext.ResetDecodedLength">
            <summary>
            Este método le indica al contexto de análisis y contrucción de mensajes
            que se reinicie el largo decodificado.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ParserContext.MessageHasBeenConsumed">
            <summary>
            Este método le indica al contexto de análisis y contrucción de mensajes
            que se ha consumido el mensaje que se estaba desformateando.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ParserContext.Consumed(System.Int32)">
            <summary>
            Este método le indica al contexto de análisis y contrucción de mensajes
            que se ha consumido una cantidad específica de información desde el buffer
            donde residen los datos a desformatear.
            </summary>
            <param name="count">
            Es la cantidad de bytes consumidos desde el buffer.
            </param>
            <exception cref="T:System.ArgumentException">
            Cuando la cantidad indicada de bytes consumidos supera el tamaño del
            buffer.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Cuando la cantidad indicada de bytes consumidos es menor a 0 o supera
            la cantidad de datos disponibles.
            </exception>
        </member>
        <member name="M:Trx.Messaging.ParserContext.Initialize">
            <summary>
            Initializes the parser.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ParserContext.ToString">
            <summary>
            Returns the string representation of the parser.
            </summary>
            <returns>
            An string containing internal information about the parser.
            </returns>
        </member>
        <member name="P:Trx.Messaging.ParserContext.CurrentMessage">
            <summary>
            It returns or sets the current message.
            </summary>
        </member>
        <member name="P:Trx.Messaging.ParserContext.CurrentField">
            <summary>
            Retorna o asigna el número de campo que se está desformateando.
            </summary>
        </member>
        <member name="P:Trx.Messaging.ParserContext.DecodedLength">
            <summary>
            Retorna o asigna el largo del valor del campo que se está
            desformateando.
            </summary>
        </member>
        <member name="P:Trx.Messaging.ParserContext.CurrentBitMap">
            <summary>
            Retorna o asigna el mapa de bits que se esta empleando para desformatear el
            mensaje.
            </summary>
        </member>
        <member name="P:Trx.Messaging.ParserContext.Signaled">
            <summary>
            Retorna o asigna la bandera utilitaria.
            </summary>
            <remarks>
            Esta bandera puede ser empleada por los formateadores de mensajes
            para marcar un estado por el cual ya han pasado.
            <see cref="T:Trx.Messaging.BasicMessageFormatter"/> la emplea para saber que ya
            ha notificado a sus subclases de que ha analizado el cabezal del
            mensaje, esto es necesario, pues el análisis de un mensaje puede
            llevar varias invocaciones a la rutina que cumple esa función (en
            el caso de que no existan datos suficientes para finalizar el
            proceso).
            Por defecto esta propiedad contiene el valor lógico igual a falso,
            que es reasignado cada vez que se invoca al método
            <see cref="M:Trx.Messaging.ParserContext.MessageHasBeenConsumed"/>.
            </remarks>
        </member>
        <member name="P:Trx.Messaging.ParserContext.PacketHeaderDataStripped">
            <summary>
            Retorna o asigna la bandera que indica si se ha removido la información
            del cabezal del paquete.
            </summary>
            <remarks>
            Esta bandera puede ser empleada por los formateadores de mensajes
            para saber si han removido la información del cabezal del paquete.
            Por defecto esta propiedad contiene el valor lógico igual a falso,
            que es reasignado cada vez que se invoca al método
            <see cref="M:Trx.Messaging.ParserContext.MessageHasBeenConsumed"/>.
            </remarks>
        </member>
        <member name="P:Trx.Messaging.ParserContext.Payload">
            <summary>
            Retorna o asigna la carga útil del contexto de análisis y contrucción
            de mensajes.
            </summary>
            <remarks>
            Esta propiedad actualmente no es empleada por el framework, su
            propósito es brindar al usuario la posibilidad de guardar información
            análisis y contrucción de mensajes, en las clases formateadoras de
            mensajes propietarias.
            Por defecto esta propiedad contiene un valor nulo, que es reasignado
            cada vez que se invoca al método <see cref="M:Trx.Messaging.ParserContext.MessageHasBeenConsumed"/>.
            </remarks>
        </member>
        <member name="P:Trx.Messaging.ParserContext.UpperDataBound">
            <summary>
            Retorna o asigna el puntero dentro del buffer que indica donde terminan los
            datos válidos.
            </summary>
        </member>
        <member name="P:Trx.Messaging.ParserContext.LowerDataBound">
            <summary>
            Retorna o asigna el puntero dentro del buffer que indica donde
            comienzan los datos válidos.
            </summary>
        </member>
        <member name="P:Trx.Messaging.ParserContext.FreeBufferSpace">
            <summary>
            Retorna el espacio disponible en el buffer donde residirán los datos
            a desformatear.
            </summary>
        </member>
        <member name="P:Trx.Messaging.ParserContext.BufferSize">
            <summary>
            Retorna el tamaño del buffer.
            </summary>
        </member>
        <member name="P:Trx.Messaging.ParserContext.DataLength">
            <summary>
            Retorna la cantidad de bytes disponibles en el buffer de datos a
            desformatear.
            </summary>
        </member>
        <member name="T:Trx.Messaging.MessagingException">
            <summary>
            Represents errors that occur during messaging framework execution.
            </summary>
        </member>
        <member name="M:Trx.Messaging.MessagingException.#ctor">
            <summary>
            Initializes a new instance of the TrxFramework.Messaging.MessagingException
            class.
            </summary>
        </member>
        <member name="M:Trx.Messaging.MessagingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TrxFramework.Messaging.MessagingException
            class with a specified error message.
            </summary>
            <param name="message">
            The message that describes the error.
            </param>
        </member>
        <member name="M:Trx.Messaging.MessagingException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the TrxFramework.Messaging.MessagingException
            class with a reference to the inner exception that is the cause of
            this exception.
            </summary>
            <param name="innerException">
            The exception that is the cause of the current exception. If the innerException
            parameter is not a null reference (Nothing in Visual Basic), the current
            exception is raised in a catch block that handles the inner exception.
            </param>
        </member>
        <member name="M:Trx.Messaging.MessagingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the TrxFramework.Messaging.MessagingException
            class with a specified error message and a reference to the inner exception
            that is the cause of this exception.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception. If the innerException
            parameter is not a null reference (Nothing in Visual Basic), the current
            exception is raised in a catch block that handles the inner exception.
            </param>
        </member>
        <member name="M:Trx.Messaging.MessagingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Trx.Messaging.MessagingException"/> 
            class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the
            serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains
            contextual information about the source or destination.</param>
        </member>
        <member name="T:Trx.Messaging.MessageXmlRendering">
            <summary>
            Representa un objeto capaz de representar en formato XML un mensaje.
            </summary>
        </member>
        <member name="M:Trx.Messaging.MessageXmlRendering.#ctor">
            <summary>
            Construye un nuevo objeto capaz de representar en formato XML un
            mensaje.
            </summary>
        </member>
        <member name="M:Trx.Messaging.MessageXmlRendering.DoRender(log4net.ObjectRenderer.RendererMap,Trx.Messaging.MessagingComponent,System.String)">
            <summary>
            Retorna la representación XML en una cadena de caracteres de un
            mensaje.
            </summary>
            <param name="renderingMap">
            Es el mapa de todos los objetos que representan objetos. Vea log4net.
            </param>
            <param name="component">
            Es el mensaje a ser representado en XML.
            </param>
            <param name="indent">
            Es la indentación a emplear en la representación XML.
            </param>
            <returns>
            Retorna una cadena de caracteres con la representación en XML
            del mensaje.
            </returns>
        </member>
        <member name="T:Trx.Messaging.Iso8583.Iso8583Message">
            <summary>
            It defines an ISO 8583 message.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583Message.#ctor">
            <summary>
            It initializes a new ISO 8583 message.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583Message.#ctor(System.Int32)">
            <summary>
            It initializes a new ISO 8583 message.
            </summary>
            <param name="messageTypeIdentifier">
            It's the message type identifier.
            </param>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583Message.IsRequest">
            <summary>
            It checks the MTI to inform if the message it's a request.
            </summary>
            <returns>
            true if the message is a request, otherwise false.
            </returns>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583Message.IsAdvice">
            <summary>
            It checks the MTI to inform if the message it's an advice.
            </summary>
            <returns>
            true if the message is an advice, otherwise false.
            </returns>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583Message.SetResponseMessageTypeIdentifier">
            <summary>
            If the message is a request, the MTI is changed to be a response.
            </summary>
            <exception cref="T:Trx.Messaging.MessagingException">
            If the message isn't a request.
            </exception>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583Message.IsAuthorization">
            <summary>
            It checks the MTI to inform if the message it's an authorization.
            </summary>
            <returns>
            true if the message is an authorization, otherwise false.
            </returns>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583Message.IsFinancial">
            <summary>
            It checks the MTI to inform if the message it's a financial message.
            </summary>
            <returns>
            true if the message is financial, otherwise false.
            </returns>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583Message.IsFileAction">
            <summary>
            It checks the MTI to inform if the message it's a file action message.
            </summary>
            <returns>
            true if the message a file action message, otherwise false.
            </returns>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583Message.IsReversalOrChargeBack">
            <summary>
            It checks the MTI to inform if the message it's a reversal or chargeback.
            </summary>
            <returns>
            true if the message a reversal or chargeback, otherwise false.
            </returns>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583Message.IsReconciliation">
            <summary>
            It checks the MTI to inform if the message it's a reconciliation.
            </summary>
            <returns>
            true if the message a reconciliation, otherwise false.
            </returns>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583Message.IsAdministrative">
            <summary>
            It checks the MTI to inform if the message it's an administrative message.
            </summary>
            <returns>
            true if the message an administrative message, otherwise false.
            </returns>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583Message.IsFeeCollection">
            <summary>
            It checks the MTI to inform if the message it's a fee collection message.
            </summary>
            <returns>
            true if the message a fee collection message, otherwise false.
            </returns>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583Message.IsNetworkManagement">
            <summary>
            It checks the MTI to inform if the message it's a network management message.
            </summary>
            <returns>
            true if the message a network management message, otherwise false.
            </returns>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583Message.ToString">
            <summary>
            It returns a string representation of the ISO 8583 message.
            </summary>
            <returns>
            A string representation of the ISO 8583 message.
            </returns>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583Message.Clone">
            <summary>
            It clones the ISO 8583 message instance.
            </summary>
            <returns>
            A clone of the message instance.
            </returns>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583Message.CopyTo(Trx.Messaging.Message)">
            <summary>
            It copies the message instance data into the provided message.
            </summary>
            <param name="message">
            It's the message where the message instance data is copied.
            </param>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583Message.CopyTo(Trx.Messaging.Message,System.Int32[])">
            <summary>
            It copies the message instance data and the specified fields into
            the provided message.
            </summary>
            <param name="message">
            It's the message where the message instance data is copied.
            </param>
            <param name="fieldsNumbers">
            The fields numbers to be copied into the provided message.
            </param>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583Message.XmlRendering(log4net.ObjectRenderer.RendererMap)">
            <summary>
            It returns a class capable to represent an ISO 8583 message
            in XML format.
            </summary>
            <param name="renderingMap">
            It's a map containing the renderers known by the system.
            </param>
            <returns>
            A class capable to represent an ISO 8583 message
            in XML format.
            </returns>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583Message.NewComponent">
            <summary>
            It builds a new component of <see cref="T:Trx.Messaging.Iso8583.Iso8583Message"/> type.
            </summary>
            <returns>
            A new ISO 8583 message.
            </returns>
        </member>
        <member name="P:Trx.Messaging.Iso8583.Iso8583Message.MessageTypeIdentifier">
            <summary>
            It returns or sets the message type identifier.
            </summary>
        </member>
        <member name="T:Trx.Messaging.Iso8583.Iso8583Ascii1993MessageFormatter">
            <summary>
            It defines an ISO 8583 messages formatter to produce and parse
            strings without control characters. The definition is for the
            ISO 8583-93.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583Ascii1993MessageFormatter.#ctor">
            <summary>
            It initializes a new ISO 8583 formatter.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583Ascii1993MessageFormatter.SetupFields">
            <summary>
            It initializes the fields formatters for this message formatter.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583Ascii1993MessageFormatter.Clone">
            <summary>
            It clones the formatter instance.
            </summary>
            <remarks>
            The header, the mti formatter and the fields formatters, aren't cloned,
            the new instance and the original shares those object instances.
            </remarks>
            <returns>
            A new instance of the formatter.
            </returns>
        </member>
        <member name="T:Trx.Messaging.BinaryField">
            <summary>
            Implements a binary message field component.
            </summary>
        </member>
        <member name="M:Trx.Messaging.BinaryField.#ctor(System.Int32)">
            <summary>
            It initializes a new binary message field component.
            </summary>
            <param name="fieldNumber">
            It's the field number of the new field.
            </param>
        </member>
        <member name="M:Trx.Messaging.BinaryField.#ctor(System.Int32,System.Byte[])">
            <summary>
            It initializes a new binary message field component.
            </summary>
            <param name="fieldNumber">
            It's the field number of the new field.
            </param>
            <param name="value">
            It's the value of the new field.
            </param>
        </member>
        <member name="M:Trx.Messaging.BinaryField.SetFieldValue(System.String)">
            <summary>
            It sets the value of the field.
            </summary>
        </member>
        <member name="M:Trx.Messaging.BinaryField.SetFieldValue(System.Byte[])">
            <summary>
            It sets the value of the field.
            </summary>
        </member>
        <member name="M:Trx.Messaging.BinaryField.ToString">
            <summary>
            It returns a string representation of the field value.
            </summary>
            <returns>
            A string representing the field value.
            </returns>
            <remarks>
            If the value is null, this function returns an empty string.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.BinaryField.GetBytes">
            <summary>
            It returns the field value.
            </summary>
            <returns>
            An array of bytes, or null if the field value is null.
            </returns>
        </member>
        <member name="M:Trx.Messaging.BinaryField.Clone">
            <summary>
            Clones the field.
            </summary>
            <returns>
            A clone of the field instance.
            </returns>
        </member>
        <member name="M:Trx.Messaging.BinaryField.NewComponent">
            <summary>
            It creates a new binary field.
            </summary>
            <returns>
            A new binary field.
            </returns>
        </member>
        <member name="P:Trx.Messaging.BinaryField.Value">
            <summary>
            It returns or sets the value of the field.
            </summary>
        </member>
        <member name="T:Trx.Utilities.ZeroPaddingLeft">
            <summary>
            This class implements a filler of values of type string.
            It performs the work adding or removing zeros at the
            beginning of the given value.
            </summary>
            <remarks>
            In addition, this filler verifies that the length of the data
            to fill up, does not exceed the expected length.
            </remarks>
        </member>
        <member name="M:Trx.Utilities.ZeroPaddingLeft.#ctor(System.Boolean,System.Boolean)">
            <summary>
            It constructs a new instance of the filler. It's private,
            in order to force the user to use <see cref="M:Trx.Utilities.ZeroPaddingLeft.GetInstance(System.Boolean,System.Boolean)"/>.
            </summary>
            <param name="truncate">
            <see langref="true"/> to discard data over the supported length,
            otherwise <see langref="false"/> to receive an exception if
            data doesn't fit in field.
            </param>
            <param name="canRemovePad">
            <see langref="true"/> if pad must be removed, otherwise <see langref="false"/>.
            </param>
        </member>
        <member name="M:Trx.Utilities.ZeroPaddingLeft.GetInstance(System.Boolean,System.Boolean)">
            <summary>
            It returns an instance of class <see cref="T:Trx.Utilities.ZeroPaddingLeft"/>.
            </summary>
            <param name="truncate">
            <see langref="true"/> to discard data over the supported length,
            otherwise <see langref="false"/> to receive an exception if
            data doesn't fit in field.
            </param>
            <param name="canRemovePad">
            <see langref="true"/> if pad must be removed, otherwise <see langref="false"/>.
            </param>
            <returns>
            An instance of class <see cref="T:Trx.Utilities.ZeroPaddingLeft"/>.
            </returns>
        </member>
        <member name="M:Trx.Utilities.ZeroPaddingLeft.RemovePad(System.String)">
            <summary>
            Removes the pad from the string.
            </summary>
            <param name="data">
            It's the padded data.
            </param>
            <returns>
            The data without the pad.
            </returns>
        </member>
        <member name="T:Trx.Messaging.MessageHeaderXmlRendering">
            <summary>
            Representa un objeto capaz de representar en formato XML un cabezal de mensajes.
            </summary>
        </member>
        <member name="M:Trx.Messaging.MessageHeaderXmlRendering.#ctor">
            <summary>
            Construye un nuevo objeto capaz de representar en formato XML un
            cabezal de mensajes.
            </summary>
        </member>
        <member name="M:Trx.Messaging.MessageHeaderXmlRendering.DoRender(log4net.ObjectRenderer.RendererMap,Trx.Messaging.MessagingComponent,System.String)">
            <summary>
            Retorna la representación XML en una cadena de caracteres de un cabezal
            de mensajes.
            </summary>
            <param name="renderingMap">Es el mapa de todos los objetos que representan
            objetos. Vea log4net.</param>
            <param name="component">Es el cabezal de mensajes a ser representado en
            XML.</param>
            <param name="indent">Es la indentación a emplear en la representación
            XML.</param>
            <returns>Retorna una cadena de caracteres con la representación en XML
            del cabezal de mensajes.</returns>
        </member>
        <member name="T:Trx.Messaging.Iso8583.Iso8583Bin1993MessageFormatter">
            <summary>
            It defines an ISO 8583 messages formatter to produce and parse
            strings without control characters. The definition is for the
            ISO 8583-93.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583Bin1993MessageFormatter.#ctor">
            <summary>
            It initializes a new ISO 8583 formatter.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583Bin1993MessageFormatter.SetupFields">
            <summary>
            It initializes the fields formatters for this message formatter.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583Bin1993MessageFormatter.Clone">
            <summary>
            It clones the formatter instance.
            </summary>
            <remarks>
            The header, the mti formatter and the fields formatters, aren't cloned,
            the new instance and the original shares those object instances.
            </remarks>
            <returns>
            A new instance of the formatter.
            </returns>
        </member>
        <member name="T:Trx.Messaging.FieldFormatterAddedEventHandler">
            <summary>
            Es el delegado para el evento que informa sobre la adición de un
            formateador de mensajes a la colección.
            </summary>
        </member>
        <member name="T:Trx.Messaging.FieldFormatterRemovedEventHandler">
            <summary>
            Es el delegado para el evento que informa sobre la eliminación de un
            formateador de mensajes a la colección.
            </summary>
        </member>
        <member name="T:Trx.Messaging.FieldFormatterClearedEventHandler">
            <summary>
            Es el delegado para el evento que informa que todos los formateadores
            de campo, han sido eliminados de la colección en una única operación.
            </summary>
        </member>
        <member name="T:Trx.Messaging.FieldFormatterCollection">
            <summary>
            Implementa una colección de formateadores de campos.
            </summary>
            <remarks>El número de campo es empleado como clave dentro de la
            colección.</remarks>
        </member>
        <member name="M:Trx.Messaging.FieldFormatterCollection.#ctor">
            <summary>
            Crea una nueva instancia de la colección de formateadores de campo.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FieldFormatterCollection.Add(Trx.Messaging.FieldFormatter)">
            <summary>
            Agrega un formateador de campo a la colección.
            </summary>
            <param name="fieldFormatter">Es el formateador de campo a agregar.
            </param>
            <remarks>Si existe es reemplazado.</remarks>
        </member>
        <member name="M:Trx.Messaging.FieldFormatterCollection.Remove(System.Int32)">
            <summary>
            Elimina el formateador de campo cuyo número coincida con el
            especificado.
            </summary>
            <param name="fieldNumber">
            Es el número de campo del formateador de campo que se desea
            eliminar de la colección.
            </param>
        </member>
        <member name="M:Trx.Messaging.FieldFormatterCollection.Remove(System.Int32[])">
            <summary>
            Elimina los formateadores de campo cuyos números coincidan con los
            indicados.
            </summary>
            <param name="fieldsNumbers">
            Es el conjunto de números de formateadores de campo a eliminar de la
            colección.
            </param>
        </member>
        <member name="M:Trx.Messaging.FieldFormatterCollection.Clear">
            <summary>
            Elimina todos los formateadores de campo de la colección.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FieldFormatterCollection.Contains(System.Int32)">
            <summary>
            Indica si la colección contiene un formateador de campo para el
            número de campo indicado.
            </summary>
            <param name="fieldNumber">Es el número del campo para el que se
            desea conocer si existe un formateador de campo en la colección.
            </param>
            <returns><see langref="true"/> si el formateador de campo está
            contenido en la colección, <see langref="false"/> en caso contrario.
            </returns>
        </member>
        <member name="M:Trx.Messaging.FieldFormatterCollection.Contains(System.Int32[])">
            <summary>
            Indica si la colección contiene todos los formateadores de campo
            cuyos números se indican.
            </summary>
            <param name="fieldsNumbers">
            Son los números de formateadores de campo para los que se desea
            conocer si existen en la colección.
            </param>
            <returns>
            <see langref="true"/> si todos los formateadores de campo están
            contenidos en la colección, <see langref="false"/> en caso contrario.
            </returns>
        </member>
        <member name="M:Trx.Messaging.FieldFormatterCollection.GetEnumerator">
            <summary>
            Devuelve un enumerador de la colección.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Trx.Messaging.FieldFormatterCollection.Added">
            <summary>
            Informa que se ha agregado un formateador de mensajes a la colección.
            </summary>
        </member>
        <member name="E:Trx.Messaging.FieldFormatterCollection.Removed">
            <summary>
            Informa que se ha eliminado un formateador de mensajes de la colección.
            </summary>
        </member>
        <member name="E:Trx.Messaging.FieldFormatterCollection.Cleared">
            <summary>
            Informa que se han eliminado todos los formateador de mensajes de la
            colección.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FieldFormatterCollection.Item(System.Int32)">
            <summary>
            Retorna un formateador de campo en la colección de
            formateadores de campos.
            </summary>
            <remarks>
            Si el formateador de campo no existe en la colección,
            un valor nulo es retornado.
            </remarks>
        </member>
        <member name="P:Trx.Messaging.FieldFormatterCollection.Count">
            <summary>
            Retorna la cantidad de formateadores de campo incluidos en la
            colección.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FieldFormatterCollection.MaximumFieldFormatterNumber">
            <summary>
            Retorna el número del máximo formateador de campo.
            </summary>
            <exception cref="T:System.ApplicationException">
            La colección se encuentra vacía.
            </exception>
        </member>
        <member name="T:Trx.Messaging.FieldFormatterCollection.FieldFormattersEnumerator">
            <summary>
            Implementa el enumerador de la colección.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FieldFormatterCollection.FieldFormattersEnumerator.#ctor(System.Collections.Hashtable)">
            <summary>
            Crea una nueva instancia de la clase <see cref="T:Trx.Messaging.FieldFormatterCollection.FieldFormattersEnumerator"/>.
            </summary>
            <param name="fieldFormatters">
            Es la tabla de hash que contiene los formateadores de campo.
            </param>
        </member>
        <member name="M:Trx.Messaging.FieldFormatterCollection.FieldFormattersEnumerator.Reset">
            <summary>
            Reinicia la enumeración.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FieldFormatterCollection.FieldFormattersEnumerator.MoveNext">
            <summary>
            Se mueve al siguiente elemento en la enumeración.
            </summary>
            <returns>
            Un valor verdadero si logró posicionarse en el siguiente elemento de
            la enumeración, un valor igual a falso cuando no existen mas elementos
            a enumerar.
            </returns>
        </member>
        <member name="P:Trx.Messaging.FieldFormatterCollection.FieldFormattersEnumerator.Current">
            <summary>
            Retorna el elemento actual de la enumeración.
            </summary>
        </member>
        <member name="T:Trx.Messaging.FieldCollection">
            <summary>
            Implementa una colección de campos.
            </summary>
            <remarks>
            El número de campo es empleado como clave dentro de la colección.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.FieldCollection.#ctor">
            <summary>
            Crea una nueva instancia de la colección de campos.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FieldCollection.Add(Trx.Messaging.Field)">
            <summary>
            Agrega un campo a la colección.
            </summary>
            <param name="field">
            Es el campo a agregar a la colección.
            </param>
            <remarks>
            Si existe es reemplazado.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.FieldCollection.Add(System.Int32,System.String)">
            <summary>
            Agrega a la colección un campo cuyo valor es una cadena de caracteres.
            </summary>
            <param name="fieldNumber">
            Es el número del campo a agregar a colección.
            </param>
            <param name="fieldValue">
            Es el valor del campo a agregar.
            </param>
            <remarks>
            Si existe es reemplazado.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.FieldCollection.Add(System.Int32,System.Byte[])">
            <summary>
            Agrega a la colección un campo cuyo valor es un array de bytes.
            </summary>
            <param name="fieldNumber">
            Es el número del campo a agregar a colección.
            </param>
            <param name="fieldValue">
            Es el valor del campo a agregar.
            </param>
            <remarks>
            Si existe es reemplazado.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.FieldCollection.Add(System.Int32,Trx.Messaging.Message)">
            <summary>
            Agrega a la colección un campo cuyo valor es un mensaje.
            </summary>
            <param name="fieldNumber">
            Es el número del campo a agregar a colección.
            </param>
            <param name="fieldValue">
            Es el valor del campo a agregar.
            </param>
            <remarks>
            Si existe es reemplazado.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.FieldCollection.Remove(System.Int32)">
            <summary>
            Elimina el campo cuyo número coincida con el especificado.
            </summary>
            <param name="fieldNumber">
            Es el número del campo que se desea eliminar de la colección.
            </param>
        </member>
        <member name="M:Trx.Messaging.FieldCollection.Remove(System.Int32[])">
            <summary>
            Elimina los campos cuyos números coincidan con los indicados.
            </summary>
            <param name="fieldsNumbers">
            Es el conjunto de números de campos a eliminar de la colección.
            </param>
        </member>
        <member name="M:Trx.Messaging.FieldCollection.Clear">
            <summary>
            Elimina todos los campos de la colección.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FieldCollection.Contains(System.Int32)">
            <summary>
            Indica si la colección contiene un campo para el número de campo
            indicado.
            </summary>
            <param name="fieldNumber">
            Es el número del campo para el que se desea conocer si existe un
            campo en la colección.
            </param>
            <returns>
            <see langref="true"/> si el campo está contenido en la colección,
            <see langref="false"/> en caso contrario.
            </returns>
        </member>
        <member name="M:Trx.Messaging.FieldCollection.Contains(System.Int32[])">
            <summary>
            Indica si la colección contiene todos los campos cuyos números se
            indican.
            </summary>
            <param name="fieldsNumbers">
            Son los números de campos para los que se desea conocer si existen
            en la colección.
            </param>
            <returns>
            <see langref="true"/> si todos los campos están contenidos en la
            colección, <see langref="false"/> en caso contrario.
            </returns>
        </member>
        <member name="M:Trx.Messaging.FieldCollection.ContainsAtLeastOne(System.Int32[])">
            <summary>
            Indica si la colección contiene por lo menos uno de los campos
            cuyos números se indican.
            </summary>
            <param name="fieldsNumbers">
            Son los números de campos para los que se desea conocer si existe
            al menos uno en la colección.
            </param>
            <returns>
            <see langref="true"/> si uno de los campos está contenidos en la
            colección, <see langref="false"/> en caso contrario.
            </returns>
        </member>
        <member name="M:Trx.Messaging.FieldCollection.ContainsAtLeastOne(System.Int32,System.Int32)">
            <summary>
            Indica si la colección contiene por lo menos uno de los campos
            cuyos números se encuentran en un rango dado.
            </summary>
            <param name="lowerFieldNumber">
            Es el número inicial del rango.
            </param>
            <param name="upperFieldNumber">
            Es el número final del rango.
            </param>
            <returns>
            <see langref="true"/> si uno de los campos está contenidos en la
            colección, <see langref="false"/> en caso contrario.
            </returns>
        </member>
        <member name="M:Trx.Messaging.FieldCollection.MoveField(System.Int32,System.Int32)">
            <summary>
            Cambia el número de un campo por otro dado.
            </summary>
            <param name="oldFieldNumber">
            Es el número de campo que se desea cambiar.
            </param>
            <param name="newFieldNumber">
            Es el nuevo número de campo.
            </param>
            <exception cref="T:System.ArgumentException">
            El campo no existe.
            </exception>
        </member>
        <member name="M:Trx.Messaging.FieldCollection.GetEnumerator">
            <summary>
            Devuelve un enumerador de la colección.
            </summary>
            <returns>
            El enumerador sobre la colección.
            </returns>
        </member>
        <member name="P:Trx.Messaging.FieldCollection.Item(System.Int32)">
            <summary>
            Retorna un campo en la colección de campos.
            </summary>
            <remarks>
            Si el campo no existe en la colección, un valor nulo es
            retornado.
            </remarks>
        </member>
        <member name="P:Trx.Messaging.FieldCollection.Count">
            <summary>
            Retorna la cantidad de campos incluidos en la colección.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FieldCollection.MaximumFieldNumber">
            <summary>
            Retorna el número del campo cuyo número sea el mayor contenido en
            la colección.
            </summary>
            <exception cref="T:System.ApplicationException">
            La colección se encuentra vacía.
            </exception>
        </member>
        <member name="P:Trx.Messaging.FieldCollection.Dirty">
            <summary>
            Asigna o devuelve un valor de tipo lógico que indica si la colección
            ha sufrido modificaciones.
            </summary>
            <remarks>
            Esta propiedad puede ser empleada por el usuario para seguir
            la pista de la colección, cuando se agregan o borran campos a la
            colección esta propiedad pasa a valer <see langref="true"/>, es
            responsabilidad del usuario asignarla en <see langref="true"/> cuando
            lo jusgue necesario.
            </remarks>
        </member>
        <member name="T:Trx.Messaging.FieldCollection.FieldsEnumerator">
            <summary>
            Implementa el enumerador de la colección.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FieldCollection.FieldsEnumerator.#ctor(System.Collections.Hashtable)">
            <summary>
            Crea una nueva instancia de la clase <see cref="T:Trx.Messaging.FieldCollection.FieldsEnumerator"/>.
            </summary>
            <param name="fields">
            Es la tabla de hash que contiene los campos.
            </param>
        </member>
        <member name="M:Trx.Messaging.FieldCollection.FieldsEnumerator.Reset">
            <summary>
            Reinicia la enumeración.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FieldCollection.FieldsEnumerator.MoveNext">
            <summary>
            Se mueve al siguiente elemento en la enumeración.
            </summary>
            <returns>
            Un valor verdadero si logró posicionarse en el siguiente elemento de
            la enumeración, un valor igual a falso cuando no existen mas elementos
            a enumerar.
            </returns>
        </member>
        <member name="P:Trx.Messaging.FieldCollection.FieldsEnumerator.Current">
            <summary>
            Retorna el elemento actual de la enumeración.
            </summary>
        </member>
        <member name="T:Trx.Messaging.FieldAttribute">
            <summary>
            Este atributo debe emplearse para asociar una propiedad de alguna
            clase, a un campo de un mensaje.
            </summary>
            <remarks>
            Los formateadores de mensajes deben emplear los formateadores de
            los valores de los campos, para formatear o analizar el valor
            del campo del mensaje.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.FieldAttribute.#ctor(System.Int32)">
            <summary>
            Inicializa una instancia de la clase <see cref="T:Trx.Messaging.FieldAttribute"/>.
            </summary>
            <param name="fieldNumber">
            Es el número del campo del mensaje al que se asocia la propiedad
            sobre la que se aplica el atributo.
            </param>
        </member>
        <member name="P:Trx.Messaging.FieldAttribute.FieldNumber">
            <summary>
            Retorna el número de campo al que se asocia una propiedad.
            </summary>
        </member>
        <member name="T:Trx.Messaging.Iso8583.Iso8583MessageXmlRendering">
            <summary>
            A class capable to represent an ISO 8583 message in XML.
            </summary>
        </member>
        <member name="F:Trx.Messaging.Iso8583.Iso8583MessageXmlRendering.XmlIso8583MessageTag">
            <summary>
            The ISO 8583 message tag.
            </summary>
        </member>
        <member name="F:Trx.Messaging.Iso8583.Iso8583MessageXmlRendering.XmlIso8583MessageTypeIdentifierAttr">
            <summary>
            The MTI tag.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583MessageXmlRendering.#ctor">
            <summary>
            It initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Iso8583.Iso8583MessageXmlRendering.DoRender(log4net.ObjectRenderer.RendererMap,Trx.Messaging.MessagingComponent,System.String)">
            <summary>
            It builds a XML representation of an ISO 8583 message.
            </summary>
            <param name="renderingMap">
            It's the renderer map (see log4net).
            </param>
            <param name="component">
            It's the ISO 8583 message.
            </param>
            <param name="indent">
            It's the indentation to be used.
            </param>
            <returns>
            A XML representation of an ISO 8583 message.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the <paramref name="component"/> isn't an ISO 8583 message.
            </exception>
        </member>
        <member name="T:Trx.Messaging.FlowControl.ServerPeerConnectedEventArgs">
            <summary>
            Esta clase define los argumentos del evento <see cref="E:Trx.Messaging.FlowControl.Server.Connected"/>.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ServerPeerConnectedEventArgs.#ctor(Trx.Messaging.FlowControl.ServerPeer)">
            <summary>
            Crea e inicializa una nueva clase del tipo <see cref="T:Trx.Messaging.FlowControl.ServerPeerConnectedEventArgs"/>.
            </summary>
            <param name="peer">
            Es el punto de conexión que se ha conectado.
            </param>
            <exception cref="T:System.ArgumentNullException">
            peer contiene una referencia nula.
            </exception>
        </member>
        <member name="P:Trx.Messaging.FlowControl.ServerPeerConnectedEventArgs.Peer">
            <summary>
            Retorna el punto de conexión que se ha conectado.
            </summary>
        </member>
        <member name="T:Trx.Messaging.FlowControl.ServerCollection">
            <summary>
            Implementa una colección de elementos de tipo <see cref="T:Trx.Messaging.FlowControl.Server"/>.
            </summary>
            <remarks>
            El nombre del servidor es empleado como clave dentro de la colección.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ServerCollection.#ctor">
            <summary>
            Crea una nueva instancia de la colección de servidores.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ServerCollection.Add(Trx.Messaging.FlowControl.Server)">
            <summary>
            Agrega un servidor a la colección.
            </summary>
            <param name="server">
            Es el servidor a agregar a la colección.
            </param>
            <remarks>
            Si existe es reemplazado.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ServerCollection.Remove(System.String)">
            <summary>
            Elimina el servidor cuyo nombre coincida con el especificado.
            </summary>
            <param name="name">
            Es el nombre del servidor que se desea eliminar de la colección.
            </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ServerCollection.Clear">
            <summary>
            Elimina todos los servidores de la colección.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ServerCollection.Contains(System.String)">
            <summary>
            Indica si la colección contiene un servidor con el nombre
            indicado.
            </summary>
            <param name="name">
            Es el nombre del servidor que se desea conocer si existe en
            la colección.
            </param>
            <returns>
            <see langref="true"/> si el servidor está contenido en la colección,
            <see langref="false"/> en caso contrario.
            </returns>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ServerCollection.GetEnumerator">
            <summary>
            Devuelve un enumerador de la colección.
            </summary>
            <returns>
            El enumerador sobre la colección.
            </returns>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ServerCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copia los elementos de la colección en el array indicado.
            </summary>
            <param name="array">
            Es el array destino donde se copian los elementos.
            </param>
            <param name="index">
            Es el índice en el array desde donde comienza la copia de los
            elementos.
            </param>
        </member>
        <member name="P:Trx.Messaging.FlowControl.ServerCollection.Item(System.String)">
             <summary>
             Retorna o asigna un servidor de la colección de servidores.
             </summary>
             <remarks>
             Si el servidor no existe en la colección, un valor nulo es
             retornado.
            
             Si existe se está agregando y ya existe es reemplazado.
             </remarks>
        </member>
        <member name="P:Trx.Messaging.FlowControl.ServerCollection.Count">
            <summary>
            Retorna la cantidad de servidores incluidos en la colección.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.ServerCollection.IsSynchronized">
            <summary>
            Informa si la colección está sincronizada.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.ServerCollection.SyncRoot">
            <summary>
            Retorna un objeto que encapsula a la colección sincronizada.
            </summary>
        </member>
        <member name="T:Trx.Messaging.FlowControl.ServerCollection.ServersEnumerator">
            <summary>
            Implementa el enumerador de la colección.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ServerCollection.ServersEnumerator.#ctor(System.Collections.Hashtable)">
            <summary>
            Crea una nueva instancia de la clase <see cref="T:Trx.Messaging.FlowControl.ServerCollection.ServersEnumerator"/>.
            </summary>
            <param name="servers">
            Es la tabla de hash que contiene los campos.
            </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ServerCollection.ServersEnumerator.Reset">
            <summary>
            Reinicia la enumeración.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ServerCollection.ServersEnumerator.MoveNext">
            <summary>
            Se mueve al siguiente elemento en la enumeración.
            </summary>
            <returns>
            Un valor verdadero si logró posicionarse en el siguiente elemento de
            la enumeración, un valor igual a falso cuando no existen mas elementos
            a enumerar.
            </returns>
        </member>
        <member name="P:Trx.Messaging.FlowControl.ServerCollection.ServersEnumerator.Current">
            <summary>
            Retorna el elemento actual de la enumeración.
            </summary>
        </member>
        <member name="T:Trx.Messaging.FlowControl.ServerPeerConnectedEventHandler">
            <summary>
            It's the <see cref="E:Trx.Messaging.FlowControl.Server.Connected"/> event delegate.
            </summary>
        </member>
        <member name="T:Trx.Messaging.FlowControl.ServerPeerDisconnectedEventHandler">
            <summary>
            It's the <see cref="E:Trx.Messaging.FlowControl.Server.Disconnected"/> event delegate.
            </summary>
        </member>
        <member name="T:Trx.Messaging.FlowControl.Server">
            <summary>
            Implementa un servidor capaz de atender los requerimientos
            de los clientes del sistema.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.Server.#ctor(System.String,Trx.Messaging.FlowControl.IListener,Trx.Messaging.FlowControl.IServerPeerManager)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Trx.Messaging.FlowControl.Server"/>.
            </summary>
            <param name="name">
            Es el nombre del servidor.
            </param>
            <param name="listener">
            Es el listener empleado para escuchar los requerimientos de conexión.
            </param>
            <param name="serverPeerManager">
            Es el administrador de puntos de conexión.
            </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.Server.OnConnected(Trx.Messaging.FlowControl.ServerPeer)">
             <summary>
             Dispara el evento <see cref="E:Trx.Messaging.FlowControl.Server.Connected"/>.
            
             It fires the <see cref="E:Trx.Messaging.FlowControl.Server.Connected"/> event.
             </summary>
             <param name="peer">
             Es el punto de conexión que se conectó.
             </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.Server.OnDisconnected(Trx.Messaging.FlowControl.ServerPeer)">
             <summary>
             Dispara el evento Disconnected.
            
             It fires the <see cref="E:Trx.Messaging.FlowControl.Server.Disconnected"/> event.
             </summary>
             <param name="peer">
             Es el punto de conexión que se desconectó.
             </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.Server.OnListenerConnectionRequest(System.Object,Trx.Messaging.FlowControl.ListenerConnectionRequestEventArgs)">
            <summary>
            Maneja el evento <see cref="E:Trx.Messaging.FlowControl.IListener.ConnectionRequest"/>.
            </summary>
            <param name="sender">
            Es el objeto que envía el evento.
            </param>
            <param name="e">
            Son los parámetros del evento.
            </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.Server.OnPeerDisconnected(System.Object,System.EventArgs)">
            <summary>
            Maneja el evento <see cref="E:Trx.Messaging.FlowControl.Peer.Disconnected"/>.
            </summary>
            <param name="sender">
            Es el objeto que envía el evento.
            </param>
            <param name="e">
            Son los parámetros del evento.
            </param>
            <remarks>
            El servidor devuelve el canal del punto de conexión al pool de
            canales del oyente.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.FlowControl.Server.OnListenerConnected(System.Object,Trx.Messaging.FlowControl.ListenerConnectedEventArgs)">
            <summary>
            Maneja el evento <see cref="E:Trx.Messaging.FlowControl.IListener.Connected"/>.
            </summary>
            <param name="sender">
            Es el objeto que envía el evento.
            </param>
            <param name="e">
            Son los parámetros del evento.
            </param>
        </member>
        <member name="P:Trx.Messaging.FlowControl.Server.Name">
            <summary>
            Retorna el nombre del servidor.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.Server.HostStart">
            <summary>
            
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.Server.Logger">
            <summary>
            Retorna o asigna el logger empleado por la clase.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.Server.LoggerName">
            <summary>
            Retorna o asigna el nombre del logger que se utiliza.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.Server.Listener">
            <summary>
            Retorna el objeto oyente que atiende los requerimientos
            de conexión.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.Server.Peers">
            <summary>
            Retorna el conjunto de clientes conocidos por el servidor.
            </summary>
            <remarks>
            Los clientes pueden estar conectados o no.
            </remarks>
        </member>
        <member name="P:Trx.Messaging.FlowControl.Server.PeerManager">
            <summary>
            
            </summary>
        </member>
        <member name="E:Trx.Messaging.FlowControl.Server.Connected">
             <summary>
             Se dispara cuando el punto de conexión se ha conectado.
            
             It's raised when the peer has been connected.
             </summary>
        </member>
        <member name="E:Trx.Messaging.FlowControl.Server.Disconnected">
             <summary>
             Se dispara cuando el punto de conexión se ha desconectado.
            
             It's raised when the peer has been disconnected.
             </summary>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.SemanticParser.yyerror(System.String)">
            simplified error message.
                  @see <a href="#yyerror(java.lang.String, java.lang.String[])">yyerror</a>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.SemanticParser.yyerror(System.String,System.String[])">
            (syntax) error message.
                  Can be overwritten to control message format.
                  @param message text to be displayed.
                  @param expected vector of acceptable tokens, if available.
        </member>
        <member name="F:Trx.Messaging.ConditionalFormatting.SemanticParser.debug">
            debugging support, requires the package jay.
                  Set to null to suppress debugging messages.
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.SemanticParser.GetTokenName(System.Int32)">
            index-checked interface to yyName[].
                  @param token single character or %token value.
                  @return token name or [illegal] or [unknown].
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.SemanticParser.yyExpecting(System.Int32)">
            computes list of expected tokens on error by tracing the tables.
                  @param state for which to compute the list.
                  @return list of token names.
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.SemanticParser.yyparse(Trx.Messaging.ConditionalFormatting.yyInput,System.Object)">
            the generated parser, with debugging messages.
                  Maintains a state and a value stack, currently with fixed maximum size.
                  @param yyLex scanner.
                  @param yydebug debug message writer implementing yyDebug, or null.
                  @return result of the last reduction, if any.
                  @throws ExpressionCompileException on irrecoverable parse error.
        </member>
        <member name="F:Trx.Messaging.ConditionalFormatting.SemanticParser.yyMax">
            initial size and increment of the state/value stack [default 256].
                  This is not final so that it can be overwritten outside of invocations
                  of yyparse().
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.SemanticParser.yyDefault(System.Object)">
            executed at the beginning of a reduce action.
                  Used as $$ = yyDefault($1), prior to the user-specified action, if any.
                  Can be overwritten to provide deep copy, etc.
                  @param first value for $1, or null.
                  @return first.
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.SemanticParser.yyparse(Trx.Messaging.ConditionalFormatting.yyInput)">
            the generated parser.
                  Maintains a state and a value stack, currently with fixed maximum size.
                  @param yyLex scanner.
                  @return result of the last reduction, if any.
                  @throws ExpressionCompileException on irrecoverable parse error.
        </member>
        <member name="T:Trx.Messaging.Channels.FilterSkeleton">
            <summary>
            Users should implement this interface to implement customised message
            filtering.
            </summary>
            <remarks>
            <para>
            Users should implement this interface to implement customized message
            filtering.
            </para>
            <para>
            This abstract class assumes and also imposes that filters be
            organized in a linear chain. The <see cref="M:Trx.Messaging.Channels.FilterSkeleton.Decide(Trx.Messaging.Channels.IChannel,Trx.Messaging.Message)"/>
            method of each filter is called sequentially, in the order of their 
            addition to the chain.
            </para>
            <para>
            The <see cref="M:Trx.Messaging.Channels.FilterSkeleton.Decide(Trx.Messaging.Channels.IChannel,Trx.Messaging.Message)"/> method must return one of the integer constants
            <see cref="F:Trx.Messaging.Channels.MessageFilterDecision.Deny"/>, 
            <see cref="F:Trx.Messaging.Channels.MessageFilterDecision.Neutral"/> or
            <see cref="F:Trx.Messaging.Channels.MessageFilterDecision.Accept"/>.
            </para>
            <para>
            If the value <see cref="F:Trx.Messaging.Channels.MessageFilterDecision.Deny"/> is returned,
            then the message is dropped immediately without consulting with the
            remaining filters.
            </para>
            <para>
            If the value <see cref="F:Trx.Messaging.Channels.MessageFilterDecision.Neutral"/> is returned,
            then the next filter in the chain is consulted. If there are no more filters
            in the chain, then the message is processed. Thus, in the presence of no
            filters, the default behaviour is to process all messages.
            </para>
            <para>
            If the value <see cref="F:Trx.Messaging.Channels.MessageFilterDecision.Accept"/> is returned,
            then the message is processed without consulting the remaining filters.
            </para>
            <para>
            The philosophy of this filters design is based on log4net.
            </para>
            </remarks>
        </member>
        <member name="F:Trx.Messaging.Channels.FilterSkeleton.next">
            <summary>
            Points to the next filter in the filter chain.
            </summary>
            <remarks>
            See <see cref="P:Trx.Messaging.Channels.FilterSkeleton.Next"/> for more information.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.Channels.FilterSkeleton.Decide(Trx.Messaging.Channels.IChannel,Trx.Messaging.Message)">
            <summary>
            Decide if the message should be processed and apply transfomartions
            if required.
            </summary>
            <param name="channel">
            The channel where the message is processed.
            </param>
            <param name="message">
            The message to filter.
            </param>
            <returns>
            The decision of the filter, and transformations in message if done
            by the filter.
            </returns>
            <remarks>
            <para>
            If the decision is <see cref="F:Trx.Messaging.Channels.MessageFilterDecision.Deny"/>,
            then the message will be dropped. If the decision is
            <see cref="F:Trx.Messaging.Channels.MessageFilterDecision.Neutral"/>, then the next
            filter, if any, will be invoked. If the decision is
            <see cref="F:Trx.Messaging.Channels.MessageFilterDecision.Accept"/> then the message will be
            processed without consulting with other filters in the chain.
            </para>
            </remarks>
        </member>
        <member name="P:Trx.Messaging.Channels.FilterSkeleton.Next">
            <summary>
            Property to get and set the next filter in the filter chain of responsibility.
            </summary>
            <value>
            The next filter in the chain
            </value>
            <remarks>
            Filters are typically composed into chains. This property allows the next
            filter in the chain to be accessed.
            </remarks>
        </member>
        <member name="T:Trx.Messaging.VolatileStanSequencer">
            <summary>
            Implementa un secuenciador para generar números entre 1 y 999999. Es ideal
            para ser utilizado como secuenciador de números trace en mensajes de tipo
            ISO 8583 (STAN es la sigla para el término en inglés System Trace Audit Number).
            </summary>
        </member>
        <member name="F:Trx.Messaging.VolatileStanSequencer.StanMinimumValue">
            <summary>
            Es el valor mínimo por defecto que puede valer el secuenciador.
            </summary>
        </member>
        <member name="F:Trx.Messaging.VolatileStanSequencer.StanMaximumValue">
            <summary>
            Es el valor máximo por defecto que puede valer el secuenciador.
            </summary>
        </member>
        <member name="M:Trx.Messaging.VolatileStanSequencer.#ctor">
            <summary>
            Crea un secuenciador ideal para emplearse como generador de números para
            el seguimiento de mensajes ISO 8583. Generalmente este número es asignado
            por la parte que genera el mensaje de requerimiento, y va en el campo 11.
            </summary>
        </member>
        <member name="T:Trx.Messaging.FlowControl.PeerRequestDoneEventArgs">
            <summary>
            Esta clase define los argumentos de los eventos que notifican
            que un requerimiento ha sido completado.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.PeerRequestDoneEventArgs.#ctor(Trx.Messaging.FlowControl.PeerRequest)">
            <summary>
            Crea e inicializa una nueva clase del tipo <see cref="T:Trx.Messaging.FlowControl.PeerRequestDoneEventArgs"/>.
            </summary>
            <param name="request">
            Es el requerimiento que se ha completado.
            </param>
            <exception cref="T:System.ArgumentNullException">
            request contiene una referencia nula.
            </exception>
        </member>
        <member name="P:Trx.Messaging.FlowControl.PeerRequestDoneEventArgs.Request">
            <summary>
            Retorna el requerimiento que se ha completado.
            </summary>
        </member>
        <member name="T:Trx.Messaging.FlowControl.ListenerConnectionRequestEventArgs">
            <summary>
            This class defines the arguments of the event <see cref="E:Trx.Messaging.FlowControl.IListener.ConnectionRequest"/>.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ListenerConnectionRequestEventArgs.#ctor(System.Object)">
            <summary>
            It creates and initializes a new instance of the
            type <see cref="T:Trx.Messaging.FlowControl.ListenerConnectionRequestEventArgs"/>.
            </summary>
            <param name="connectionInfo">
            It's the associated information to the connection request.
            </param>
        </member>
        <member name="P:Trx.Messaging.FlowControl.ListenerConnectionRequestEventArgs.Accept">
            <summary>
            It returns or sets the parameter which allows to accept or deny the
            incoming connection.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.ListenerConnectionRequestEventArgs.ConnectionInfo">
            <summary>
            It returns the associated information to the connection request.
            </summary>
            <remarks>
            The type of this parameter if it holds a valid value, will depend
            of the class which implements the interface <see cref="T:Trx.Messaging.FlowControl.IListener"/>.
            </remarks>
        </member>
        <member name="T:Trx.Messaging.FlowControl.Forwarder">
            <summary>
            This class combines a <see cref="P:Trx.Messaging.FlowControl.Forwarder.Peer"/> and a <see cref="P:Trx.Messaging.FlowControl.Forwarder.Server"/>
            to implement a multiplexor.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.Forwarder.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.Forwarder.Process(Trx.Messaging.FlowControl.IMessageSource,Trx.Messaging.Message)">
            <summary>
            It's called to process the indicated message.
            </summary>
            <param name="source">
            It's the source of the message.
            </param>
            <param name="message">
            It's the message to be processed.
            </param>
            <returns>
            A logical value the same to true, if the messages processor
            processeced it, otherwise it returns false.
            </returns>
            <remarks>
            If the messages processor doesn't process it, the system
            delivers it to the next processor in the list, and so on until
            one process it, or there aren't other processors.
            
            This function handles all the messages received by the server.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.FlowControl.Forwarder.OnPeerRequestDone(System.Object,Trx.Messaging.FlowControl.PeerRequestDoneEventArgs)">
            <summary>
            Traps and handles the peer RequestDone event.
            </summary>
            <param name="sender">
            The <see cref="P:Trx.Messaging.FlowControl.Forwarder.Peer"/> sending the event.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:Trx.Messaging.FlowControl.Forwarder.OnPeerConnected(System.Object,System.EventArgs)">
            <summary>
            Traps and handles the peer Connected event.
            </summary>
            <param name="sender">
            The <see cref="P:Trx.Messaging.FlowControl.Forwarder.Peer"/> sending the event.
            </param>
            <param name="e">
            The event arguments.
            </param>
            <remarks>
            If the forwarder has a <see cref="P:Trx.Messaging.FlowControl.Forwarder.Server"/>, start it to
            listen new connections.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.FlowControl.Forwarder.OnPeerDisconnected(System.Object,System.EventArgs)">
            <summary>
            Traps and handles the peer Disconnected event.
            </summary>
            <param name="sender">
            The <see cref="P:Trx.Messaging.FlowControl.Forwarder.Peer"/> sending the event.
            </param>
            <param name="e">
            The event arguments.
            </param>
            <remarks>
            When the <see cref="P:Trx.Messaging.FlowControl.Forwarder.Peer"/> is disconnected from the remote system, the
            forwarder doesn't accept any new clients, and closes the existing
            connections.
            </remarks>
        </member>
        <member name="P:Trx.Messaging.FlowControl.Forwarder.Peer">
            <summary>
            It returns or sets the forwarder peer.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.Forwarder.PeerWithNoDoneEventHandler">
            <summary>
            It returns or sets the forwarder peer.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.Forwarder.Server">
            <summary>
            It returns or sets the server used by the forwarder.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.Forwarder.Logger">
            <summary>
            It returns or sets the logger associated to the channel.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.Forwarder.LoggerName">
            <summary>
            It returns or sets the logger name associated to the channel.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.Forwarder.Timeout">
            <summary>
            It returns or sets the timeout for the requests sent to the
            forwarder peer.
            </summary>
        </member>
        <member name="P:Trx.Messaging.FlowControl.Forwarder.NextMessageProcessor">
            <summary>
            It returns or sets the next messages processor.
            </summary>
        </member>
        <member name="T:Trx.Messaging.FieldXmlRendering">
            <summary>
            Representa un objeto capaz de representar en formato XML un campo.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FieldXmlRendering.#ctor">
            <summary>
            Construye un nuevo objeto capaz de representar en formato XML un
            campo.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FieldXmlRendering.DoRender(log4net.ObjectRenderer.RendererMap,Trx.Messaging.MessagingComponent,System.String)">
            <summary>
            Retorna la representación XML en una cadena de caracteres de un campo
            de mensaje.
            </summary>
            <param name="renderingMap">
            Es el mapa de todos los objetos que representan objetos. Vea log4net.
            </param>
            <param name="component">
            Es el campo a ser representado en XML.
            </param>
            <param name="indent">
            Es la indentación a emplear en la representación XML.
            </param>
            <returns>
            Retorna una cadena de caracteres con la representación en XML
            del campo de mensaje.
            </returns>
        </member>
        <member name="T:Trx.Messaging.FlowControl.ServerPeerDisconnectedEventArgs">
            <summary>
            Esta clase define los argumentos del evento <see cref="E:Trx.Messaging.FlowControl.Server.Disconnected"/>.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ServerPeerDisconnectedEventArgs.#ctor(Trx.Messaging.FlowControl.ServerPeer)">
            <summary>
            Crea e inicializa una nueva clase del tipo <see cref="T:Trx.Messaging.FlowControl.ServerPeerDisconnectedEventArgs"/>.
            </summary>
            <param name="peer">
            Es el punto de conexión que se ha desconectado.
            </param>
            <exception cref="T:System.ArgumentNullException">
            peer contiene una referencia nula.
            </exception>
        </member>
        <member name="P:Trx.Messaging.FlowControl.ServerPeerDisconnectedEventArgs.Peer">
            <summary>
            Retorna el punto de conexión que se ha desconectado.
            </summary>
        </member>
        <member name="T:Trx.Messaging.ConditionalFormatting.IsSetExpression">
            <summary>
            This class implements field presence.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.IsSetExpression.#ctor">
            <summary>
            It initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.IsSetExpression.#ctor(Trx.Messaging.ConditionalFormatting.IMessageExpression)">
            <summary>
            It initializes a new instance of the class.
            </summary>
            <param name="messageExpression">
            The expression which supply the message.
            </param>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.IsSetExpression.EvaluateParse(Trx.Messaging.ParserContext@)">
            <summary>
            Evaluates the expression when parsing a message.
            </summary>
            <param name="parserContext">
            It's the parser context.
            </param>
            <returns>
            A boolean value.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.IsSetExpression.EvaluateFormat(Trx.Messaging.Field,Trx.Messaging.FormatterContext@)">
            <summary>
            Evaluates the expression when formatting a message.
            </summary>
            <param name="field">
            It's the field to format.
            </param>
            <param name="formatterContext">
            It's the context of formatting to be used by the method.
            </param>
            <returns>
            A boolean value.
            </returns>
        </member>
        <member name="P:Trx.Messaging.ConditionalFormatting.IsSetExpression.MessageExpression">
            <summary>
            It returns or sets the message expression.
            </summary>
        </member>
        <member name="T:Trx.Messaging.BitMapFieldFormatter">
            <summary>
            Representa un formateador capaz de formatear o analizar un mapa de bits.
            </summary>
        </member>
        <member name="M:Trx.Messaging.BitMapFieldFormatter.#ctor(System.Int32,System.Int32,System.Int32,Trx.Messaging.IBinaryEncoder)">
            <summary>
            Construye un nuevo formateador de mapas de bits.
            </summary>
            <param name="fieldNumber">
            Es el número de campo del mensaje que el formateador es capaz de formatear.
            </param>
            <param name="lowerFieldNumber">
            Es el número de campo menor que el mapa de bits puede anunciar.
            </param>
            <param name="upperFieldNumber">
            Es el número de campo mayor que el mapa de bits puede anunciar.
            </param>
            <param name="encoder">
            Es el objeto capaz de codificar/decodificar los datos del mapa de bits.
            </param>
        </member>
        <member name="M:Trx.Messaging.BitMapFieldFormatter.#ctor(System.Int32,System.Int32,System.Int32,Trx.Messaging.IBinaryEncoder,System.String)">
            <summary>
            Construye un nuevo formateador de mapas de bits.
            </summary>
            <param name="fieldNumber">
            Es el número de campo del mensaje que el formateador es capaz de formatear.
            </param>
            <param name="lowerFieldNumber">
            Es el número de campo menor que el mapa de bits puede anunciar.
            </param>
            <param name="upperFieldNumber">
            Es el número de campo mayor que el mapa de bits puede anunciar.
            </param>
            <param name="encoder">
            Es el objeto capaz de codificar/decodificar los datos del mapa de bits.
            </param>
            <param name="description">
            Es la descripción del mapa de bits.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="lowerFieldNumber"/> debe ser mayor que cero y menor
            o igual a <paramref name="upperFieldNumber"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            El parámetro <paramref name="encoder"/> es inválido.
            </exception>
        </member>
        <member name="M:Trx.Messaging.BitMapFieldFormatter.Format(Trx.Messaging.Field,Trx.Messaging.FormatterContext@)">
            <summary>
            Formatea un mapa de bits.
            </summary>
            <param name="field">
            Es el campo a formatear.
            </param>
            <param name="formatterContext">
            Es el contexto de formateo que debe ser empleado.
            </param>
        </member>
        <member name="M:Trx.Messaging.BitMapFieldFormatter.Parse(Trx.Messaging.ParserContext@)">
            <summary>
            Analiza la información contenida en un contexto de analisis y construcción
            de mensajes, y construye en base a ella un nuevo campo para el que el
            formateador se ha construido.
            </summary>
            <param name="parserContext">
            Es el contexto de analisis y construcción y construcción de mensajes.
            </param>
            <returns>
            El nuevo campo contruido a partir de la información contenida en el contexto
            de análisis y construcción de mensajes.
            </returns>
        </member>
        <member name="P:Trx.Messaging.BitMapFieldFormatter.LowerFieldNumber">
            <summary>
            Es el número de campo menor que el mapa de bits puede anunciar.
            </summary>
        </member>
        <member name="P:Trx.Messaging.BitMapFieldFormatter.UpperFieldNumber">
            <summary>
            Es el número de campo mayor que el mapa de bits puede anunciar.
            </summary>
        </member>
        <member name="P:Trx.Messaging.BitMapFieldFormatter.Encoder">
            <summary>
            Retorna el codificar/decodificar de los datos del mapa de bits.
            </summary>
        </member>
        <member name="T:Trx.Utilities.ZeroPaddingRight">
            <summary>
            This class implements a filler of values of type string.
            It performs the work adding or removing zeros at the
            end of the given value.
            </summary>
            <remarks>
            In addition, this filler verifies that the length of the data
            to fill up, does not exceed the expected length.
            </remarks>
        </member>
        <member name="M:Trx.Utilities.ZeroPaddingRight.#ctor(System.Boolean,System.Boolean)">
            <summary>
            It constructs a new instance of the filler. It's private,
            in order to force the user to use <see cref="M:Trx.Utilities.ZeroPaddingRight.GetInstance(System.Boolean,System.Boolean)"/>.
            </summary>
            <param name="truncate">
            <see langref="true"/> to discard data over the supported length,
            otherwise <see langref="false"/> to receive an exception if
            data doesn't fit in field.
            </param>
            <param name="canRemovePad">
            <see langref="true"/> if pad must be removed, otherwise <see langref="false"/>.
            </param>
        </member>
        <member name="M:Trx.Utilities.ZeroPaddingRight.GetInstance(System.Boolean,System.Boolean)">
            <summary>
            It returns an instance of class <see cref="T:Trx.Utilities.ZeroPaddingRight"/>.
            </summary>
            <param name="truncate">
            <see langref="true"/> to discard data over the supported length,
            otherwise <see langref="false"/> to receive an exception if
            data doesn't fit in field.
            </param>
            <param name="canRemovePad">
            <see langref="true"/> if pad must be removed, otherwise <see langref="false"/>.
            </param>
            <returns>
            An instance of class <see cref="T:Trx.Utilities.ZeroPaddingRight"/>.
            </returns>
        </member>
        <member name="M:Trx.Utilities.ZeroPaddingRight.RemovePad(System.String)">
            <summary>
            Removes the pad from the string.
            </summary>
            <param name="data">
            It's the padded data.
            </param>
            <returns>
            The data without the pad.
            </returns>
        </member>
        <member name="T:Trx.Utilities.ErrorEventArgs">
            <summary>
            This class defines the arguments for events that notify an error.
            </summary>
        </member>
        <member name="M:Trx.Utilities.ErrorEventArgs.#ctor(System.Exception)">
            <summary>
            Creates and initializes a new instance of class <see cref="T:Trx.Utilities.ErrorEventArgs"/>.
            </summary>
            <param name="exception">
            It is the exception that produced the error that has been received.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="exception"/> it's null.
            </exception>
        </member>
        <member name="P:Trx.Utilities.ErrorEventArgs.Exception">
            <summary>
            It returns the exception that has produced the error.
            </summary>
        </member>
        <member name="T:Trx.Messaging.InnerMessageField">
            <summary>
            Implements a field component which their values are messages.
            </summary>
        </member>
        <member name="M:Trx.Messaging.InnerMessageField.#ctor(System.Int32)">
            <summary>
            It initializes a new inner message field component.
            </summary>
            <param name="fieldNumber">
            It's the field number of the new field.
            </param>
        </member>
        <member name="M:Trx.Messaging.InnerMessageField.#ctor(System.Int32,Trx.Messaging.Message)">
            <summary>
            It initializes a new inner message field component.
            </summary>
            <param name="fieldNumber">
            It's the field number of the new field.
            </param>
            <param name="value">
            It's the value of the new field.
            </param>
        </member>
        <member name="M:Trx.Messaging.InnerMessageField.ToString">
            <summary>
            It returns a string representation of the field value.
            </summary>
            <returns>
            A string representing the field value.
            </returns>
            <remarks>
            If the value is null, this function returns an empty string.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.InnerMessageField.GetBytes">
            <summary>
            It returns the field value.
            </summary>
            <returns>
            An array of bytes, or null if the field value is null.
            </returns>
        </member>
        <member name="M:Trx.Messaging.InnerMessageField.Clone">
            <summary>
            Clones the field.
            </summary>
            <returns>
            A clone of the field instance.
            </returns>
        </member>
        <member name="M:Trx.Messaging.InnerMessageField.NewComponent">
            <summary>
            It creates a new binary field.
            </summary>
            <returns>
            A new binary field.
            </returns>
        </member>
        <member name="P:Trx.Messaging.InnerMessageField.Value">
            <summary>
            It returns or sets the value of the field.
            </summary>
        </member>
        <member name="T:Trx.Messaging.FlowControl.ListenerConnectedEventArgs">
            <summary>
            This class defines the arguments of the event <see cref="E:Trx.Messaging.FlowControl.IListener.Connected"/>.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FlowControl.ListenerConnectedEventArgs.#ctor(Trx.Messaging.Channels.IChannel)">
            <summary>
            It creates and initializes a new instance of the
            type <see cref="T:Trx.Messaging.FlowControl.ListenerConnectedEventArgs"/>.
            </summary>
            <param name="channel">
            It's the accepted channel.
            </param>
            <exception cref="T:System.ArgumentNullException">
            channel holds a null invalid reference.
            </exception>
        </member>
        <member name="P:Trx.Messaging.FlowControl.ListenerConnectedEventArgs.Channel">
            <summary>
            It returns the accepted channel.
            </summary>
        </member>
        <member name="T:Trx.Messaging.StringValidationException">
            <summary>
            Esta excepción representa un error que se produce cuando el valor
            de un campo no pasa la validación efectuada por alguna de las
            clases que implementan <see cref="T:Trx.Messaging.IStringValidator"/>
            </summary>
        </member>
        <member name="M:Trx.Messaging.StringValidationException.#ctor">
            <summary>
            Inicializa una nueva clase de tipo <see cref="T:Trx.Messaging.StringValidationException"/>.
            </summary>
        </member>
        <member name="M:Trx.Messaging.StringValidationException.#ctor(System.String)">
            <summary>
            Inicializa una nueva clase de tipo <see cref="T:Trx.Messaging.StringValidationException"/>.
            </summary>
            <param name="message">
            Es un mensaje a incluir con la excepción.
            </param>
        </member>
        <member name="M:Trx.Messaging.StringValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva clase de tipo <see cref="T:Trx.Messaging.StringValidationException"/>.
            </summary>
            <param name="message">
            Es un mensaje a incluir con la excepción.
            </param>
            <param name="innerException">
            Es la excepción que causó <see cref="T:Trx.Messaging.StringValidationException"/>.
            </param>
        </member>
        <member name="M:Trx.Messaging.StringValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva clase de tipo <see cref="T:Trx.Messaging.StringValidationException"/>.
            </summary>
            <param name="info">
            Es un objeto de tipo <see cref="T:System.Runtime.Serialization.SerializationInfo"/> que almacena los datos
            serializados del objeto acerca de la excepción disparada.
            </param>
            <param name="context">
            Es un objeto de tipo <see cref="T:System.Runtime.Serialization.StreamingContext"/> que contiene la
            información de contexto acerca del origen o destino.
            </param>
        </member>
        <member name="T:Trx.Messaging.FieldFormatterEventArgs">
            <summary>
            Es el argumento para algunos eventos disparados por las colección
            de formateadores de mensajes.
            </summary>
        </member>
        <member name="M:Trx.Messaging.FieldFormatterEventArgs.#ctor(Trx.Messaging.FieldFormatter)">
            <summary>
            Construye una nueva instancia de los argumentos a emplear
            en algunos eventos de las colecciones de formateadores de
            mensajes.
            </summary>
            <param name="fieldFormatter">
            Es el formateador de campo asociado al evento.
            </param>
        </member>
        <member name="P:Trx.Messaging.FieldFormatterEventArgs.FieldFormatter">
            <summary>
            Retorna el formateador de campo asociado al evento.
            </summary>
        </member>
        <member name="T:Trx.Messaging.BcdLengthEncoder">
            <summary>
            This class implements a length encoder in BCD (Binary
            Coded Decimal).
            </summary>
            <remarks>
            Length encoders are used when the messaging components data
            is variable.
            This class implements the Singleton pattern, you must use
            <see cref="M:Trx.Messaging.BcdLengthEncoder.GetInstance(System.Int32)"/> to acquire the instance.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.BcdLengthEncoder.#ctor(System.Int32)">
            <summary>
            It initializes a new instance of the class.
            </summary>
            <param name="lengthsIndex">
            It's the index in _lengths array storing the maximum length
            this class instance can encode.
            </param>
        </member>
        <member name="M:Trx.Messaging.BcdLengthEncoder.GetInstance(System.Int32)">
            <summary>
            It returns an instance of <see cref="T:Trx.Messaging.BcdLengthEncoder"/>
            class.
            </summary>
            <param name="maximumLength">
            It's the maximum length to encode.
            </param>
            <returns>
            An instance of <see cref="T:Trx.Messaging.BcdLengthEncoder"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            It's thrown when <paramref name="maximumLength"/> holds an invalid value.
            </exception>
        </member>
        <member name="M:Trx.Messaging.BcdLengthEncoder.Encode(System.Int32,Trx.Messaging.FormatterContext@)">
            <summary>
            It formats the length of the data of the messaging components.
            </summary>
            <param name="length">
            It's the length to format.
            </param>
            <param name="formatterContext">
            It's the formatter context to store the formatted length.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            It's thrown when <paramref name="length"/> is greater than the
            maximum value supported by the instance.
            </exception>
        </member>
        <member name="M:Trx.Messaging.BcdLengthEncoder.Decode(Trx.Messaging.ParserContext@)">
            <summary>
            Gets the encoded length from the parser context.
            </summary>
            <param name="parserContext">
            It's the parser context holding the data to be parsed.
            </param>
            <returns>
            The length parsed from the parser context.
            </returns>
        </member>
        <member name="P:Trx.Messaging.BcdLengthEncoder.MaximumLength">
            <summary>
            It's the maximum length to encode.
            </summary>
        </member>
        <member name="P:Trx.Messaging.BcdLengthEncoder.EncodedLength">
            <summary>
            It returns the length in bytes of the length indicator.
            </summary>
        </member>
        <member name="T:Trx.Messaging.ConditionalFormatting.Yytoken">
            <summary>
            It represents a token in an expression.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.Yytoken.#ctor(System.Int32,System.Int32)">
            <summary>
            It initializes a new instance of the class.
            </summary>
            <param name="sym_num">
            The number of the token.
            </param>
            <param name="position">
            The start position of the token in the expression.
            </param>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.Yytoken.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            It initializes a new instance of the class.
            </summary>
            <param name="sym_num">
            The number of the token.
            </param>
            <param name="position">
            The start position of the token in the expression.
            </param>
            <param name="l">
            The left token.
            </param>
            <param name="r">
            The right token.
            </param>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.Yytoken.#ctor(System.Int32,System.Int32,System.Object)">
            <summary>
            It initializes a new instance of the class.
            </summary>
            <param name="sym_num">
            The number of the token.
            </param>
            <param name="position">
            The start position of the token in the expression.
            </param>
            <param name="o">
            The value of the token.
            </param>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.Yytoken.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Object)">
            <summary>
            It initializes a new instance of the class.
            </summary>
            <param name="sym_num">
            The number of the token.
            </param>
            <param name="position">
            The start position of the token in the expression.
            </param>
            <param name="l">
            The left token.
            </param>
            <param name="r">
            The right token.
            </param>
            <param name="o">
            The value of the token.
            </param>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.Yytoken.ToString">
            <summary>
            It returns a string representation of the token.
            </summary>
            <returns>
            A string representation of the token.
            </returns>
        </member>
        <member name="P:Trx.Messaging.ConditionalFormatting.Yytoken.Position">
            <summary>
            It returns the start position in the expression of the token.
            </summary>
        </member>
        <member name="T:Trx.Messaging.ConditionalFormatting.MessageExpression">
            <summary>
            This class implements the message expression.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.MessageExpression.#ctor">
            <summary>
            It initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.MessageExpression.#ctor(System.Int32)">
            <summary>
            It initializes a new instance of the class.
            </summary>
            <param name="fieldNumber">
            The leaf field number.
            </param>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.MessageExpression.GetLeafMessage(Trx.Messaging.ParserContext@,Trx.Messaging.Message)">
            <summary>
            It returns the message.
            </summary>
            <param name="parserContext">
            It's the parser context.
            </param>
            <param name="message">
            The message to get the message field.
            </param>
            <returns>
            The message.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.MessageExpression.GetLeafMessage(Trx.Messaging.FormatterContext@,Trx.Messaging.Message)">
            <summary>
            It returns the message.
            </summary>
            <param name="formatterContext">
            It's the context of formatting to be used by the method.
            </param>
            <param name="message">
            The message to get the message field.
            </param>
            <returns>
            The message.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.MessageExpression.GetLeafFieldNumber">
            <summary>
            It returns the leaf field number of a message hierarchy.
            </summary>
            <returns>
            The leaf field number.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.MessageExpression.GetString(Trx.Messaging.Message)">
            <summary>
            It returns the field value as string.
            </summary>
            <returns>
            The field value.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.MessageExpression.GetBytes(Trx.Messaging.Message)">
            <summary>
            It returns the field value as a byte array.
            </summary>
            <returns>
            The field value.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.MessageExpression.GetLeafFieldValueString(Trx.Messaging.ParserContext@,Trx.Messaging.Message)">
            <summary>
            It returns the field value as string.
            </summary>
            <param name="parserContext">
            It's the parser context.
            </param>
            <param name="message">
            The message to get the field.
            </param>
            <returns>
            The field value.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.MessageExpression.GetLeafFieldValueString(Trx.Messaging.FormatterContext@,Trx.Messaging.Message)">
            <summary>
            It returns the field value as string.
            </summary>
            <param name="formatterContext">
            It's the context of formatting to be used by the method.
            </param>
            <param name="message">
            The message to get the field.
            </param>
            <returns>
            The field value.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.MessageExpression.GetLeafFieldValueBytes(Trx.Messaging.ParserContext@,Trx.Messaging.Message)">
            <summary>
            It returns the field value as a byte array.
            </summary>
            <param name="parserContext">
            It's the parser context.
            </param>
            <param name="message">
            The message to get the field.
            </param>
            <returns>
            The field value.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.MessageExpression.GetLeafFieldValueBytes(Trx.Messaging.FormatterContext@,Trx.Messaging.Message)">
            <summary>
            It returns the field value as a byte array.
            </summary>
            <param name="formatterContext">
            It's the context of formatting to be used by the method.
            </param>
            <param name="message">
            The message to get the field.
            </param>
            <returns>
            The field value.
            </returns>
        </member>
        <member name="P:Trx.Messaging.ConditionalFormatting.MessageExpression.FieldNumber">
            <summary>
            It returns or sets the leaf field number.
            </summary>
        </member>
        <member name="T:Trx.Messaging.ConditionalFormatting.ConditionalOrOperator">
            <summary>
            This class implements the or operator of two expressions.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.ConditionalOrOperator.#ctor">
            <summary>
            It initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.ConditionalOrOperator.#ctor(Trx.Messaging.ConditionalFormatting.IBooleanExpression,Trx.Messaging.ConditionalFormatting.IBooleanExpression)">
            <summary>
            It initializes a new instance of the class.
            </summary>
            <param name="leftExpression">
            The left expression of the or operator.
            </param>
            <param name="rightExpression">
            The right expression of the or operator.
            </param>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.ConditionalOrOperator.EvaluateParse(Trx.Messaging.ParserContext@)">
            <summary>
            Evaluates the expression when parsing a message.
            </summary>
            <param name="parserContext">
            It's the parser context.
            </param>
            <returns>
            A boolean value.
            </returns>
        </member>
        <member name="M:Trx.Messaging.ConditionalFormatting.ConditionalOrOperator.EvaluateFormat(Trx.Messaging.Field,Trx.Messaging.FormatterContext@)">
            <summary>
            Evaluates the expression when formatting a message.
            </summary>
            <param name="field">
            It's the field to format.
            </param>
            <param name="formatterContext">
            It's the context of formatting to be used by the method.
            </param>
            <returns>
            A boolean value.
            </returns>
        </member>
        <member name="P:Trx.Messaging.ConditionalFormatting.ConditionalOrOperator.LeftExpression">
            <summary>
            It returns or sets the left expression of the or operator.
            </summary>
        </member>
        <member name="P:Trx.Messaging.ConditionalFormatting.ConditionalOrOperator.RightExpression">
            <summary>
            It returns or sets the right expression of the or operator.
            </summary>
        </member>
        <member name="T:Trx.Messaging.Channels.FourBytesNboHeaderChannel">
            <summary>
            This class implements a channel capable of interchanging messages
            with another system, using the TCP/IP communication protocol.
            It uses a 4 bytes header in NBO format to indicate the length of
            data.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Channels.FourBytesNboHeaderChannel.#ctor(Trx.Messaging.IMessageFormatter)">
            <summary>
            It initializes a new instance of <see cref="T:Trx.Messaging.Channels.FourBytesNboHeaderChannel"/> class.
            </summary>
            <param name="formatter">
            It's the messages formatter to use.
            </param>
        </member>
        <member name="M:Trx.Messaging.Channels.FourBytesNboHeaderChannel.#ctor(Trx.Messaging.IMessageFormatter,System.String,System.Int32)">
            <summary>
            It initializes a new instance of <see cref="T:Trx.Messaging.Channels.FourBytesNboHeaderChannel"/> class,
            and tries to connect to the indicated host and port.
            </summary>
            <param name="formatter">
            It's the messages formatter to use.
            </param>
            <param name="hostName">
            It's the host's name to which it tries to connect.
            </param>
            <param name="port">
            It's the port number in the host to which it tries to connect.
            </param>
        </member>
        <member name="M:Trx.Messaging.Channels.FourBytesNboHeaderChannel.DataLengthHeaderLength(System.Boolean)">
            <summary>
            It informs the length of the packet length indicator.
            </summary>
            <param name="formatting">
            true if we're formatting, false if we're receiving a message.
            </param>
            <returns>
            The length of the packet length indicator.
            </returns>
        </member>
        <member name="M:Trx.Messaging.Channels.FourBytesNboHeaderChannel.UpdateDataLengthHeader(Trx.Messaging.FormatterContext@)">
            <summary>
            Updates the data length to be sent to the remote system.
            </summary>
            <param name="formatterContext">
            It's the message formatter context.
            </param>
        </member>
        <member name="M:Trx.Messaging.Channels.FourBytesNboHeaderChannel.GetDataLength(Trx.Messaging.ParserContext@,System.Boolean@)">
            <summary>
            Analyse from the parser context the length of the data packet
            to be processed.
            </summary>
            <param name="parserContext">
            It's the parser context which holds the information of the
            packet length.
            </param>
            <param name="lengthConsumed">
            Used to indicate data length was consumed.
            </param>
            <returns>
            It's the data packet length which can be turned into a
            message.
            </returns>
            <remarks>
            This method consumes data from the parser context.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.Channels.FourBytesNboHeaderChannel.Clone">
            <summary>
            Clones the channel.
            </summary>
            <returns>
            The clone.
            </returns>
        </member>
        <member name="T:Trx.Messaging.Channels.FourBytesAsciiHeaderChannel">
            <summary>
            This class implements a channel capable of interchanging messages
            with another system, using the TCP/IP communication protocol.
            It uses a 4 bytes header in NBO format to indicate the length of
            data.
            </summary>
        </member>
        <member name="M:Trx.Messaging.Channels.FourBytesAsciiHeaderChannel.#ctor(Trx.Messaging.IMessageFormatter)">
            <summary>
            It initializes a new instance of <see cref="T:Trx.Messaging.Channels.FourBytesAsciiHeaderChannel"/> class.
            </summary>
            <param name="formatter">
            It's the messages formatter to use.
            </param>
        </member>
        <member name="M:Trx.Messaging.Channels.FourBytesAsciiHeaderChannel.#ctor(Trx.Messaging.IMessageFormatter,System.String,System.Int32)">
            <summary>
            It initializes a new instance of <see cref="T:Trx.Messaging.Channels.FourBytesAsciiHeaderChannel"/> class,
            and tries to connect to the indicated host and port.
            </summary>
            <param name="formatter">
            It's the messages formatter to use.
            </param>
            <param name="hostName">
            It's the host's name to which it tries to connect.
            </param>
            <param name="port">
            It's the port number in the host to which it tries to connect.
            </param>
        </member>
        <member name="M:Trx.Messaging.Channels.FourBytesAsciiHeaderChannel.DataLengthHeaderLength(System.Boolean)">
            <summary>
            It informs the length of the packet length indicator.
            </summary>
            <param name="formatting">
            true if we're formatting, false if we're receiving a message.
            </param>
            <returns>
            The length of the packet length indicator.
            </returns>
        </member>
        <member name="M:Trx.Messaging.Channels.FourBytesAsciiHeaderChannel.UpdateDataLengthHeader(Trx.Messaging.FormatterContext@)">
            <summary>
            Updates the data length to be sent to the remote system.
            </summary>
            <param name="formatterContext">
            It's the message formatter context.
            </param>
        </member>
        <member name="M:Trx.Messaging.Channels.FourBytesAsciiHeaderChannel.GetDataLength(Trx.Messaging.ParserContext@,System.Boolean@)">
            <summary>
            Analyse from the parser context the length of the data packet
            to be processed.
            </summary>
            <param name="parserContext">
            It's the parser context which holds the information of the
            packet length.
            </param>
            <param name="lengthConsumed">
            Used to indicate data length was consumed.
            </param>
            <returns>
            It's the data packet length which can be turned into a
            message.
            </returns>
            <remarks>
            This method consumes data from the parser context.
            </remarks>
        </member>
        <member name="M:Trx.Messaging.Channels.FourBytesAsciiHeaderChannel.Clone">
            <summary>
            Clones the channel.
            </summary>
            <returns>
            The clone.
            </returns>
        </member>
    </members>
</doc>
